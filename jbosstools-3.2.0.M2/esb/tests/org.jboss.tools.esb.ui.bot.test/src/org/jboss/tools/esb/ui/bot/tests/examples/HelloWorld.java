package org.jboss.tools.esb.ui.bot.tests.examples;

import static org.eclipse.swtbot.swt.finder.waits.Conditions.shellCloses;

import org.eclipse.swtbot.swt.finder.SWTBot;
import org.eclipse.swtbot.swt.finder.widgets.SWTBotShell;
import org.eclipse.swtbot.swt.finder.widgets.SWTBotTree;
import org.eclipse.swtbot.swt.finder.widgets.SWTBotTreeItem;
import org.jboss.tools.ui.bot.ext.SWTEclipseExt;
import org.jboss.tools.ui.bot.ext.Timing;
import org.jboss.tools.ui.bot.ext.config.Annotations.SWTBotTestRequires;
import org.jboss.tools.ui.bot.ext.config.Annotations.Server;
import org.jboss.tools.ui.bot.ext.config.Annotations.ServerState;
import org.jboss.tools.ui.bot.ext.config.Annotations.ServerType;
import org.jboss.tools.ui.bot.ext.gen.ActionItem.NewObject.JBossToolsProjectExamples;
import org.jboss.tools.ui.bot.ext.types.IDELabel;
import org.junit.AfterClass;
import org.junit.Test;

@SWTBotTestRequires(server=@Server(type=ServerType.SOA,state=ServerState.NotRunning))
public class HelloWorld extends ESBExampleTest {

	String projectName="helloworld";
	String projectClientName="helloworld_client";
	
	@AfterClass
	public static void waitaminute() {
		//bot.sleep(Long.MAX_VALUE);
	}
	@Test
	public void helloWorldExample() {
		String soaNode = getRunningSoaVersionTreeLabel();
		assertNotNull("We are running on unexpected SOA-P version "+configuredState.getServer().version+" update test source code "+this.getClass().getName(), soaNode);
		if (jbt.isJBDSRun()) {
		createHelloWorldExample(soaNode, "JBoss ESB HelloWorld Example - ESB", "helloworld", "JBoss ESB HelloWorld Example - Client", "helloworld_testclient");
		}
		else {
			createHelloWorldExample(soaNode, "JBoss ESB HelloWorld Example - ESB", "helloworld", null, "helloworld_testclient");	
		}
	}

	/**
	 * creates example
	 * @param soaNode first treenode name on projectExamples dialog
	 * @param exampleName name of example node
	 * @param projectName projectname that will be generated by example
	 * @param exampleClientName name of example client example (when null, client project is assumed to be together with example)
	 * @param projectClientName name of client project that will be generated by example (or client example)
	 */
	private void createHelloWorldExample(String soaNode, String exampleName,String projectName, String exampleClientName, String projectClientName) {
		SWTBot wiz = open.newObject(JBossToolsProjectExamples.LABEL);
		SWTBotTree tree = wiz.tree();				
		tree.expandNode(soaNode).select(exampleName);
		assertTrue(wiz.textWithLabel(JBossToolsProjectExamples.TEXT_PROJECT_NAME).getText().equals(projectName));
		wiz.button(IDELabel.Button.FINISH).click();
		SWTBotShell shell = bot.shell("Downloading...");
		shell.activate();
		bot.waitUntil(shellCloses(shell),Timing.time100S());
		shell = bot.shell("Quick Fix");
		shell.activate();
		open.finish(shell.bot());
		assertTrue(projectExplorer.existsResource(projectName));
		assertTrue(projectExplorer.existsResource(projectName,"esbcontent","META-INF","jboss-esb.xml"));
		if (exampleClientName!=null) {
			wiz = open.newObject(JBossToolsProjectExamples.LABEL);
			tree = wiz.tree();
			tree.expandNode(soaNode).select(exampleClientName);
			assertTrue(wiz.textWithLabel(JBossToolsProjectExamples.TEXT_PROJECT_NAME).getText().equals(projectClientName));
			wiz.button(IDELabel.Button.FINISH).click();
			shell = bot.shell("Downloading...");
			shell.activate();
			bot.waitUntil(shellCloses(shell),Timing.time100S());
			shell = bot.shell("Quick Fix");
			shell.activate();
			open.finish(shell.bot());
		}
		assertTrue(projectExplorer.existsResource(projectClientName));
		fixLibrary(projectName,"Server Library");
		fixLibrary(projectClientName,"Server Library");
		fixLibrary(projectName,"JBoss ESB Runtime");
		fixLibrary(projectClientName,"JBoss ESB Runtime");
		SWTBotTreeItem errors = problems.getErrorsNode(bot);
		assertTrue("Project still contain problems :"+eclipse.getFormattedTreeNodesText(problems.show().bot().tree(), errors.getItems()),errors==null);
		packageExplorer.runOnServer(projectName);
		String text = console.getConsoleText();		
		SWTBotTreeItem jmsCall = SWTEclipseExt.selectTreeLocation(packageExplorer.show().bot(),projectClientName,"src","org.jboss.soa.esb.samples.quickstart.helloworld.test","SendJMSMessage.java");
		eclipse.runTreeItemAsJavaApplication(jmsCall);
		bot.sleep(Timing.time5S());
		console.switchConsole(configuredState.getServer().name);
		String text2 = console.getConsoleText(TIME_5S, TIME_20S, false);
		assertTrue("Calling JMS Send message failed, nothing appened to server log",text.length()<text2.length());
		String diff = text2.substring(text.length());		
		assertTrue("Calling JMS Send message failed, unexpected server output :"+diff,diff.contains("Body: Hello World"));
		
	}
}
