<!-- INCOMPLETE - see TODO markers -->
<project default="run" basedir=".">

	<property name="debug" value="false" />

	<target name="get.ant-contrib" unless="ant-contrib.jar.exists">
		<property name="ANTCONTRIB_MIRROR" value="http://downloads.sourceforge.net/ant-contrib/" />
		<get usetimestamp="true"
		     dest="${COMMON_TOOLS}/ant-contrib-1.0b2-bin.zip"
		     src="${ANTCONTRIB_MIRROR}/ant-contrib-1.0b2-bin.zip"
		/>
		<touch file="${COMMON_TOOLS}/ant-contrib-1.0b2-bin.zip" />
		<mkdir dir="${java.io.tmpdir}/ant-contrib-1.0b2-bin.zip_" />
		<unzip src="${COMMON_TOOLS}/ant-contrib-1.0b2-bin.zip"
		       dest="${java.io.tmpdir}/ant-contrib-1.0b2-bin.zip_"
		       overwrite="true"
		/>
		<copy file="${java.io.tmpdir}/ant-contrib-1.0b2-bin.zip_/ant-contrib/lib/ant-contrib.jar"
		      tofile="${COMMON_TOOLS}/ant-contrib.jar"
		      failonerror="true"
		/>
		<delete dir="${java.io.tmpdir}/ant-contrib-1.0b2-bin.zip_" includeemptydirs="true" quiet="true" />
	</target>

	<!-- override for local build -->
	<available file="/qa/tools/opt" type="dir" property="isJBossQA" />
	<target name="local" unless="isJBossQA">
		<property name="WORKINGDIR" value="${basedir}" />
		<property name="COMMON_TOOLS" value="${java.io.tmpdir}" />
	</target>

	<target name="init" depends="local">
		<available file="${COMMON_TOOLS}/ant-contrib.jar" type="file" property="ant-contrib.jar.exists" />
		<antcall target="get.ant-contrib" />
		<taskdef resource="net/sf/antcontrib/antlib.xml">
			<classpath>
				<pathelement location="${COMMON_TOOLS}/ant-contrib.jar" />
			</classpath>
		</taskdef>

		<macrodef name="debug">
			<text name="echo" />
			<sequential>
				<if>
					<and>
						<isset property="debug" />
						<istrue value="${debug}" />
					</and>
					<then>
						<echo message="@{echo}" />
					</then>
				</if>
			</sequential>
		</macrodef>

		<!-- = = = = = = = = = = = = = = = = =
	      macrodef: write out a pom.xml which aggregates subdirs   
	     = = = = = = = = = = = = = = = = = -->
		<macrodef name="writeAggregatePom">
			<attribute name="dir" default="." />
			<attribute name="parentpom" />
			<attribute name="artifactId" default="" />
			<attribute name="artifactVersion" default="" />
			<sequential>
				<propertyregex property="activeDir"
				               input="@{dir}"
				               defaultvalue="@{dir}"
				               regexp="${WORKINGDIR}/"
				               replace=""
				               casesensitive="true"
				               override="true"
				/>
				<debug>         Agg dir: ${activeDir}, artifactId: @{artifactId}, artifactVersion: @{artifactVersion}, parentpom: @{parentpom}</debug>
				<if>
					<equals arg1="@{artifactId}" arg2="" />
					<then>
						<var name="artifactId" unset="true" />
						<antcallback target="getArtifactId" return="artifactId">
							<property name="dir" value="@{dir}" />
						</antcallback>
					</then>
					<else>
						<var name="artifactId" value="@{artifactId}" />
					</else>
				</if>
				<if>
					<equals arg1="@{artifactVersion}" arg2="" />
					<then>
						<var name="artifactVersion" unset="true" />
						<antcallback target="getArtifactVersion" return="artifactVersion">
							<property name="dir" value="@{dir}" />
						</antcallback>
					</then>
					<else>
						<var name="artifactVersion" value="@{artifactVersion}" />
					</else>
				</if>
				<!-- <echo>Write Agg @{dir}/pom.xml</echo> -->
				<echo file="@{dir}/pom.xml">&lt;project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"
	       xmlns="http://maven.apache.org/POM/4.0.0"
	       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	>
	&lt;modelVersion>4.0.0&lt;/modelVersion>
	&lt;parent>
		&lt;relativePath>@{parentpom}&lt;/relativePath>
		&lt;groupId>${projectName}&lt;/groupId>
		&lt;artifactId>${projectName}.parent.pom&lt;/artifactId>
		&lt;version>${pomVersion}&lt;/version>
	&lt;/parent>
	&lt;groupId>${projectName}&lt;/groupId>
	&lt;artifactId>${artifactId}&lt;/artifactId>
	&lt;version>${artifactVersion}&lt;/version>
	&lt;packaging>pom&lt;/packaging>
	&lt;modules>
</echo>
				<var name="artifactId" unset="true" />
				<var name="artifactVersion" unset="true" />
				<for param="subdir" delimiter=", 
	">
					<path>
						<dirset dir="@{dir}" excludes="**/*.sdk.*, ., **/doc*, **/download.jboss.org" includes="*" />
					</path>
					<sequential>
						<basename property="subdirSuffix" file="@{subdir}" />
						<echo file="@{dir}/pom.xml" append="true">		&lt;module>${subdirSuffix}&lt;/module>
</echo>
						<var name="subdirSuffix" unset="true" />
					</sequential>
				</for>
				<echo file="@{dir}/pom.xml" append="true">	&lt;/modules>
&lt;/project>
	</echo>
			</sequential>
		</macrodef>

		<!-- = = = = = = = = = = = = = = = = =
	      macrodef: write out a pom.xml for a plugin or feature or test   
	     = = = = = = = = = = = = = = = = = -->
		<macrodef name="writeModulePom">
			<attribute name="dir" default="." />
			<attribute name="parentpom" />
			<sequential>
				<var name="artifactId" unset="true" />
				<antcallback target="getArtifactId" return="artifactId">
					<property name="dir" value="@{dir}" />
				</antcallback>
				<var name="artifactVersion" unset="true" />
				<antcallback target="getArtifactVersion" return="artifactVersion">
					<property name="dir" value="@{dir}" />
				</antcallback>
				<propertyregex property="activeDir"
				               input="@{dir}"
				               defaultvalue="@{dir}"
				               regexp="${WORKINGDIR}/"
				               replace=""
				               casesensitive="true"
				               override="true"
				/>
				<debug>         Mod dir: ${activeDir}, artifactId: ${artifactId}, artifactVersion: ${artifactVersion}, parentpom: @{parentpom}</debug>
				<echo file="@{dir}/pom.xml">&lt;project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	&lt;modelVersion>4.0.0&lt;/modelVersion> 
	&lt;parent>
	  &lt;relativePath>@{parentpom}&lt;/relativePath>
	  &lt;groupId>${projectName}&lt;/groupId>
	  &lt;artifactId>${projectName}.parent.pom&lt;/artifactId>
	  &lt;version>${pomVersion}&lt;/version>
	&lt;/parent>
	&lt;groupId>${projectName}&lt;/groupId> 
	&lt;artifactId>${artifactId}&lt;/artifactId> 
	&lt;version>${artifactVersion}&lt;/version> 
	&lt;packaging></echo>
				<var name="artifactId" unset="true" />
				<var name="artifactVersion" unset="true" />
				<if>
					<matches string="@{dir}" pattern=".+/features/.+" />
					<then>
						<echo file="@{dir}/pom.xml" append="true">eclipse-feature</echo>
					</then>
					<elseif>
						<matches string="@{dir}" pattern=".+/.+site" />
						<then>
							<echo file="@{dir}/pom.xml" append="true">eclipse-update-site</echo>
						</then>
					</elseif>
					<elseif>
						<and>
							<not>
								<matches string="@{dir}" pattern=".+/plugins/.+" />
							</not>
							<matches string="@{dir}" pattern=".+/tests/.+" />
						</and>
						<then>
							<echo>@{dir} is a test plugin</echo>
							<echo file="@{dir}/pom.xml" append="true">eclipse-test-plugin</echo>
						</then>
					</elseif>
					<else>
						<echo file="@{dir}/pom.xml" append="true">eclipse-plugin</echo>
					</else>

				</if>
				<echo file="@{dir}/pom.xml" append="true">
	&lt;/packaging> 
&lt;/project>
	</echo>
			</sequential>
		</macrodef>

		<!-- = = = = = = = = = = = = = = = = =
	      macrodef: generateAggregator          
	     = = = = = = = = = = = = = = = = = -->
		<macrodef name="generateAggregator">
			<attribute name="dir" default="." />
			<attribute name="parentPom" default="${pathToParentPom}parent-pom.xml" />
			<attribute name="artifactId" default="" />
			<attribute name="artifactVersion" default="" />
			<sequential>
				<writeAggregatePom dir="@{dir}"
				                   parentpom="@{parentpom}"
				                   artifactId="@{artifactId}"
				                   artifactVersion="@{artifactVersion}"
				/>
				<var name="aggregatorcountstring" value="${aggregatorcountstring}1" />

				<dump dir="@{dir}"
				      parentpom="@{parentpom}"
				      artifactId="@{artifactId}"
				      artifactVersion="@{artifactVersion}"
				/>

			</sequential>
		</macrodef>


		<!-- = = = = = = = = = = = = = = = = =
          macrodef: dump          
         = = = = = = = = = = = = = = = = = -->
		<macrodef name="dump">
			<attribute name="dir" />
			<attribute name="parentpom" />
			<attribute name="artifactId" default="" />
			<attribute name="artifactVersion" default="" />
			<sequential>

				<for param="subdir" delimiter=", 
	">
					<path>
						<dirset dir="@{dir}"
						        excludes="*.sdk.*, ., **/doc*, **/download.jboss.org, **/util"
						        includes="*"
						/>
					</path>
					<sequential>
						<var name="aggregate" value="false" />
						<if>
							<or>
								<!-- a plugin, feature, or update site dir -->
								<available file="@{subdir}/META-INF/MANIFEST.MF" type="file" />
								<available file="@{subdir}/feature.xml" type="file" />
								<available file="@{subdir}/site.xml" type="file" />
							</or>
							<then>
								<!-- valid place to create a pom -->
								<writeModulePom dir="@{subdir}" parentpom="../@{parentpom}" />
								<var name="modulecountstring" value="${modulecountstring}1" />
							</then>
							<else>
								<for list="plugins tests features site" param="type" delimiter=" ">
									<sequential>
										<if>
											<available file="@{subdir}/@{type}" type="dir" />
											<then>
												<var name="aggregate" value="true" />
												<basename property="artifactIdAgg" file="@{subdir}" />
												<generateAggregator dir="@{subdir}/@{type}"
												                    parentpom="../../@{parentpom}"
												                    artifactId="${artifactIdAgg}.@{type}"
												                    artifactVersion="@{artifactVersion}"
												/>
												<var name="artifactIdAgg" unset="true" />
												<var name="aggregatorcountstring" value="${aggregatorcountstring}1" />
											</then>
										</if>
									</sequential>
								</for>

								<if>
									<istrue value="${aggregate}" />
									<else>
										<basename property="artifactIdAgg" file="@{subdir}" />
										<echo>Generate Agg for ${artifactIdAgg}</echo>
										<writeAggregatePom dir="@{subdir}"
										                   parentpom="../${pathToParentPom}parent-pom.xml"
										                   artifactId="${artifactIdAgg}.all"
										                   artifactVersion="@{artifactVersion}"
										/>
										<var name="artifactIdAgg" unset="true" />
										<var name="aggregatorcountstring" value="${aggregatorcountstring}1" />
									</else>
								</if>
							</else>
						</if>
					</sequential>
				</for>
			</sequential>
		</macrodef>

		<!-- = = = = = = = = = = = = = = = = =
	      macrodef: count items in a list    
	     = = = = = = = = = = = = = = = = = -->
		<!-- example usage: 
		<list.count list="foo bar baz" />
		<echo message="${list.count.return}" />
		<var name="list.count.return" unset="true"/>
		<list.count list="foo bar" />
		<echo message="${list.count.return}" />
		-->
		<macrodef name="list.count">
			<attribute name="list" default="" />
			<sequential>
				<var name="count" value="" />
				<for param="listitem" list="@{list}" delimiter=", 
	">
					<sequential>
						<var name="count" value="${count}0" />
					</sequential>
				</for>
				<length property="list.count.return" string="${count}" />
			</sequential>
		</macrodef>

	</target>

	<target name="run" depends="init">
		<if>
			<not>
				<available file="${WORKINGDIR}/parent-pom.xml" type="file" />
			</not>
			<then>
				<fail>Error: no parent-pom.xml found in ${WORKINGDIR}</fail>
			</then>
		</if>

		<!-- Configuration Start -->
		<var name="projectName" value="org.jboss.tools" />
		<var name="pathToParentPom" value="" />
		<var name="pomVersion" value="0.0.1-SNAPSHOT" />
		<!-- Configuration Ends -->

		<!-- counter variables -->
		<var name="aggregatorcountstring" value="" />
		<var name="modulecountstring" value="" />

		<!-- call generateAggregator for overall -->
		<generateAggregator dir="."
		                    parentpom="${pathToParentPom}parent-pom.xml"
		                    artifactId="trunk"
		                    artifactVersion="${pomVersion}"
		/>
		<!-- summary -->
		<length string="${modulecountstring}" property="modulecount" />
		<length string="${aggregatorcountstring}" property="aggregatorcount" />
		<echo>Modules: ${modulecount} Aggregations: ${aggregatorcount}</echo>

	</target>

	<target name="getArtifactVersion">
		<property name="dir" value="." />
		<!-- echo>${dir}</echo -->
		<if>
			<available file="${dir}/META-INF/MANIFEST.MF" type="file" />
			<then>
				<!-- get Bundle-SymbolicName: -->
				<loadfile srcfile="${dir}/META-INF/MANIFEST.MF" property="artifactVersion">
					<filterchain>
						<linecontains>
							<contains value="Bundle-Version:" />
						</linecontains>
					</filterchain>
				</loadfile>
				<propertyregex property="artifactVersion"
				               input="${artifactVersion}"
				               defaultvalue="${artifactVersion}"
				               regexp="Bundle-Version:( +)([^\n\r]+)[\n\r]+"
				               replace="\2"
				               casesensitive="true"
				               override="true"
				/>
				<propertyregex property="artifactVersion"
				               input="${artifactVersion}"
				               defaultvalue="${artifactVersion}"
				               regexp="(.+).qualifier"
				               replace="\1-SNAPSHOT"
				               casesensitive="true"
				               override="true"
				/>
			</then>
			<elseif>
				<available file="${dir}/feature.xml" type="file" />
				<then>
					<!-- get <feature version=""> -->
					<xmlproperty file="${dir}/feature.xml" collapseAttributes="true" />
					<var name="artifactVersion" value="${feature.version}" />
					<var name="feature.version" unset="true" />
				</then>
			</elseif>
			<else>
				<echo>Warning! artifactVersion not found for ${dir}!</echo>
				<var name="artifactVersion" value="0.0.0" />
			</else>
		</if>
	</target>

	<target name="getArtifactId">
		<property name="dir" value="." />
		<!-- echo>${dir}</echo -->
		<if>
			<available file="${dir}/META-INF/MANIFEST.MF" type="file" />
			<then>
				<!-- get Bundle-SymbolicName: -->
				<loadfile srcfile="${dir}/META-INF/MANIFEST.MF" property="artifactId">
					<filterchain>
						<linecontains>
							<contains value="Bundle-SymbolicName:" />
						</linecontains>
					</filterchain>
				</loadfile>
				<propertyregex property="artifactId"
				               input="${artifactId}"
				               defaultvalue="${artifactId}"
				               regexp="Bundle-SymbolicName:([\t ]+)([^\n\r\t ]+);(.+)[\n\r\t ]+"
				               replace="\2"
				               casesensitive="true"
				               override="true"
				/>
				<propertyregex property="artifactId"
				               input="${artifactId}"
				               defaultvalue="${artifactId}"
				               regexp="Bundle-SymbolicName:([\t ]+)([^\n\r\t ]+)[\n\r\t ]+"
				               replace="\2"
				               casesensitive="true"
				               override="true"
				/>
			</then>
			<elseif>
				<available file="${dir}/feature.xml" type="file" />
				<then>
					<!-- get <feature id=""> -->
					<xmlproperty file="${dir}/feature.xml" collapseAttributes="true" />
					<var name="artifactId" value="${feature.id}" />
					<var name="feature.id" unset="true" />
				</then>
			</elseif>
			<else>
				<echo>Warning! artifactId not found for ${dir}!</echo>
				<basename file="${dir}" property="artifactId" />
			</else>
		</if>
	</target>

	<!-- tests -->
	<target name="test.all">
		<property name="dirs"
		          value="
		${WORKINGDIR}/esb/features/org.jboss.tools.esb.feature
		${WORKINGDIR}/as/tests/org.jboss.ide.eclipse.as.archives.integration.test
		${WORKINGDIR}/esb/plugins/org.jboss.tools.esb.core
		${WORKINGDIR}/bpel/plugins/org.eclipse.bpel.apache.ode.deploy.ui
		${WORKINGDIR}/bpel/features/org.jboss.tools.bpel.sdk.feature	
		${WORKINGDIR}/bpel/plugins/org.eclipse.bpel.xpath10
		${WORKINGDIR}/vpe/plugins/org.jboss.tools.vpe.ui.palette
		${WORKINGDIR}/tests/features/org.jboss.tools.test.feature
		${WORKINGDIR}/portlet/features/org.jboss.tools.portlet.test.feature
		${WORKINGDIR}/jst/features/org.jboss.tools.jst.feature
		${WORKINGDIR}/jst/features/org.jboss.tools.jst.web.tiles.feature
		${WORKINGDIR}/xulrunner/site/org.mozilla.xulrunner.site
		"
		/>
		<antcall target="test.getArtifactVersion" />
		<antcall target="test.getArtifactId" />
	</target>

	<target name="test.getArtifactVersion" depends="init">
		<property name="dirs"
		          value="
		${WORKINGDIR}/esb/features/org.jboss.tools.esb.feature
		${WORKINGDIR}/as/tests/org.jboss.ide.eclipse.as.archives.integration.test
		${WORKINGDIR}/esb/plugins/org.jboss.tools.esb.core
		${WORKINGDIR}/bpel/plugins/org.eclipse.bpel.apache.ode.deploy.ui
		${WORKINGDIR}/tests/features/org.jboss.tools.test.feature
		${WORKINGDIR}/portlet/features/org.jboss.tools.portlet.test.feature
		${WORKINGDIR}/jst/features/org.jboss.tools.jst.feature
		${WORKINGDIR}/jst/features/org.jboss.tools.jst.web.tiles.feature
		${WORKINGDIR}/xulrunner/site/org.mozilla.xulrunner.site
		"
		/>
		<for param="dir" list="${dirs}" delimiter=", 
			">
			<sequential>
				<antcallback target="getArtifactVersion" return="artifactVersion">
					<property name="dir" value="@{dir}" />
				</antcallback>
				<echo>artifactVersion = ${artifactVersion} for @{dir}</echo>
				<var name="artifactVersion" unset="true" />
			</sequential>
		</for>
	</target>

	<target name="test.getArtifactId" depends="init">
		<property name="dirs"
		          value="
		${WORKINGDIR}/esb/features/org.jboss.tools.esb.feature
		${WORKINGDIR}/as/tests/org.jboss.ide.eclipse.as.archives.integration.test
		${WORKINGDIR}/esb/plugins/org.jboss.tools.esb.core
		${WORKINGDIR}/xulrunner/site/org.mozilla.xulrunner.site
		"
		/>
		<for param="dir" list="${dirs}" delimiter=", 
			">
			<sequential>
				<antcallback target="getArtifactId" return="artifactId">
					<property name="dir" value="@{dir}" />
				</antcallback>
				<echo>artifactId = ${artifactId} for @{dir}</echo>
				<var name="artifactId" unset="true" />
			</sequential>
		</for>
	</target>

</project>
