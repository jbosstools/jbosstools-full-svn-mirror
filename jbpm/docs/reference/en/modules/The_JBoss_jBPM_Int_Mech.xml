<?xml version="1.0" encoding="UTF-8"?>
<chapter id="The_JBoss_jBPM_Int_Mech" xreflabel="The_JBoss_jBPM_Int_Mech">
    <?dbhtml filename="The_JBoss_jBPM_Int_Mech.html"?>
    <chapterinfo>
        <keywordset>
            <keyword>jBPM</keyword>
            <keyword/>
            <keyword/>
            <keyword/>
            <keyword/>
        </keywordset>
    </chapterinfo>
    <title>Actions : The JBoss jBPM Integration Mechanism</title>

    <para> In this chapter we will show how to do software integration with <property>JBoss
        jBPM</property>. The standard mechanism to realize this is to wrap the functionality you
        want to integrate in a class that implements the <emphasis>
            <property>ActionHandler</property>
        </emphasis> interface. </para>

    <section>
        <title>Creating a Hello World Action</title>

        <para> Each hello process should integrate one or more hello actions, so this is what we
            will be doing. We can integrate custom code at different points in the process
            definition. To do this we have to specify an action handler, represented by an
            implementation of the <emphasis>
                <property>ActionHandler</property>
            </emphasis> interface, and attach this piece of code to a particular event. These events
            are amongst others, going over a transition, leaving or entering nodes, after and
            before signalling. </para>

        <figure>
            <title>A Simple Hello Action</title>

            <mediaobject>
                <imageobject>
                    <imagedata fileref="images/The_JBoss_jBPM_Int_Mech/jboss_jbpm_int_mech_1.png"/>
                </imageobject>
            </mediaobject>
        </figure>

        <para> To make things a little bit more concrete, we will implement an <emphasis>
                <property>ActionHandler</property>
            </emphasis>. To do this, create a new class called <emphasis>
                <property>HelloActionHandler</property>
            </emphasis>, which implements the <emphasis>
                <property>ActionHandler</property>
            </emphasis> interface and implement the execute method as shown in the next figure. This
            test will add a variable named <emphasis>
                <property>greeting</property>
            </emphasis> to the collection of process variables and puts a message in it :
                <emphasis>&quot;Hello from ActionHandler&quot;</emphasis>. </para>

        <figure>
            <title>A Simple Hello Action</title>

            <mediaobject>
                <imageobject>
                    <imagedata fileref="images/The_JBoss_jBPM_Int_Mech/jboss_jbpm_int_mech_2.png" scale="75"/>
                </imageobject>
            </mediaobject>
        </figure>
    </section>

    <section>
        <title>Integrating the Hello World Action</title>

        <para> As good Testcity citizens we will first create a unit test that proves the behaviour
            we want to achieve by adding the <emphasis>
                <property>ActionHandler</property>
            </emphasis> to the process. So we implement another test. Creating the process instance
            is code we already saw in the previous chapter. We assert that no variable called
            greeting exist. Then we give the process a signal to move it to the first state. We want
            to associate the execution of the action with the event of going over the transition
            from the start state to the first state. So after the signal, the process should be in
            the first state as in the previous scenario. But moreover, the <emphasis>
                <property>greeting</property>
            </emphasis> variable should exist and contain the string &quot;Hello from
            ActionHandler&quot;. That&apos;s what we assert in the last lines of the test
            method.</para>

        <figure>
            <title>Create the Hello Action Test</title>

            <mediaobject>
                <imageobject>
                    <imagedata fileref="images/The_JBoss_jBPM_Int_Mech/jboss_jbpm_int_mech_3.png" scale="75"/>
                </imageobject>
            </mediaobject>
        </figure>

        <para> Running the tests now results in a failure. As a matter of fact, we did not associate
            the action with any particular event in the process definition, so the process variable
            did not get set. </para>

        <figure>
            <title>Test Results Before Integration</title>

            <mediaobject>
                <imageobject>
                    <imagedata fileref="images/The_JBoss_jBPM_Int_Mech/jboss_jbpm_int_mech_4.png" scale="75"/>
                </imageobject>
            </mediaobject>
        </figure>

        <para> Let&apos;s do something about it and add an action to the first transition of our
            sample process. To do this you can use the Actions tab in the Properties Editor that is
            under the graphical canvas. Bring up the popup menu of the action element container and
            chose New Action as itâ€™s shown on the screenshot below. The other way to add an action
            to the transition is simply to use the dropdown menu that is available under the action
            icon in the right upper corner of the Properties View.</para>

        <figure>
            <title>Adding an Action to a Transition</title>

            <mediaobject>
                <imageobject>
                    <imagedata fileref="images/The_JBoss_jBPM_Int_Mech/jboss_jbpm_int_mech_5.png"/>
                </imageobject>
            </mediaobject>
        </figure>

        <para>After adding the action a tabbed view with three pages will appear.</para>

        <figure>
            <title>Configuration Dialog for an Action</title>

            <mediaobject>
                <imageobject>
                    <imagedata fileref="images/The_JBoss_jBPM_Int_Mech/jboss_jbpm_int_mech_6.png"/>
                </imageobject>
            </mediaobject>
        </figure>

        <para>The first of these three pages allows you to give the Action a name. The last page
            contains some advanced attributes such as whether the Action is asynchronous. The
            Details page is the most important. It allows to choose and configure the actual action
            handler implementation. </para>

        <figure>
            <title>The Details page of an Action Configuration Dialog</title>

            <mediaobject>
                <imageobject>
                    <imagedata fileref="images/The_JBoss_jBPM_Int_Mech/jboss_jbpm_int_mech_7.png" scale="75"/>
                </imageobject>
            </mediaobject>
        </figure>


        <para>Clicking on the <emphasis>
                <property>Search...</property>
            </emphasis> button brings us to a Choose Class dialog.</para>


        <figure>
            <title>The Choose Action Handler Dialog</title>

            <mediaobject>
                <imageobject>
                    <imagedata fileref="images/The_JBoss_jBPM_Int_Mech/jboss_jbpm_int_mech_8.png"/>
                </imageobject>
            </mediaobject>
        </figure>


        <para> We choose our previously created &apos;HelloActionHandler&apos; class and
            push the <property>OK</property> button. After the selection of the action handler for
            the action, we can run the test and observe it gives us a green light.</para>

        <figure>
            <title>Test Results</title>

            <mediaobject>
                <imageobject>
                    <imagedata fileref="images/The_JBoss_jBPM_Int_Mech/jboss_jbpm_int_mech_10.png" scale="75"/>
                </imageobject>
            </mediaobject>
        </figure>


    </section>

    <section>
        <title> Integration Points</title>

        <para> The different integration points in a process definition are thoroughly documented in
            the <property>JBoss jBPM User Guide</property>. Instance nodes can contain many action
            elements. Each of these will appear in the Action element list of the Actions tab. But
            each Action also has a properties view of itself. You can navigate to this view by
            selecting the added Action in the outline view. </para>

    </section>

</chapter>
