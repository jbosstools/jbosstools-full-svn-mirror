<?xml version="1.0" encoding="UTF-8"?>
<chapter id="Test_Drive_Proc_Development" xreflabel="Test_Drive_Proc_Development">
    <?dbhtml filename="Test_Drive_Proc_Development.html"?>
    <chapterinfo>
        <keywordset>
            <keyword>jBPM</keyword>
            <keyword/>
            <keyword/>
            <keyword/>
            <keyword/>
        </keywordset>
    </chapterinfo>
    <title>Test Driven Process Development</title>

    <para> One of the most important advantages of JBoss jBPM&apos;s lightweight approach to BPM
        and workflow management is that developers can easily leverage their usual programming
        skills and techniques. One of these well-known techniques is Unit Testing and Test Driven
        Development. </para>
    <para>In this chapter we will show how developers, making use of the JBoss jBPM GPD, can use a
        technique we have baptized <property>Test Driven Process Development</property> to create
        process definitions and test their correctness. </para>

    <para> When creating the <emphasis>
            <property>HellojBPM</property>
        </emphasis> project the Project Creation wizard has already put in place all the library
        requirements we need to start writing the jBPM unit tests. They are contained in the jBPM
        Library container and the most important of them is the <emphasis>
            <property>.jar</property>
        </emphasis> file containing the core jBPM classes. While working on the project you could
        find them all in the Package Explorer.</para>

    <figure>
        <title>The jBPM Libraries</title>

        <mediaobject>
            <imageobject>
                <imagedata fileref="images/Test_Drive_Proc/test_driv_proc.png"/>
            </imageobject>
        </mediaobject>
    </figure>

    <para>It must be noted that it is possible to change the location of the core jBPM installation
        by changing the preference settings. More on this <link linkend="change_core_jbpm_inst">see
            later</link> in this book.</para>

    <para> With that extra knowledge on the project settings, you can create your first test. To do
        this, we create the <emphasis>
            <property>com.jbay</property>
        </emphasis> package in the <emphasis>
            <property>test/java</property>
        </emphasis> source folder. Then we bring up the context menu on this package and select <emphasis>
            <property>New &gt; Other...</property>
        </emphasis></para>

    <figure>
        <title>Call the JUnit Test Case Creation wizard</title>

        <mediaobject>
            <imageobject>
                <imagedata fileref="images/Test_Drive_Proc/test_driv_proc_1a.png"/>
            </imageobject>
        </mediaobject>
    </figure>

    <para> And then <emphasis>
            <property>Java &gt; JUnit &gt; JUnit Test Case</property>
        </emphasis> to call the specialized JUnite Test case creation wizard.</para>
    <figure>
        <title>Call the JUnit Test Case Creation wizard</title>

        <mediaobject>
            <imageobject>
                <imagedata fileref="images/Test_Drive_Proc/test_driv_proc_1b.png"/>
            </imageobject>
        </mediaobject>
    </figure>

    <para>The wizard looks as follows:</para>

    <figure>
        <title>Create Test Dialog</title>

        <mediaobject>
            <imageobject>
                <imagedata fileref="images/Test_Drive_Proc/test_driv_proc_2a.png"/>
            </imageobject>
        </mediaobject>
    </figure>

    <para>By default JUnite 3 version of testing framework is selected. Of course, you can choose
        new advanced JUnit 4 version. In this case you&apos;ll be prompted to add new JUnit
        Library to your build path. To add it automatically just click on the appropriate link. In the <emphasis>
            <property>Class under test</property></emphasis> section you can specify the class to test.</para>

    <figure>
        <title>A First Test Scenario</title>

        <mediaobject>
            <imageobject>
                <imagedata fileref="images/Test_Drive_Proc/test_driv_proc_2b.png" scale="75"/>
            </imageobject>
        </mediaobject>
    </figure>

    <para>Then, we call the test class <emphasis>
            <property>HelloTest</property>
        </emphasis> and press <emphasis>
            <property>Finish</property>
        </emphasis> button to complete.</para>

    <para> Next, we should write a simple test scenario as shown on the next figure. Let&apos;s
        study the code of this test case. </para>

    <figure id="hello_test">
        <title>A First Test Scenario</title>

        <mediaobject>
            <imageobject>
                <imagedata fileref="images/Test_Drive_Proc/test_driv_proc_3.png" scale="75"/>
            </imageobject>
        </mediaobject>
    </figure>

    <para>In the first line of the method, a jBPM process archive object is created. We use a
        constructor accepting the filename of the archive. In our case it is the <emphasis>
            <property>hello</property>
        </emphasis> file we created earlier and which lives in the <emphasis>
            <property>src/main/jpdl</property>
        </emphasis> folder of our project. After asserting that this object is really created, we
        extract a process definition object from it. This object is fed to the constructor of a
        process instance object. We have a process instance object, but this process is not yet
        started, so we can safely assert that its root token still resides in the start node. After
        signalling the token will move to the next state and the process will be in the <emphasis>
            <property>auction</property>
        </emphasis> state. Finally another signal will end the process. </para>


    <para> After writing this test we can check whether it works as expected by running it .</para>

    <figure>
        <title>Running the Process Test</title>

        <mediaobject>
            <imageobject>
                <imagedata fileref="images/Test_Drive_Proc/test_driv_proc_4.png" scale="75"/>
            </imageobject>
        </mediaobject>
    </figure>
    <para>All went well as we have a green light:</para>

    <figure>
        <title>Successful Test Run</title>

        <mediaobject>
            <imageobject>
                <imagedata fileref="images/Test_Drive_Proc/test_driv_proc_5.png" scale="75"/>
            </imageobject>
        </mediaobject>
    </figure>

    <para> Of course, this simple scenario was not very interesting, but the purpose of it was to
        show how you can reuse your development skills in a very straightforward way when doing
        process development. To see how more interesting processes and process test
        scenario&apos;s can be developed, we suggest you to read the <ulink
           url="http://docs.jboss.com/jbpm/v3/userguide/">JBoss jBPM User Guide</ulink> and to
        study the API reference. Moreover some more examples will be given later in this book.</para>

</chapter>
