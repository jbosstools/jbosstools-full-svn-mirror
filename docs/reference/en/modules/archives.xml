<?xml version="1.0" encoding="ISO-8859-1"?>
<chapter id="archives">
  <title>Archives: Packaging Your Projects</title>

  <para>
	  Every application, whether plain old Java, J2EE, or 
	  some other language altogether, needs to be packaged in some way. 
	  In Java-related projects, many people use ANT.
	  RHDS comes with our own archives tool with a bit
	  easier and less-verbose XML and a handy user interface.</para>

  <section><title>Overview</title>
	  <para>  The Project Archives plugin consists primarily of 
		  a view to set up each packaging configuration. 
		  Each project can enable or disable its builder, or 
		  depend on the global setting. </para>
	  <para> The packaging configuration for each project is stored 
		 in that project's root folder, and is in a file named 
		 .packages, which has a fairly simple XML structure.
		 Modifying the file by hand is neither required nor 
		 reccommended, and using the UI is the official
		 way of modifying your packaging structure. </para>
	 <para> Aside from the builder, the other preferences
		 for the plugin are mostly cosmetic, allowing you
		 to show full or truncated paths, show the project
		 at the root, etc. None of these have any
		 effect on the functionality of the packaging plugin,</para>
  </section>
  <section><title>The View</title>
    <figure id="archivesView"> <title>Project Archives View</title>
    <mediaobject>
	<alt>Project Archives View</alt>
	<imageobject>
		<imagedata 
			fileref="..\..\..\..\reference\en\images\archives\archivesViewOverview.jpg"/>
	</imageobject>
   </mediaobject>
   </figure>

   <para>
	   As shown in the figure above, a project's configuration
	   contains archives. In the image shown, only one archive is there,
	   but a project can contain many. 
	   Located inside the archive can be folders (testFolder), 
	   filesets (such as the one shown), or other internal archives.
	   Internal archives and Filesets may be directly inside of an archive,
	   or in some sub-folder of that archive. In the above image,
	   the inner archive <emphasis>inner.jar</emphasis> is located
	   inside <emphasis>SomeProject.jar/testFolder</emphasis>.</para>
   <para>
	   If the project has no declared archives, or more accurately
	   does not contain a .packages file, then the view will suggest you
	   create an archive, and list all available archive types.</para>
   <para>
	   In the upper right corner of the view, you will also see an icon
	   which, when clicked, will build the selected top-level archive. 
   </para>
   <para>
	   An addition not shown in the image is if a project 
	   is selected in the Packages View, for example, you can select
	   <emphasis>Project -&gt; Build Packages</emphasis>, which
	   will build all declared packages in that project's 
	   .packages file. This will execute a full build on all
	   declared archives. </para>

   <section><title>Creating an archive</title>
	   <para>
		   When creating a new archive, you have some different
		   options at your disposal. As was said above, if the
		   project has no .packages file, your options will be presented
		   to you all at once for you to choose from (as above). 
		   Otherwise you will right-click inside the view and select
		   <emphasis>New Archive</emphasis> to see your archive
		   type options.</para>
	   <para>
		   JAR is the standard archive type, and does very little 
		   configuration, leaving most of the work up to you.
		   You can customize the name, add folders, filesets, and 
		   inner jars to it. </para> 
	   <para>  The other types, for the most part, simply start off with
		   a default setting, usually the jar with some
		   specific children based on an expected structure of 
		   the project. For example, if the project
		   is a dynamic web project, and you create a WAR archive,
		   the archive will be created with a few filesets
		   relevant to the known structure of the project. </para>
	   <section><title>New JAR</title>
		   <para>
			   Because the first page of all new archive wizards
			   are the same, and it is also the only page in the 
			   New Jar Wizard, that page is shown below.</para>
		   <figure id="newJARPage"> <title>New JAR Page</title>
			   <mediaobject>
				   <alt>New JAR Page</alt>
				   <imageobject>
					   <imagedata fileref="..\..\..\..\reference\en\images\archives\newJAR.jpg"/>
				   </imageobject>
			   </mediaobject>
		   </figure>
		   <para>
			   The page is pretty simple. All it asks is for the name of your new
			   archive, a <emphasis>destination</emphasis>, which we'll get to in a moment,
			   and whether the archive is exploded or packaged up.</para>
		   <para>
			   The destination of an archive can be anywhere on the filesystem, 
			   anywhere in the workspace, inside some other archive, or inside
			   a folder declared inside an archive. You can browse to workspace or filesystem
			   destinations by clicking on their respective buttons. To select a destination inside
			   some other archive, you'll need to press the <emphasis>Workspace...</emphasis> button. 
			   At the bottom of the list, you'll see archives that have been declared in the workspace.
		   </para>
	   </section>
	   <section><title>Creating a Folder</title>
		   <para>Creating a folder is much easier. You simply
			   right-click on an archive or folder you want your new
			   folder to be a child under. The only piece of required 
			   information is naming the file.</para>
	   </section>
	   <section><title>Creating a FileSet</title>
		   <para>To create a new fileset, you click on an available target location such as an 
			   archive, a nested archive, or a folder within an archive, and select
			   <emphasis>New Fileset</emphasis>. The New Fileset Wizard requires
			   a destination (where the files will go), and a root directory (or where 
			   the files are coming from). The source can be anywhere in the workspace 
			   or from the filesystem at large.
		   </para>
		   <para>
			   Below that, the fileset requires only an includes pattern and 
			   an excludes pattern. As you type in either of these fields, 
			   the preview viewer should update itself with which files are matched.</para>
	   </section>
   </section>
   <section><title>View Actions</title>
		   <para>
			   The context menu on the items in the view is extendable, but there are
			   several that come standard. The first is the <emphasis>Build Archive</emphasis>
			   action, enabled only on top-level archives, which initiates a full build on that
			   archive. Editing and deleting nodes are also standard actions, with deletion
			   not needing an explanation. The edit action brings up the wizard associated
			   with that particular node type and allows the details to be changed. The final
			   action contribution here is the ability to publish to a declared server.</para>
	   </section>
	   <section><title>The Publish to Server Action</title>
		   <figure id="publishAction"> <title>Publish to Server</title>
			   <mediaobject>
				   <alt>Publish to Server</alt>
				   <imageobject>
					   <imagedata 
			fileref="..\..\..\..\reference\en\images\archives\publish.jpg"/>
				   </imageobject>
			   </mediaobject>
		   </figure>
		   <para>
			   The dialog above appears after selecting <emphasis>Publish to Server</emphasis>.
			   To simply publish once, you just select the server(s) that you want, and 
			   finish. If you want the <emphasis>Publish to Server</emphasis> action 
			   on that particular Archive to <emphasis>always</emphasis> publish to 
			   that set of servers, then check the appropriate checkbox. And finally, to
			   enable automatic publishing upon build events, check the last checkbox.</para>
		   <para>
			   The automatic publishing feature is nice if, for example, your 
			   package's destination (where it is built) is a temporary folder and 
			   you want the archive published to several servers. If you only really want your 
			   archive published to one server, it might be easier to have the archive's
			   destination folder be the deploy folder of the server.</para>


	   </section>
  </section>



  <!--
    <figure id="viewMain"> <title>JBoss Servers View: Main Section</title>
    <mediaobject>
	<alt>JBoss Servers View Main Section</alt>
	<imageobject>
		<imagedata 
			fileref="..\..\..\..\reference\en\images\asPerspective\viewMain.jpg"/>
	</imageobject>
   </mediaobject>
   </figure>
   -->
   </chapter>	
