hibernate.connection.driver_class.description=<p>JDBC driver class
hibernate.connection.url.description=<p>JDBC URL
hibernate.connection.username.description=<p>Database user
hibernate.connection.password.description=<p>Database user password
hibernate.connection.pool_size.description=<p>Maximum number of pooled connections
hibernate.connection.datasource.description=<p>Datasource JNDI name
hibernate.connection.provider_class.description=<p>The classname of a custom org.hibernate.connection.ConnectionProvider which provides JDBC connections to Hibernate.<p>Fully qualified class name.
hibernate.connection.isolation.description=<p>Sets the JDBC transaction isolation level. Check java.sql.Connection for meaningful values, but note that most databases do not support all isolation levels and some define additional, non-standard isolations.<p>e.g. 1, 2, 4, 8
hibernate.connection.autocommit.description=<p>Enables autocommit for JDBC pooled connections (it is not recommended). <p>true | false
hibernate.connection.release_mode.description=<p>Specifies when Hibernate should release JDBC connections. By default, a JDBC connection is held until the session is explicitly closed or disconnected. For an application server JTA datasource, use after_statement to aggressively release connections after every JDBC call. For a non-JTA connection, it often makes sense to release the connection at the end of each transaction, by using after_transaction. auto will choose after_statement for the JTA and CMT transaction strategies and after_transaction for the JDBC transaction strategy. <p> auto (default) | on_close | after_transaction | after_statement 

hibernate.jndi.url.description=<p>URL of the JNDI provider
hibernate.jndi.class.description=<p>Class of the JNDI InitialContextFactory

hibernate.dialect.description=<p>Full class name of dialect<p>In most cases Hibernate will actually be able to choose the correct org.hibernate.dialect.Dialect implementation based on the JDBC metadata returned by the JDBC driver.<p>Write all SQL statements to console. This is an alternative to setting the log category org.hibernate.SQL to debug.
hibernate.show_sql.description=<p>Write all SQL statements to console. This is an alternative to setting the log category org.hibernate.SQL to debug.<p>true | false
hibernate.format_sql.description=<p>Pretty print the SQL in the log and console.<p>true | false
hibernate.default_schema.description=<p>Qualify unqualified table names with the given schema/tablespace in generated SQL.
hibernate.default_catalog.description=<p>Qualifies unqualified table names with the given catalog in generated SQL.
hibernate.session_factory_name.description=<p>The org.hibernate.SessionFactory will be automatically bound to this name in JNDI after it has been created.<p>e.g. jndi/composite/name
hibernate.max_fetch_depth.description=<p>Sets a maximum "depth" for the outer join fetch tree for single-ended associations (one-to-one, many-to-one). A 0 disables default outer join fetching.<p>Recommended values between 0 and 3
hibernate.default_batch_fetch_size.description=<p>Sets a default size for Hibernate batch fetching of associations.<p>Recommended values 4, 8, 16
hibernate.default_entity_mode.description=<p>Sets a default mode for entity representation for all sessions opened from this SessionFactory. <p>dynamic-map, dom4j, pojo
hibernate.order_updates.description=<p>Forces Hibernate to order SQL updates by the primary key value of the items being updated. This will result in fewer transaction deadlocks in highly concurrent systems. <p>true | false
hibernate.generate_statistics.description=<p>If enabled, Hibernate will collect statistics useful for performance tuning. <p>true | false
hibernate.use_identifier_rollback.description=<p>If enabled, generated identifier properties will be reset to default values when objects are deleted. <p>true | false
hibernate.use_sql_comments.description=<p>If turned on, Hibernate will generate comments inside the SQL, for easier debugging, defaults to false. <p>true | false

hibernate.jdbc.fetch_size.description=<p>A non-zero value determines the JDBC fetch size (calls Statement.setFetchSize()).
hibernate.jdbc.batch_size.description=<p>A non-zero value enables use of JDBC2 batch updates by Hibernate. <p>Recommended values between 5 and 30.
hibernate.jdbc.batch_versioned_data.description=<p>Set this property to true if your JDBC driver returns correct row counts from executeBatch(). Iit is usually safe to turn this option on. Hibernate will then use batched DML for automatically versioned data. Defaults to false. <p>true | false
hibernate.jdbc.factory_class.description=<p>Select a custom org.hibernate.jdbc.Batcher. Most applications will not need this configuration property.<p>Fully qualified class name.
hibernate.jdbc.use_scrollable_resultset.description=<p>Enables use of JDBC2 scrollable resultsets by Hibernate. This property is only necessary when using user-supplied JDBC connections. Hibernate uses connection metadata otherwise. <p>true | false
hibernate.jdbc.use_streams_for_binary.description=<p>Use streams when writing/reading binary or serializable types to/from JDBC. *system-level property* <p>true | false
hibernate.jdbc.use_get_generated_keys.description=<p>Enables use of JDBC3 PreparedStatement.getGeneratedKeys() to retrieve natively generated keys after insert. Requires JDBC3+ driver and JRE1.4+, set to false if your driver has problems with the Hibernate identifier generators. By default, it tries to determine the driver capabilities using connection metadata. <p>true|false

hibernate.cache.provider_class.description=<p>The class name of a custom CacheProvider.
hibernate.cache.use_minimal_puts.description=<p>Optimizes second-level cache operation to minimize writes, at the cost of more frequent reads. This setting is most useful for clustered caches and, in Hibernate3, is enabled by default for clustered cache implementations. <p>true|false
hibernate.cache.use_query_cache.description=<p>Enables the query cache. Individual queries still have to be set cachable. <p>true|false
hibernate.cache.use_second_level_cache.description=<p>Can be used to completely disable the second level cache, which is enabled by default for classes which specify a <cache> mapping. <p> true|false
hibernate.cache.query_cache_factory.description=<p>The class name of a custom QueryCache interface, defaults to the built-in StandardQueryCache.
hibernate.cache.region_prefix.description=<p>A prefix to use for second-level cache region names.
hibernate.cache.use_structured_entries.description=<p>Forces Hibernate to store data in the second-level cache in a more human-friendly format. <p>true|false

hibernate.transaction.factory_class.description=<p>The class name of a TransactionFactory to use with Hibernate Transaction API (defaults to JDBCTransactionFactory).
hibernate.transaction.manager_lookup_class.description=<p>The class name of a TransactionManagerLookup. It is required when JVM-level caching is enabled or when using hilo generator in a JTA environment.
hibernate.transaction.flush_before_completion.description=<p>If enabled, the session will be automatically flushed during the before completion phase of the transaction. Built-in and automatic session context management is preferred. <p> true|false
hibernate.transaction.auto_close_session.description=<p>If enabled, the session will be automatically closed during the after completion phase of the transaction. Built-in and automatic session context management is preferred. <p> true|false

hibernate.current_session_context_class.description=<p>Supply a custom strategy for the scoping of the "current" Session. <p>jta | thread | managed | custom.Class
hibernate.query.factory_class.description=<p>Chooses the HQL parser implementation. <p>org.hibernate.hql.ast.ASTQueryTranslatorFactory or org.hibernate.hql.classic.ClassicQueryTranslatorFactory
hibernate.query.substitutions.description=<p>Is used to map from tokens in Hibernate queries to SQL tokens (tokens might be function or literal names, for example). e.g. hqlLiteral=SQL_LITERAL, hqlFunction=SQLFUNC
hibernate.hbm2ddl.auto.description=<p>Automatically validates or exports schema DDL to the database when the SessionFactory is created. With create-drop, the database schema will be dropped when the SessionFactory is closed explicitly. <p>validate | update | create | create-drop

hibernate.bytecode.use_reflection_optimizer.description=<p>Enables the use of CGLIB instead of runtime reflection (System-level property). Reflection can sometimes be useful when troubleshooting. Hibernate always requires CGLIB even if you turn off the optimizer. You cannot set this property in hibernate.cfg.xml. <p> true | false
hibernate.bytecode.provider.description=<p>Specifies the bytecode provider to use to optimize the use of reflection in NHibernate. Use null to disable the optimization completely, lcg to use lightweight code generation (supported on .NET 2.0 only), and codedom to use CodeDOM-based code generation (supported on .NET 1.1, has problems with generic types on .NET 2.0). <p>e.g. null | lcg | codedom
