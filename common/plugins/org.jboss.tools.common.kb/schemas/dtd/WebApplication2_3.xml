<?xml version="1.0" encoding="UTF-8"?>
<Schema rootElement="web-app" uri="-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN" url="http://java.sun.com/dtd/web-app_2_3.dtd">
  <ElementType bodyContent="allowed" endTag="required" name="web-app" startTag="required">
    <description> The web-app element is the root of the deployment
      descriptor for a web application. </description>
    <AttributeType default="" name="id" required="false"/>
    <attribute default="" required="false" type="id"/>
    <element type="icon"/>
    <element type="display-name"/>
    <element type="description"/>
    <element type="distributable"/>
    <element type="context-param"/>
    <element type="filter"/>
    <element type="filter-mapping"/>
    <element type="listener"/>
    <element type="servlet"/>
    <element type="servlet-mapping"/>
    <element type="session-config"/>
    <element type="mime-mapping"/>
    <element type="welcome-file-list"/>
    <element type="error-page"/>
    <element type="taglib"/>
    <element type="resource-env-ref"/>
    <element type="resource-ref"/>
    <element type="security-constraint"/>
    <element type="login-config"/>
    <element type="security-role"/>
    <element type="env-entry"/>
    <element type="ejb-ref"/>
    <element type="ejb-local-ref"/>
  </ElementType>
  <ElementType bodyContent="allowed" endTag="required"
    name="auth-constraint" startTag="required">
    <description> The auth-constraint element indicates the user roles
      that should be permitted access to this resource collection. The
      role-name used here must either correspond to the role-name of one
      of the security-role elements defined for this web application, or
      be the specially reserved role-name &quot;*&quot; <!--that is a
      compact syntax for indicating all roles in the web application. If
      both &quot;*&quot; and rolenames appear, the container interprets
      this as all roles. If no roles are defined, no user is allowed
      access to the portion of the web application described by the
      containing security-constraint. The container matches role names
      case sensitively when determining access.   Used in:
      security-constraint --></description>
    <AttributeType default="" name="id" required="false"/>
    <attribute default="" required="false" type="id"/>
    <element type="description"/>
    <element type="role-name"/>
  </ElementType>
  <ElementType bodyContent="allowed" endTag="required"
    name="auth-method" startTag="required">
    <description> The auth-method element is used to configure the
      authentication mechanism for the web application. <!--As a
      prerequisite to gaining access to any web resources which are
      protected by an authorization constraint, a user must have
      authenticated using the configured mechanism. Legal values for
      this element are &quot;BASIC&quot;, &quot;DIGEST&quot;,
      &quot;FORM&quot;, or &quot;CLIENT-CERT&quot;.  Used in:
      login-config --></description>
    <AttributeType default="" name="id" required="false"/>
    <attribute default="" required="false" type="id"/>
  </ElementType>
  <ElementType bodyContent="allowed" endTag="required"
    name="context-param" startTag="required">
    <description> The context-param element contains the declaration of
      a web application&apos;s servlet context initialization
      parameters.  Used in: web-app </description>
    <AttributeType default="" name="id" required="false"/>
    <attribute default="" required="false" type="id"/>
    <element type="param-name"/>
    <element type="param-value"/>
    <element type="description"/>
  </ElementType>
  <ElementType bodyContent="allowed" endTag="required"
    name="description" startTag="required">
    <description> The description element is used to provide text
      describing the parent element.  The description element should
      include any information that the web application war file producer
      wants to provide to the consumer of the web application war file
      (i.e., to the Deployer). <!--Typically, the tools used by the web
      application war file consumer will display the description when
      processing the parent element that contains the description.  Used
      in: auth-constraint, context-param, ejb-local-ref, ejb-ref,
      env-entry, filter, init-param, resource-env-ref, resource-ref,
      run-as, security-role, security-role-ref, servlet,
      user-data-constraint, web-app, web-resource-collection --></description>
    <AttributeType default="" name="id" required="false"/>
    <attribute default="" required="false" type="id"/>
  </ElementType>
  <ElementType bodyContent="allowed" endTag="required"
    name="display-name" startTag="required">
    <description> The display-name element contains a short name that is
      intended to be displayed by tools.  The display name need not be
      unique.  Used in: filter, security-constraint, servlet, web-app
      Example:  &lt;display-name&gt;Employee Self
      Service&lt;/display-name&gt; </description>
    <AttributeType default="" name="id" required="false"/>
    <attribute default="" required="false" type="id"/>
  </ElementType>
  <ElementType bodyContent="allowed" endTag="required"
    name="distributable" startTag="required">
    <description> The distributable element, by its presence in a web
      application deployment descriptor, indicates that this web
      application is programmed appropriately to be deployed into a
      distributed servlet container  Used in: web-app </description>
    <AttributeType default="" name="id" required="false"/>
    <attribute default="" required="false" type="id"/>
  </ElementType>
  <ElementType bodyContent="allowed" endTag="required" name="ejb-link" startTag="required">
    <description> The ejb-link element is used in the ejb-ref or
      ejb-local-ref elements to specify that an EJB reference is linked
      to an enterprise bean.  The name in the ejb-link element is
      composed of a path name specifying the ejb-jar containing the
      referenced enterprise bean with the ejb-name of the target bean
      appended and separated from the path name by &quot;#&quot;. <!-- The
      path name is relative to the war file containing the web
      application that is referencing the enterprise bean. This allows
      multiple enterprise beans with the same ejb-name to be uniquely
      identified.  Used in: ejb-local-ref, ejb-ref  Examples:
      &lt;ejb-link&gt;EmployeeRecord&lt;/ejb-link&gt;
      &lt;ejb-link&gt;../products/product.jar#ProductEJB&lt;/ejb-link&gt;  --></description>
    <AttributeType default="" name="id" required="false"/>
    <attribute default="" required="false" type="id"/>
  </ElementType>
  <ElementType bodyContent="allowed" endTag="required"
    name="ejb-local-ref" startTag="required">
    <description> The ejb-local-ref element is used for the declaration
      of a reference to an enterprise bean&apos;s local home. <!--The
      declaration consists of:   - an optional description  - the EJB
      reference name used in the code of the web application
      that&apos;s referencing the enterprise bean  - the expected type
      of the referenced enterprise bean  - the expected local home and
      local interfaces of the referenced    enterprise bean  - optional
      ejb-link information, used to specify the referenced    enterprise
      bean  Used in: web-app --></description>
    <AttributeType default="" name="id" required="false"/>
    <attribute default="" required="false" type="id"/>
    <element type="description"/>
    <element type="ejb-ref-name"/>
    <element type="ejb-ref-type"/>
    <element type="local-home"/>
    <element type="local"/>
    <element type="ejb-link"/>
  </ElementType>
  <ElementType bodyContent="allowed" endTag="required" name="ejb-ref" startTag="required">
    <description> The ejb-ref element is used for the declaration of a
      reference to an enterprise bean&apos;s home. <!--The declaration
      consists of:   - an optional description  - the EJB reference name
      used in the code of    the web application that&apos;s referencing
      the enterprise bean  - the expected type of the referenced
      enterprise bean  - the expected home and remote interfaces of the
      referenced    enterprise bean  - optional ejb-link information,
      used to specify the referenced    enterprise bean  Used in:
      web-app --></description>
    <AttributeType default="" name="id" required="false"/>
    <attribute default="" required="false" type="id"/>
    <element type="description"/>
    <element type="ejb-ref-name"/>
    <element type="ejb-ref-type"/>
    <element type="home"/>
    <element type="remote"/>
    <element type="ejb-link"/>
  </ElementType>
  <ElementType bodyContent="allowed" endTag="required"
    name="ejb-ref-name" startTag="required">
    <description> The ejb-ref-name element contains the name of an EJB
      reference. The EJB reference is an entry in the web
      application&apos;s environment and is relative to the
      java:comp/env context.  The name must be unique within the web
      application.  <!--It is recommended that name is prefixed with
      &quot;ejb/&quot;.  Used in: ejb-local-ref, ejb-ref  Example:
      &lt;ejb-ref-name&gt;ejb/Payroll&lt;/ejb-ref-name&gt; --></description>
    <AttributeType default="" name="id" required="false"/>
    <attribute default="" required="false" type="id"/>
  </ElementType>
  <ElementType bodyContent="allowed" endTag="required"
    name="ejb-ref-type" startTag="required">
    <description> The ejb-ref-type element contains the expected type of
      the referenced enterprise bean.  The ejb-ref-type element must be
      one of the following:
      &lt;ejb-ref-type&gt;Entity&lt;/ejb-ref-type&gt;
      &lt;ejb-ref-type&gt;Session&lt;/ejb-ref-type&gt;  Used in:
      ejb-local-ref, ejb-ref </description>
    <AttributeType default="" name="id" required="false"/>
    <attribute default="" required="false" type="id"/>
  </ElementType>
  <ElementType bodyContent="allowed" endTag="required" name="env-entry" startTag="required">
    <description> The env-entry element contains the declaration of a
      web application&apos;s environment entry. The declaration consists
      of an optional description, the name of the environment entry, and
      an optional value.  If a value is not specified, one must be
      supplied during deployment. </description>
    <AttributeType default="" name="id" required="false"/>
    <attribute default="" required="false" type="id"/>
    <element type="description"/>
    <element type="env-entry-name"/>
    <element type="env-entry-value"/>
    <element type="env-entry-type"/>
  </ElementType>
  <ElementType bodyContent="allowed" endTag="required"
    name="env-entry-name" startTag="required">
    <description> The env-entry-name element contains the name of a web
      applications&apos;s environment entry.  The name is a JNDI name
      relative to the java:comp/env context.  The name must be unique
      within a web application.  Example:
      &lt;env-entry-name&gt;minAmount&lt;/env-entry-name&gt;  Used in:
      env-entry </description>
    <AttributeType default="" name="id" required="false"/>
    <attribute default="" required="false" type="id"/>
  </ElementType>
  <ElementType bodyContent="allowed" endTag="required"
    name="env-entry-type" startTag="required">
    <description> The env-entry-type element contains the
      fully-qualified Java type of the environment entry value that is
      expected by the web application&apos;s code.  <!--The following are
      the legal values of env-entry-type:   java.lang.Boolean
      java.lang.Byte  java.lang.Character  java.lang.String
      java.lang.Short  java.lang.Integer  java.lang.Long
      java.lang.Float  java.lang.Double  Used in: env-entry --></description>
    <AttributeType default="" name="id" required="false"/>
    <attribute default="" required="false" type="id"/>
  </ElementType>
  <ElementType bodyContent="allowed" endTag="required"
    name="env-entry-value" startTag="required">
    <description> The env-entry-value element contains the value of a
      web application&apos;s environment entry. The value must be a
      String that is valid for the constructor of the specified type
      that takes a single String parameter, or for java.lang.Character,
      a single character.  <!--Example:
      &lt;env-entry-value&gt;100.00&lt;/env-entry-value&gt;  Used in:
      env-entry --></description>
    <AttributeType default="" name="id" required="false"/>
    <attribute default="" required="false" type="id"/>
  </ElementType>
  <ElementType bodyContent="allowed" endTag="required" name="error-code" startTag="required">
    <description> The error-code contains an HTTP error code, ex: 404
      Used in: error-page </description>
    <AttributeType default="" name="id" required="false"/>
    <attribute default="" required="false" type="id"/>
  </ElementType>
  <ElementType bodyContent="allowed" endTag="required" name="error-page" startTag="required">
    <description> The error-page element contains a mapping between an
      error code or exception type to the path of a resource in the web
      application  Used in: web-app </description>
    <AttributeType default="" name="id" required="false"/>
    <attribute default="" required="false" type="id"/>
    <element type="error-code"/>
    <element type="exception-type"/>
    <element type="location"/>
  </ElementType>
  <ElementType bodyContent="allowed" endTag="required"
    name="exception-type" startTag="required">
    <description> The exception type contains a fully qualified class
      name of a Java exception type.  Used in: error-page </description>
    <AttributeType default="" name="id" required="false"/>
    <attribute default="" required="false" type="id"/>
  </ElementType>
  <ElementType bodyContent="allowed" endTag="required" name="extension" startTag="required">
    <description> The extension element contains a string describing an
      extension. example: &quot;txt&quot;  Used in: mime-mapping </description>
    <AttributeType default="" name="id" required="false"/>
    <attribute default="" required="false" type="id"/>
  </ElementType>
  <ElementType bodyContent="allowed" endTag="required" name="filter" startTag="required">
    <description> Declares a filter in the web application. The filter
      is mapped to either a servlet or a URL pattern in the
      filter-mapping element, using the filter-name value to reference.
      Filters can access the initialization parameters declared in the
      deployment descriptor at runtime via the FilterConfig interface.
      Used in: web-app </description>
    <AttributeType default="" name="id" required="false"/>
    <attribute default="" required="false" type="id"/>
    <element type="icon"/>
    <element type="filter-name"/>
    <element type="display-name"/>
    <element type="description"/>
    <element type="filter-class"/>
    <element type="init-param"/>
  </ElementType>
  <ElementType bodyContent="allowed" endTag="required"
    name="filter-class" startTag="required">
    <description> The fully qualified classname of the filter.  Used in:
      filter </description>
    <AttributeType default="" name="id" required="false"/>
    <attribute default="" required="false" type="id"/>
  </ElementType>
  <ElementType bodyContent="allowed" endTag="required"
    name="filter-mapping" startTag="required">
    <description> Declaration of the filter mappings in this web
      application. The container uses the filter-mapping declarations to
      decide which filters to apply to a request, and in what order. The
      container matches the request URI to a Servlet in the normal way.
      <!--To determine which filters to apply it matches filter-mapping
      declarations either on servlet-name, or on url-pattern for each
      filter-mapping element, depending on which style is used. The
      order in which filters are invoked is the order in which
      filter-mapping declarations that match a request URI for a servlet
      appear in the list of filter-mapping elements.The filter-name
      value must be the value of the &lt;filter-name&gt; sub-elements of
      one of the &lt;filter&gt; declarations in the deployment
      descriptor.  Used in: web-app --></description>
    <AttributeType default="" name="id" required="false"/>
    <attribute default="" required="false" type="id"/>
    <element type="filter-name"/>
    <element type="url-pattern"/>
    <element type="servlet-name"/>
  </ElementType>
  <ElementType bodyContent="allowed" endTag="required"
    name="filter-name" startTag="required">
    <description> The logical name of the filter. This name is used to
      map the filter. Each filter name is unique within the web
      application.  Used in: filter, filter-mapping </description>
    <AttributeType default="" name="id" required="false"/>
    <attribute default="" required="false" type="id"/>
  </ElementType>
  <ElementType bodyContent="allowed" endTag="required"
    name="form-error-page" startTag="required">
    <description> The form-error-page element defines the location in
      the web app where the error page that is displayed when login is
      not successful can be found. The path begins with a leading / and
      is interpreted relative to the root of the WAR.  Used in:
      form-login-config </description>
    <AttributeType default="" name="id" required="false"/>
    <attribute default="" required="false" type="id"/>
  </ElementType>
  <ElementType bodyContent="allowed" endTag="required"
    name="form-login-config" startTag="required">
    <description> The form-login-config element specifies the login and
      error pages that should be used in form based login. If form based
      authentication is not used, these elements are ignored.  Used in:
      login-config </description>
    <AttributeType default="" name="id" required="false"/>
    <attribute default="" required="false" type="id"/>
    <element type="form-login-page"/>
    <element type="form-error-page"/>
  </ElementType>
  <ElementType bodyContent="allowed" endTag="required"
    name="form-login-page" startTag="required">
    <description> The form-login-page element defines the location in
      the web app where the page that can be used for login can be
      found. The path begins with a leading / and is interpreted
      relative to the root of the WAR.  Used in: form-login-config </description>
    <AttributeType default="" name="id" required="false"/>
    <attribute default="" required="false" type="id"/>
  </ElementType>
  <ElementType bodyContent="allowed" endTag="required" name="home" startTag="required">
    <description> The home element contains the fully-qualified name of
      the enterprise bean&apos;s home interface.  Used in: ejb-ref
      Example:
      &lt;home&gt;com.aardvark.payroll.PayrollHome&lt;/home&gt; </description>
    <AttributeType default="" name="id" required="false"/>
    <attribute default="" required="false" type="id"/>
  </ElementType>
  <ElementType bodyContent="allowed" endTag="required"
    name="http-method" startTag="required">
    <description> The http-method contains an HTTP method (GET | POST
      |...).  Used in: web-resource-collection </description>
    <AttributeType default="" name="id" required="false"/>
    <attribute default="" required="false" type="id"/>
  </ElementType>
  <ElementType bodyContent="allowed" endTag="required" name="icon" startTag="required">
    <description> The icon element contains small-icon and large-icon
      elements that specify the file names for small and a large GIF or
      JPEG icon images used to represent the parent element in a GUI
      tool.  Used in: filter, servlet, web-app </description>
    <AttributeType default="" name="id" required="false"/>
    <attribute default="" required="false" type="id"/>
    <element type="small-icon"/>
    <element type="large-icon"/>
  </ElementType>
  <ElementType bodyContent="allowed" endTag="required" name="init-param" startTag="required">
    <description> The init-param element contains a name/value pair as
      an initialization param of the servlet  Used in: filter, servlet </description>
    <AttributeType default="" name="id" required="false"/>
    <attribute default="" required="false" type="id"/>
    <element type="param-name"/>
    <element type="param-value"/>
    <element type="description"/>
  </ElementType>
  <ElementType bodyContent="allowed" endTag="required" name="jsp-file" startTag="required">
    <description> The jsp-file element contains the full path to a JSP
      file within the web application beginning with a `/&apos;.  Used
      in: servlet </description>
    <AttributeType default="" name="id" required="false"/>
    <attribute default="" required="false" type="id"/>
  </ElementType>
  <ElementType bodyContent="allowed" endTag="required" name="large-icon" startTag="required">
    <description> The large-icon element contains the name of a file
      containing a large (32 x 32) icon image. The file name is a
      relative path within the web application&apos;s war file.  The
      image may be either in the JPEG or GIF format. The icon can be
      used by tools.  Used in: icon  Example:
      &lt;large-icon&gt;employee-service-icon32x32.jpg&lt;/large-icon&gt; </description>
    <AttributeType default="" name="id" required="false"/>
    <attribute default="" required="false" type="id"/>
  </ElementType>
  <ElementType endTag="required" name="listener" startTag="required">
    <description> The listener element indicates the deployment
      properties for a web application listener bean.  Used in: web-app </description>
    <AttributeType default="" name="id" required="false"/>
    <attribute default="" required="false" type="id"/>
    <element type="listener-class"/>
  </ElementType>
  <ElementType bodyContent="allowed" endTag="required"
    name="listener-class" startTag="required">
    <description> The listener-class element declares a class in the
      application must be registered as a web application listener bean.
      The value is the fully qualified classname of the listener class.
      Used in: listener </description>
    <AttributeType default="" name="id" required="false"/>
    <attribute default="" required="false" type="id"/>
  </ElementType>
  <ElementType bodyContent="allowed" endTag="required"
    name="load-on-startup" startTag="required">
    <description> The load-on-startup element indicates that this
      servlet should be loaded (instantiated and have its init() called)
      on the startup of the web application. The optional contents of
      these element must be an integer indicating the order in which the
      servlet should be loaded. <!--If the value is a negative integer, or
      the element is not present, the container is free to load the
      servlet whenever it chooses. If the value is a positive integer or
      0, the container must load and initialize the servlet as the
      application is deployed. The container must guarantee that
      servlets marked with lower integers are loaded before servlets
      marked with higher integers. The container may choose the order of
      loading of servlets with the same load-on-start-up value.  Used
      in: servlet --></description>
    <AttributeType default="" name="id" required="false"/>
    <attribute default="" required="false" type="id"/>
  </ElementType>
  <ElementType bodyContent="allowed" endTag="required" name="local" startTag="required">
    <description>  The local element contains the fully-qualified name
      of the enterprise bean&apos;s local interface.  Used in:
      ejb-local-ref  </description>
    <AttributeType default="" name="id" required="false"/>
    <attribute default="" required="false" type="id"/>
  </ElementType>
  <ElementType bodyContent="allowed" endTag="required" name="local-home" startTag="required">
    <description>  The local-home element contains the fully-qualified
      name of the enterprise bean&apos;s local home interface.  Used in:
      ejb-local-ref </description>
    <AttributeType default="" name="id" required="false"/>
    <attribute default="" required="false" type="id"/>
  </ElementType>
  <ElementType bodyContent="allowed" endTag="required" name="location" startTag="required">
    <description> The location element contains the location of the
      resource in the web application relative to the root of the web
      application. The value of the location must have a leading
      `/&apos;.  Used in: error-page </description>
    <AttributeType default="" name="id" required="false"/>
    <attribute default="" required="false" type="id"/>
  </ElementType>
  <ElementType bodyContent="allowed" endTag="required"
    name="login-config" startTag="required">
    <description> The login-config element is used to configure the
      authentication method that should be used, the realm name that
      should be used for this application, and the attributes that are
      needed by the form login mechanism.  Used in: web-app </description>
    <AttributeType default="" name="id" required="false"/>
    <attribute default="" required="false" type="id"/>
    <element type="auth-method"/>
    <element type="realm-name"/>
    <element type="form-login-config"/>
  </ElementType>
  <ElementType bodyContent="allowed" endTag="required"
    name="mime-mapping" startTag="required">
    <description> The mime-mapping element defines a mapping between an
      extension and a mime type.  Used in: web-app </description>
    <AttributeType default="" name="id" required="false"/>
    <attribute default="" required="false" type="id"/>
    <element type="extension"/>
    <element type="mime-type"/>
  </ElementType>
  <ElementType bodyContent="allowed" endTag="required" name="mime-type" startTag="required">
    <description> The mime-type element contains a defined mime type.
      example: &quot;text/plain&quot;  Used in: mime-mapping </description>
    <AttributeType default="" name="id" required="false"/>
    <attribute default="" required="false" type="id"/>
  </ElementType>
  <ElementType bodyContent="allowed" endTag="required" name="param-name" startTag="required">
    <description> The param-name element contains the name of a
      parameter. Each parameter name must be unique in the web
      application.   Used in: context-param, init-param </description>
    <AttributeType default="" name="id" required="false"/>
    <attribute default="" required="false" type="id"/>
  </ElementType>
  <ElementType bodyContent="allowed" endTag="required"
    name="param-value" startTag="required">
    <description> The param-value element contains the value of a
      parameter.  Used in: context-param, init-param </description>
    <AttributeType default="" name="id" required="false"/>
    <attribute default="" required="false" type="id"/>
  </ElementType>
  <ElementType bodyContent="allowed" endTag="required" name="realm-name" startTag="required">
    <description> The realm name element specifies the realm name to use
      in HTTP Basic authorization.  Used in: login-config </description>
    <AttributeType default="" name="id" required="false"/>
    <attribute default="" required="false" type="id"/>
  </ElementType>
  <ElementType bodyContent="allowed" endTag="required" name="remote" startTag="required">
    <description> The remote element contains the fully-qualified name
      of the enterprise bean&apos;s remote interface.  Used in: ejb-ref
      Example:
      &lt;remote&gt;com.wombat.empl.EmployeeService&lt;/remote&gt; </description>
    <AttributeType default="" name="id" required="false"/>
    <attribute default="" required="false" type="id"/>
  </ElementType>
  <ElementType bodyContent="allowed" endTag="required" name="res-auth" startTag="required">
    <description> The res-auth element specifies whether the web
      application code signs on programmatically to the resource
      manager, or whether the Container will sign on to the resource
      manager on behalf of the web application. <!--In the latter case, the
      Container uses information that is supplied by the Deployer.  The
      value of this element must be one of the two following:
      &lt;res-auth&gt;Application&lt;/res-auth&gt;
      &lt;res-auth&gt;Container&lt;/res-auth&gt;  Used in: resource-ref --></description>
    <AttributeType default="" name="id" required="false"/>
    <attribute default="" required="false" type="id"/>
  </ElementType>
  <ElementType bodyContent="allowed" endTag="required"
    name="res-ref-name" startTag="required">
    <description> The res-ref-name element specifies the name of a
      resource manager connection factory reference.  The name is a JNDI
      name relative to the java:comp/env context.  The name must be
      unique within a web application.  Used in: resource-ref </description>
    <AttributeType default="" name="id" required="false"/>
    <attribute default="" required="false" type="id"/>
  </ElementType>
  <ElementType bodyContent="allowed" endTag="required"
    name="res-sharing-scope" startTag="required">
    <description> The res-sharing-scope element specifies whether
      connections obtained through the given resource manager connection
      factory reference can be shared. <!--The value of this element, if
      specified, must be one of the two following:
      &lt;res-sharing-scope&gt;Shareable&lt;/res-sharing-scope&gt;
      &lt;res-sharing-scope&gt;Unshareable&lt;/res-sharing-scope&gt;
      The default value is Shareable.  Used in: resource-ref --></description>
    <AttributeType default="" name="id" required="false"/>
    <attribute default="" required="false" type="id"/>
  </ElementType>
  <ElementType bodyContent="allowed" endTag="required" name="res-type" startTag="required">
    <description> The res-type element specifies the type of the data
      source. The type is specified by the fully qualified Java language
      class or interface expected to be implemented by the data source.
      Used in: resource-ref </description>
    <AttributeType default="" name="id" required="false"/>
    <attribute default="" required="false" type="id"/>
  </ElementType>
  <ElementType bodyContent="allowed" endTag="required"
    name="resource-env-ref" startTag="required">
    <description> The resource-env-ref element contains a declaration of
      a web application&apos;s reference to an administered object
      associated with a resource in the web application&apos;s
      environment.  <!--It consists of an optional description, the resource
      environment reference name, and an indication of the resource
      environment reference type expected by the web application code.
      Used in: web-app  Example:  &lt;resource-env-ref&gt;
      &lt;resource-env-ref-name&gt;jms/StockQueue&lt;/resource-env-ref-name&gt;
      &lt;resource-env-ref-type&gt;javax.jms.Queue&lt;/resource-env-ref-type&gt;
      &lt;/resource-env-ref&gt; --></description>
    <AttributeType default="" name="id" required="false"/>
    <attribute default="" required="false" type="id"/>
    <element type="description"/>
    <element type="resource-env-ref-name"/>
    <element type="resource-env-ref-type"/>
  </ElementType>
  <ElementType bodyContent="allowed" endTag="required"
    name="resource-env-ref-name" startTag="required">
    <description> The resource-env-ref-name element specifies the name
      of a resource environment reference; its value is the environment
      entry name used in the web application code.  The name is a JNDI
      name relative to the java:comp/env context and must be unique
      within a web application.  Used in: resource-env-ref </description>
    <AttributeType default="" name="id" required="false"/>
    <attribute default="" required="false" type="id"/>
  </ElementType>
  <ElementType bodyContent="allowed" endTag="required"
    name="resource-env-ref-type" startTag="required">
    <description> The resource-env-ref-type element specifies the type
      of a resource environment reference.  It is the fully qualified
      name of a Java language class or interface.  Used in:
      resource-env-ref </description>
    <AttributeType default="" name="id" required="false"/>
    <attribute default="" required="false" type="id"/>
  </ElementType>
  <ElementType bodyContent="allowed" endTag="required"
    name="resource-ref" startTag="required">
    <description> The resource-ref element contains a declaration of a
      web application&apos;s reference to an external resource. <!--It
      consists of an optional description, the resource manager
      connection factory reference name, the indication of the resource
      manager connection factory type expected by the web application
      code, the type of authentication (Application or Container), and
      an optional specification of the shareability of connections
      obtained from the resource (Shareable or Unshareable).  Used in:
      web-app  Example:      &lt;resource-ref&gt;
      &lt;res-ref-name&gt;jdbc/EmployeeAppDB&lt;/res-ref-name&gt;
      &lt;res-type&gt;javax.sql.DataSource&lt;/res-type&gt;
      &lt;res-auth&gt;Container&lt;/res-auth&gt;
      &lt;res-sharing-scope&gt;Shareable&lt;/res-sharing-scope&gt;
      &lt;/resource-ref&gt; --></description>
    <AttributeType default="" name="id" required="false"/>
    <attribute default="" required="false" type="id"/>
    <element type="description"/>
    <element type="res-ref-name"/>
    <element type="res-type"/>
    <element type="res-auth"/>
    <element type="res-sharing-scope"/>
  </ElementType>
  <ElementType bodyContent="allowed" endTag="required" name="role-link" startTag="required">
    <description> The role-link element is a reference to a defined
      security role. The role-link element must contain the name of one
      of the security roles defined in the security-role elements.  Used
      in: security-role-ref </description>
    <AttributeType default="" name="id" required="false"/>
    <attribute default="" required="false" type="id"/>
  </ElementType>
  <ElementType bodyContent="allowed" endTag="required" name="role-name" startTag="required">
    <description> The role-name element contains the name of a security
      role.  The name must conform to the lexical rules for an NMTOKEN.
      Used in: auth-constraint, run-as, security-role, security-role-ref </description>
    <AttributeType default="" name="id" required="false"/>
    <attribute default="" required="false" type="id"/>
  </ElementType>
  <ElementType bodyContent="allowed" endTag="required" name="run-as" startTag="required">
    <description> The run-as element specifies the run-as identity to be
      used for the execution of the web application. It contains an
      optional description, and the name of a security role.  Used in:
      servlet </description>
    <AttributeType default="" name="id" required="false"/>
    <attribute default="" required="false" type="id"/>
    <element type="description"/>
    <element type="role-name"/>
  </ElementType>
  <ElementType bodyContent="allowed" endTag="required"
    name="security-constraint" startTag="required">
    <description> The security-constraint element is used to associate
      security constraints with one or more web resource collections
      Used in: web-app </description>
    <AttributeType default="" name="id" required="false"/>
    <attribute default="" required="false" type="id"/>
    <element type="display-name"/>
    <element type="web-resource-collection"/>
    <element type="auth-constraint"/>
    <element type="user-data-constraint"/>
  </ElementType>
  <ElementType bodyContent="allowed" endTag="required"
    name="security-role" startTag="required">
    <description> The security-role element contains the definition of a
      security role. The definition consists of an optional description
      of the security role, and the security role name.  <!--Used in:
      web-app  Example:      &lt;security-role&gt;  &lt;description&gt;
      This role includes all employees who are authorized      to access
      the employee service application.  &lt;/description&gt;
      &lt;role-name&gt;employee&lt;/role-name&gt;
      &lt;/security-role&gt; --></description>
    <AttributeType default="" name="id" required="false"/>
    <attribute default="" required="false" type="id"/>
    <element type="description"/>
    <element type="role-name"/>
  </ElementType>
  <ElementType bodyContent="allowed" endTag="required"
    name="security-role-ref" startTag="required">
    <description> The security-role-ref element contains the declaration
      of a security role reference in the web application&apos;s code.
      <!--The declaration consists of an optional description, the security
      role name used in the code, and an optional link to a security
      role. If the security role is not specified, the Deployer must
      choose an appropriate security role.  The value of the role-name
      element must be the String used as the parameter to the
      EJBContext.isCallerInRole(String roleName) method or the
      HttpServletRequest.isUserInRole(String role) method.  Used in:
      servlet  --></description>
    <AttributeType default="" name="id" required="false"/>
    <attribute default="" required="false" type="id"/>
    <element type="description"/>
    <element type="role-name"/>
    <element type="role-link"/>
  </ElementType>
  <ElementType bodyContent="allowed" endTag="required" name="servlet" startTag="required">
    <description> The servlet element contains the declarative data of a
      servlet. If a jsp-file is specified and the load-on-startup
      element is present, then the JSP should be precompiled and loaded.
      Used in: web-app </description>
    <AttributeType default="" name="id" required="false"/>
    <attribute default="" required="false" type="id"/>
    <element type="icon"/>
    <element type="servlet-name"/>
    <element type="display-name"/>
    <element type="description"/>
    <element type="servlet-class"/>
    <element type="jsp-file"/>
    <element type="init-param"/>
    <element type="load-on-startup"/>
    <element type="run-as"/>
    <element type="security-role-ref"/>
  </ElementType>
  <ElementType bodyContent="allowed" endTag="required"
    name="servlet-class" startTag="required">
    <description> The servlet-class element contains the fully qualified
      class name of the servlet.  Used in: servlet </description>
    <AttributeType default="" name="id" required="false"/>
    <attribute default="" required="false" type="id"/>
  </ElementType>
  <ElementType bodyContent="allowed" endTag="required"
    name="servlet-mapping" startTag="required">
    <description> The servlet-mapping element defines a mapping between
      a servlet and a url pattern  Used in: web-app </description>
    <AttributeType default="" name="id" required="false"/>
    <attribute default="" required="false" type="id"/>
    <element type="servlet-name"/>
    <element type="url-pattern"/>
  </ElementType>
  <ElementType bodyContent="allowed" endTag="required"
    name="servlet-name" startTag="required">
    <description> The servlet-name element contains the canonical name
      of the servlet. Each servlet name is unique within the web
      application.  Used in: filter-mapping, servlet, servlet-mapping </description>
    <AttributeType default="" name="id" required="false"/>
    <attribute default="" required="false" type="id"/>
  </ElementType>
  <ElementType endTag="required" name="session-config" startTag="required">
    <description> The session-config element defines the session
      parameters for this web application.  Used in: web-app </description>
    <AttributeType default="" name="id" required="false"/>
    <attribute default="" required="false" type="id"/>
    <element type="session-timeout"/>
  </ElementType>
  <ElementType bodyContent="allowed" endTag="required"
    name="session-timeout" startTag="required">
    <description> The session-timeout element defines the default
      session timeout interval for all sessions created in this web
      application. The specified timeout must be expressed in a whole
      number of minutes. <!--If the timeout is 0 or less, the container
      ensures the default behaviour of sessions is never to time out.
      Used in: session-config --></description>
    <AttributeType default="" name="id" required="false"/>
    <attribute default="" required="false" type="id"/>
  </ElementType>
  <ElementType bodyContent="allowed" endTag="required" name="small-icon" startTag="required">
    <description> The small-icon element contains the name of a file
      containing a small (16 x 16) icon image. The file name is a
      relative path within the web application&apos;s war file.  The
      image may be either in the JPEG or GIF format. The icon can be
      used by tools.  Used in: icon  Example:
      &lt;small-icon&gt;employee-service-icon16x16.jpg&lt;/small-icon&gt; </description>
    <AttributeType default="" name="id" required="false"/>
    <attribute default="" required="false" type="id"/>
  </ElementType>
  <ElementType bodyContent="allowed" endTag="required" name="taglib" startTag="required">
    <description> The taglib element is used to describe a JSP tag
      library.  Used in: web-app </description>
    <AttributeType default="" name="id" required="false"/>
    <attribute default="" required="false" type="id"/>
    <element type="taglib-uri"/>
    <element type="taglib-location"/>
  </ElementType>
  <ElementType bodyContent="allowed" endTag="required"
    name="taglib-location" startTag="required">
    <description> the taglib-location element contains the location (as
      a resource relative to the root of the web application) where to
      find the Tag Libary Description file for the tag library.  Used
      in: taglib </description>
    <AttributeType default="" name="id" required="false"/>
    <attribute default="" required="false" type="id"/>
  </ElementType>
  <ElementType bodyContent="allowed" endTag="required" name="taglib-uri" startTag="required">
    <description> The taglib-uri element describes a URI, relative to
      the location of the web.xml document, identifying a Tag Library
      used in the Web Application.  Used in: taglib </description>
    <AttributeType default="" name="id" required="false"/>
    <attribute default="" required="false" type="id"/>
  </ElementType>
  <ElementType bodyContent="allowed" endTag="required"
    name="transport-guarantee" startTag="required">
    <description> The transport-guarantee element specifies that the
      communication between client and server should be NONE, INTEGRAL,
      or CONFIDENTIAL. <!--NONE means that the application does not require
      any transport guarantees. A value of INTEGRAL means that the
      application requires that the data sent between the client and
      server be sent in such a way that it can&apos;t be changed in
      transit. CONFIDENTIAL means that the application requires that the
      data be transmitted in a fashion that prevents other entities from
      observing the contents of the transmission. In most cases, the
      presence of the INTEGRAL or CONFIDENTIAL flag will indicate that
      the use of SSL is required.  Used in: user-data-constraint --></description>
    <AttributeType default="" name="id" required="false"/>
    <attribute default="" required="false" type="id"/>
  </ElementType>
  <ElementType bodyContent="allowed" endTag="required"
    name="url-pattern" startTag="required">
    <description> The url-pattern element contains the url pattern of
      the mapping. Must follow the rules specified in Section 11.2 of
      the Servlet API Specification.  Used in: filter-mapping,
      servlet-mapping, web-resource-collection </description>
    <AttributeType default="" name="id" required="false"/>
    <attribute default="" required="false" type="id"/>
  </ElementType>
  <ElementType bodyContent="allowed" endTag="required"
    name="user-data-constraint" startTag="required">
    <description> The user-data-constraint element is used to indicate
      how data communicated between the client and container should be
      protected.  Used in: security-constraint </description>
    <AttributeType default="" name="id" required="false"/>
    <attribute default="" required="false" type="id"/>
    <element type="description"/>
    <element type="transport-guarantee"/>
  </ElementType>
  <ElementType bodyContent="allowed" endTag="required"
    name="web-resource-collection" startTag="required">
    <description> The web-resource-collection element is used to
      identify a subset of the resources and HTTP methods on those
      resources within a web application to which a security constraint
      applies. If no HTTP methods are specified, then the security
      constraint applies to all HTTP methods.  Used in:
      security-constraint </description>
    <AttributeType default="" name="id" required="false"/>
    <attribute default="" required="false" type="id"/>
    <element type="web-resource-name"/>
    <element type="description"/>
    <element type="url-pattern"/>
    <element type="http-method"/>
  </ElementType>
  <ElementType bodyContent="allowed" endTag="required"
    name="web-resource-name" startTag="required">
    <description> The web-resource-name contains the name of this web
      resource collection.  Used in: web-resource-collection </description>
    <AttributeType default="" name="id" required="false"/>
    <attribute default="" required="false" type="id"/>
  </ElementType>
  <ElementType bodyContent="allowed" endTag="required"
    name="welcome-file" startTag="required">
    <description> The welcome-file element contains file name to use as
      a default welcome file, such as index.html  Used in:
      welcome-file-list </description>
    <AttributeType default="" name="id" required="false"/>
    <attribute default="" required="false" type="id"/>
  </ElementType>
  <ElementType endTag="required" name="welcome-file-list" startTag="required">
    <description> The welcome-file-list contains an ordered list of
      welcome files elements.  Used in: web-app </description>
    <AttributeType default="" name="id" required="false"/>
    <attribute default="" required="false" type="id"/>
    <element type="welcome-file"/>
  </ElementType>
</Schema>