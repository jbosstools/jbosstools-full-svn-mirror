<?xml version="1.0" encoding="UTF-8"?>
<chapter id="GettingStartedForCreatingAJSFApplication" xreflabel="GettingStartedForCreatingAJSFApplication">
    <?dbhtml filename="GettingStartedForCreatingAJSFApplication.html"?>
    <chapterinfo>
        <keywordset>
            <keyword>Red Hat Developer Studio</keyword>
            <keyword>JSF application</keyword>
            <keyword>Java</keyword>
            </keywordset>
    </chapterinfo>
    
    <title>Getting Started Guide for
Creating a JSF Application</title>
<section id="CreatingAJSFApplication">
<?dbhtml filename="GettingStartedForCreatingAJSFApplication.html"?>
<title>Creating a Simple JSF Application</title>
<para>We are going to show you how to create a simple JSF application using the Red Hat Developer Studio
 plug-in for Eclipse. The completed application will ask a user to enter a name and click
a button. The resulting new page will display the familiar message, &quot;Hello &lt;name&gt;!&quot;
This document will show you how to create such an application from the beginning, along
the way demonstrating some of the powerful features of Red Hat Developer Studio. You will design the
JSF application and then run the application from inside Red Hat Developer Studio.
We&apos;ll assume that you have already launched Eclipse with Red Hat Developer Studio installed and
also that the Red Hat Developer Studio perspective is the current perspective. (If not, make it active by
selecting Window > Open Perspective > Red Hat Developer Studio from the menu bar or by selecting Window/
Open Perspective/Other... from the menu bar and then selecting Red Hat Developer Studio from
the Select Perspective dialog box.)</para>
</section>    
<section id="SettingUpTheProject">
<?dbhtml filename="SettingUpTheProject.html"?>
<title>Setting Up the Project</title>
<para>We are first going to create a new project for the application.</para>
<orderedlist>
<listitem><para>Go to the menu bar and select File > New > Project... .</para></listitem>
<listitem><para>Select Red Hat Developer Studio > JSF > JSF Project in the New Project dialog box.</para></listitem>
<listitem><para>Click Next</para></listitem>
<listitem><para>Enter jsfHello as the project name.</para></listitem>
<listitem><para>Leave everything else as is, and click Finish.</para></listitem>

</orderedlist>
</section>
<section id="TheJSFApplicationConfigurationFile">
<?dbhtml filename="TheJSFApplicationConfigurationFile.html"?>
<title>The JSF Application Configuration File</title>
<para>A jsfHello node should appear in the upper-left Package Explorer view.</para>
    <figure>
        <title>Package Explorer View</title>
        <mediaobject> 
            <imageobject>
                <imagedata fileref="images/pev.png"/>
            </imageobject>
        </mediaobject>
    </figure>
<orderedlist continuation="continues">
<listitem><para>Click the plus sign next to jsfHello to reveal the child nodes.</para></listitem>
<listitem><para>Click the plus sign next to WebContent under jsfHello.</para></listitem>
<listitem><para>Click the plus sign next to WEB-INF under WebContent.</para></listitem>

<listitem><para>Then double-click on the faces-config.xml node to display the JSF application configuration file editor.</para></listitem>
</orderedlist>
<figure>
<title></title>
<mediaobject> 
        <imageobject>
            <imagedata fileref="images/ConfigEditor.png"/>
        </imageobject>
</mediaobject>
</figure>

</section>
<section id="AddingNavigationToTheApplication">
<?dbhtml filename="AddingNavigationToTheApplication.html"?>
<title>Adding Navigation to the Application</title>
<para>In our simple application, the flow is defined as a single navigation rule connecting two
views (presentation files). At this point, we will create the placeholders for the two JSP presentation
files and then the navigation rule to connect them as views. Later, we will complete
the coding for the JSP presentation files. With Red Hat Developer Studio, we can do all of this in the
Diagram mode of the configuration file editor.</para>
<section id="AddingTwoViews(JSPPages)">
<?dbhtml filename="AddingTwoViews(JSPPages).html"?>
<title>Adding Two Views (JSP Pages)</title>
<orderedlist continuation="continues">
<listitem><para>Right-click anywhere on the diagram and select New View... from the pop-up
menu</para></listitem>
<listitem><para>In the dialog box, type pages/inputname as the value for From-view-id</para></listitem>
<listitem><para>Leave everything else as is</para></listitem>
<listitem><para>Click Finish.</para>
<para>If you look in the Package Explorer view you should see a pages folder under WebContent. Opening it 
will reveal the JSP file you just created</para>
</listitem>
<listitem><para>Back on the diagram, right-click anywhere and select New View... from the popup
menu</para></listitem>
<listitem><para>In the dialog box, type pages/greeting as the value for From-view-id</para></listitem>
<listitem><para>Leave everything else as is</para></listitem>
<listitem><para>Click Finish</para></listitem>
</orderedlist>
<section id="CreatingTheTransition(NavigationRule)">
<?dbhtml filename="CreatingTheTransition(NavigationRule).html"?>
<title>Creating the Transition (Navigation Rule)</title>
<orderedlist continuation="continues">
<listitem><para>In the diagram, select the connection icon third from the top along the upper left
side of the diagram</para></listitem>
</orderedlist>
<figure>
    <title>Connection icon</title>
<mediaobject> 
        <imageobject>
            <imagedata fileref="images/arrow.png"/>
        </imageobject>
</mediaobject>
</figure>
<para>to get an arrow cursor with a two-pronged plug at the arrow&apos;s bottom.</para>
<orderedlist continuation="continues">
<listitem><para>Click on the pages/inputname page icon and then click on the pages/greeting page icon</para></listitem>

</orderedlist>
<para>A transition should appear between the two icons.</para>
<figure>
<title>Transition between two icons</title>
<mediaobject> 
        <imageobject>
            <imagedata fileref="images/connection.png"/>
        </imageobject>
</mediaobject>
</figure>
<orderedlist continuation="continues">
<listitem><para>Select File/Save from the menu bar.</para></listitem>
</orderedlist>
</section>
</section>
</section>    
<section id="AddingAManagedBeanToTheApplication">
<?dbhtml filename="AddingAManagedBeanToTheApplication.html"?>
<title>Adding a Managed Bean to the Application</title>
<para>To store data in the application, we will use a managed bean.</para>
<orderedlist continuation="continues">
<listitem><para>Click on the Tree tab at the bottom of the editing window</para></listitem>
<listitem><para>Select the Managed Beans node and then click the Add... button displayed along
the right side of the editor window</para></listitem>
<listitem><para>Type in jsfHello.PersonBean for Class and personBean for Name. Leave
Scope as is and Generate Source Code as is (checked)</para></listitem>
<listitem><para>Click Finish</para></listitem>
<listitem><para>personBean will now be selected and three sections of information, Managed
Bean, Properties, and Advanced, will be displayed about it. Under the Properties
section, click the Add... button</para></listitem>
<listitem><para>For Property-Name type in name. Leave everything else as is. (When Property-
Class is not filled in, String is the assumed type.)</para></listitem>
<listitem><para>Click Finish</para></listitem>
<listitem><para>Select the personBean node in the tree</para></listitem>
</orderedlist>
<para>You should see this now:</para>
<figure>
<title>Tree view in Config Editor</title>
<mediaobject> 
        <imageobject>
            <imagedata fileref="images/ConfigEditor2.png"/>
        </imageobject>
</mediaobject>
</figure>
<orderedlist continuation="continues">
<listitem><para>Select File/Save from the menu bar.</para></listitem>
</orderedlist>
<para>You have now registered the managed bean and created a stub-coded class file for it.</para>
</section>
<section id="EditingTheJSPViewFiles">
<?dbhtml filename="EditingTheJSPViewFiles.html"?>
<title>Editing the JSP View Files</title>

<para>Now we will finish editing the JSP files for our two &quot;views&quot; using Exadel&apos;s JSP Visual Page</para>
<section id="Inputname.jsp">
<title>inputname.jsp</title>
<orderedlist continuation="continues">
<listitem><para>Click on the Diagram tab for the configuration file editor</para></listitem>
<listitem><para>Open the editor for this first JSP file by double-clicking on the /pages/inputname.
jsp icon</para></listitem>
</orderedlist>

<para>The Visual Page Editor will open in a screen split between source code along the top and 
a WYSIWIG view along the bottom:</para>
<figure>
<title></title>
<mediaobject> 
        <imageobject>
            <imagedata fileref="images/visual.png"/>
        </imageobject>
</mediaobject>
</figure>
<para>Some JSF code will already be in the file because we selected a template when creating the page.</para>
<orderedlist continuation="continues">
<listitem><para>Select the Visual tab, so we can work with the editor completely in its WYSIWYG
mode</para></listitem>
<listitem><para>To the right of the editor, in the Red Hat Palette, expand the JSF HTML palette folder
by selecting it</para></listitem>
</orderedlist>
<figure>
<title></title>
<mediaobject> 
        <imageobject>
            <imagedata fileref="images/RHDSpalette.png"/>
        </imageobject>
</mediaobject>
</figure>
<orderedlist continuation="continues">
<listitem><para>Click on form within this folder, drag the cursor over to the editor, 
and drop it inside the red box in the editor</para></listitem>

<listitem><para>Another red box will appear inside the first red box.</para></listitem>

<listitem><para>Right-click on the innermost box and select &lt;h:form&gt; Attributes from the menu</para></listitem>
<listitem><para>In the value field next to id, type greeting and click on the Close button</para></listitem>
<listitem><para>Type Please enter name: inside the boxes</para></listitem>
<listitem><para>Select inputText within the JSF HTML palette folder and drag it into the innermost
box in the editor after &quot;Please enter name:&quot;</para></listitem>
<listitem><para>In the attributes dialog, click in the value field next to the value attribute and click
on the ... button</para></listitem>
<listitem><para>Then, select the Managed Beans/personBean/name node and click on the Ok
button</para></listitem>
<listitem><para>Back in the attributes dialog, select the Advanced tab, type in name as the value
for the id attribute, and then click on the Finish button</para></listitem>'
<listitem><para>Select commandButton within the JSF HTML palette folder and drag it into the
innermost box in the editor after the input box</para></listitem>
<listitem><para>In the attributes dialog, click in the value field next to the action attribute and click
on the ... button</para></listitem>
<listitem><para>Then, select the View Actions/greeting node and click on the Ok button</para></listitem>
<listitem><para>Back in the attributes dialog box, type in Say Hello as the value for the value
attribute (&quot;Say Hello&quot;) and then click on the Finish button</para></listitem>
</orderedlist>
<para>The source coding should be something like this now:</para>
<programlisting role="XML"><![CDATA[<%@ taglib uri="http://java.sun.com/jsf/html" prefix="h" %>
<%@ taglib uri="http://java.sun.com/jsf/core" prefix="f" %>
<html>
<head>
<title></title>
</head>
<body>
<f:view>
<h:form id="greeting">
<para>Please enter a name:</para>
<h:inputText id="name" value="#{personBean.name}"/>
<h:commandButton value=" Say Hello " action="greeting"/>
</h:form>
</f:view>
</body>
</html>
]]></programlisting>
<para>The editor should look like this:</para>
<figure>
<title></title>
<mediaobject> 
        <imageobject>
            <imagedata fileref="images/visual2.png"/>
        </imageobject>
</mediaobject>
</figure>
<orderedlist continuation="continues">
<listitem><para>Save the file by selecting File/Save from the menu bar.</para></listitem>
</orderedlist>
</section>
<section id="Greeting.jsp">
<title>greeting.jsp</title>
<orderedlist continuation="continues">
<listitem><para>Click on the faces-config.xml tab to bring the diagram back</para></listitem>
<listitem><para>Open the editor for the second file by double-clicking on the /pages/greeting.jsp
icon</para></listitem>
<listitem><para>Select the Visual tab, so we can work with the editor completely in its WYSIWYG
mode</para></listitem>
<listitem><para>Type Hello (note space after hello) into the box</para></listitem>
<listitem><para>Select outputText within the JSF HTML palette folder and drag it into the innermost
box in the editor after &quot;Hello&quot;</para></listitem>
<listitem><para>In the attributes dialog, click in value field next to the value attribute and click on
the ... button</para></listitem>
<listitem><para>Then, select the Managed Beans/personBean/name node, click on the Ok button,
and then click on the Finish button</para></listitem>
<listitem><para>Right after the output field, type an exclamation point (!)</para></listitem>
</orderedlist>
<para>The source coding should be something like this now:</para>
<programlisting role="XML"><![CDATA[<%@ taglib uri="http://java.sun.com/jsf/html" prefix="h" %>
<%@ taglib uri="http://java.sun.com/jsf/core" prefix="f" %>
<html>
<head>
<title></title>
</head>
<body>
<f:view>
Hello <h:outputText value="#{personBean.name}"/>!
</f:view>
</body>
</html>
]]></programlisting>
<orderedlist continuation="continues">
<listitem><para>Save the file.</para></listitem></orderedlist>
</section>
</section>
<section id="CreatingTheStartPage">
<?dbhtml filename="CreatingTheStartPage.html"?>
<title>Creating the Start Page</title>
<para>You also need to create a start page as an entry point into the application.</para>
<orderedlist continuation="continues">
<listitem><para>In the Package Explorer view to the left, right-click jsfHello/WebContent and select
New/JSP File</para></listitem>
<listitem><para>For Name type in index, for Template select JSPRedirect and click Finish.</para></listitem>
</orderedlist>
<para>A JSP editor will open up on the newly created file.</para>

<orderedlist continuation="continues">
<listitem><para>In the Source part of the split screen, type /pages/inputname.jsf in between
the quotes for the page attribute</para></listitem>
</orderedlist>
<para>The source coding should look like this now:</para>
<programlisting role="JSP"><![CDATA[<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head></head>
<body>
<jsp:forward page="/pages/inputname.jsf" />
</body>
</html>
]]></programlisting>

<para>Note the .jsf extension for the file name. This is a mapping defined in the web.xml file 
for the project for invoking JavaServer Faces when you run the application.</para>
<orderedlist continuation="continues">
<listitem><para>Select File/Save from the menu bar.</para></listitem>
</orderedlist>
</section>
<section id="RunningTheApplicationJSF">
<?dbhtml filename="RunningTheApplicationJSF.html"?>
<title>Running the Application</title>
<para>Everything is now ready for running our application without having to leave Red Hat Developer Studio 
by using the JBoss engine that comes with the Red Hat Developer Studio plug-in. For controlling
JBoss server within Red Hat Developer Studio, the toolbar contains a special panel</para>
<figure>
<title></title>
<mediaobject> 
        <imageobject>
            <imagedata fileref="images/running.png"/>
        </imageobject>
</mediaobject>
</figure>
<orderedlist continuation="continues">
<listitem><para>Start up Tomcat by clicking on the first icon from left. (If Tomcat is already running,
stop it by clicking on the third icon from the left and then start it again. Remember,
the JSF run-time requires restarting the servlet engine when any changes have been
made.) After the messages in the Console tabbed view stop scrolling, Tomcat is available.</para></listitem>

<listitem><para>Click on the Red Hat run icon in the toolbar:</para></listitem>
</orderedlist>
<figure>
<title></title>
<mediaobject> 
        <imageobject>
            <imagedata fileref="images/run.png"/>
        </imageobject>
</mediaobject>
</figure>
<para>This is the equivalent of launching the browser and typing http://localhost:8080/jsfHello into your
 browser. Our JSF application should now appear.</para>
 </section>
 </chapter>