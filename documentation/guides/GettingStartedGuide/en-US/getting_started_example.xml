<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">

   <chapter>
	   <title>Example of developing a Java EE6, HTML5, Maven application for mobile devices</title>
<section id="_purpose_and_target_audience">
<title>Purpose and Target Audience</title>
<simpara>This tutorial sets the stage for the creation of TicketMonster. This sample application illustrates how to bring together the best features of <emphasis role="strong">Java EE 6, HTML5 and JBoss</emphasis> to create a rich, mobile-optimized and dynamic application
<ulink url="https://github.com/jboss/ticket-monster">https://github.com/jboss/ticket-monster</ulink>.</simpara>
<simpara>Through this tutorial, you will:</simpara>
<itemizedlist>
	<listitem><para>Create a Java EE 6 project via a Maven archetype</para></listitem>
	<listitem><para>Leverage Maven to Eclipse infrastructure (m2e) and m2e-wtp</para></listitem>
	<listitem><para>Create a JPA entity using Forge</para></listitem>
	<listitem><para>Utilize Hibernate Tools</para></listitem>
	<listitem><para>Generate a database schema</para></listitem>
	<listitem><para>Deploy an application to a local JBoss Server</para></listitem>
	<listitem><para>Add a JAX-RS endpoint to an application</para></listitem>
	<listitem><para>Add a jQuery Mobile client</para></listitem>
	<listitem><para>Test the application for mobile compatibility with BrowserSim</para></listitem>
</itemizedlist>
<figure id="jbds5_mobile_browsersim_image"><title>JBoss Developer Studio 5 with Mobile BrowserSim</title>
<mediaobject>
  <imageobject>
	  <imagedata fileref="images/getting_started_example/jbds5_mobile_browsersim.png" width="90%" scalefit="1"/>
  </imageobject>
  <textobject><phrase>images/getting_started_example/jbds5_mobile_browsersim.png</phrase></textobject>
</mediaobject>
</figure>
</section>
<section id="_creating_a_new_java_ee_6_project_with_maven">
<title>Creating a new Java EE 6 project with Maven</title>
<simpara>Switch to the JBoss Perspective and click on the JBoss logo in the toolbar to launch JBoss Central, if it is not already viewable.</simpara>
<simpara>Select <emphasis role="strong">Java EE Web Project</emphasis> from JBoss Central, under Create Projects. This archetype provides a Maven-based project that can be built outside of the IDE, in continuous integration solutions like Hudson and Jenkins.</simpara>
<figure id="jboss-central_image"><title>JBoss Central</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/getting_started_example/jboss_dev_studio_jboss_central.png"/>
  </imageobject>
  <textobject><phrase>images/getting_started_example/jboss_dev_studio_jboss_central.png</phrase></textobject>
</mediaobject>
</figure>
<simpara>Once Java EE Web Project has been selected you will be prompted with a dialog box. If you are in a brand new workspace, the application server will not be configured and the checkbox on the server runtime row will not be checked.</simpara>
<figure id="new-project-wizard_image"><title>New Project Wizard</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/getting_started_example/new_project_wizard.png" width="90%" scalefit="1"/>
  </imageobject>
  <textobject><phrase>images/getting_started_example/new_project_wizard.png</phrase></textobject>
</mediaobject>
</figure>
<simpara>If you have not downloaded an application server, you can download and install a community server by clicking on the <emphasis role="strong">Download and Install</emphasis> button. To add a JBoss server you have downloaded, click on the <emphasis role="strong">Install</emphasis> button.</simpara>
<simpara>Selecting <emphasis role="strong">Install</emphasis> will launch the JBoss Runtime Detection section of Preferences.</simpara>
<figure id="jboss_tools_runtime_detection_image"><title>JBoss Tools Runtime Detection</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/getting_started_example/jboss_tools_runtime_detection.png" width="90%" scalefit="1"/>
  </imageobject>
  <textobject><phrase>images/getting_started_example/jboss_tools_runtime_detection.png</phrase></textobject>
</mediaobject>
</figure>
<simpara>Select the <emphasis role="strong">Add</emphasis> button and select the main directory of your unzipped JBoss server.</simpara>
<figure id="runtime_open_dialog_image"><title>Runtime Open Dialog</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/getting_started_example/runtime_open_dialog.png"/>
  </imageobject>
  <textobject><phrase>images/getting_started_example/runtime_open_dialog.png</phrase></textobject>
</mediaobject>
</figure>
<simpara>Select <emphasis role="strong">Open</emphasis> and runtime detection will begin.</simpara>
<figure id="searching_for_runtimes_dialog_image"><title>Searching for runtimes window</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/getting_started_example/searching_for_runtimes_dialog.png"/>
  </imageobject>
  <textobject><phrase>images/getting_started_example/searching_for_runtimes_dialog.png</phrase></textobject>
</mediaobject>
</figure>
<simpara>Select <emphasis role="strong">OK</emphasis>.</simpara>
<simpara>Once runtime detection is complete, you will see the server added to the Paths list.</simpara>
<figure id="jboss_tools_runtime_detection_after_image"><title>JBoss Tools Runtime Detection Completed</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/getting_started_example/jboss_tools_runtime_detection_after.png" width="90%" scalefit="1"/>
  </imageobject>
  <textobject><phrase>images/getting_started_example/jboss_tools_runtime_detection_after.png</phrase></textobject>
</mediaobject>
</figure>
<simpara>Select <emphasis role="strong">OK</emphasis> to close the Preferences Dialog</simpara>
<simpara>Returning to the New Project Example dialog, it will now have the JBoss application server checkbox selected.</simpara>
<figure id="as_eap_found_image"><title>JBoss application server found</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/getting_started_example/as_eap_found.png" width="90%" scalefit="1"/>
  </imageobject>
  <textobject><phrase>images/getting_started_example/as_eap_found.png</phrase></textobject>
</mediaobject>
</figure>
<simpara>Select <emphasis role="strong">Next</emphasis></simpara>
<figure id="new-project-wizard-step_2_image"><title>New Project Wizard Step 2</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/getting_started_example/new_project_example_step_2.png" width="90%" scalefit="1"/>
  </imageobject>
  <textobject><phrase>images/getting_started_example/new_project_example_step_2.png</phrase></textobject>
</mediaobject>
</figure>
<simpara>The default <emphasis role="strong">Project name</emphasis> is <filename>jboss-javaee6-webapp</filename> and the <emphasis role="strong">Target Runtime</emphasis> will be empty. If you decide to target a specific Enterprise Application Platform, you will first need to configure the enterprise Maven repositories. Targetting a runtime and configuring Maven repositories is beyond the scope of this guide, however the JBoss Web Framework Kit Maven Repository User Guide available through <ulink url="http://docs.redhat.com/docs/en-US/">http://docs.redhat.com/docs/en-US/</ulink> would assist in your Maven repository installation.
</simpara>
<simpara>Select <emphasis role="strong">Finish</emphasis> and the project will be generated, and imported into your workspace.</simpara>
<figure id="prompt_for_readme_image"><title>New Project Wizard Step 3</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/getting_started_example/prompt_for_readme.png" width="90%" scalefit="1"/>
  </imageobject>
  <textobject><phrase>images/getting_started_example/prompt_for_readme.png</phrase></textobject>
</mediaobject>
</figure>
<simpara>Select <emphasis role="strong">Finish</emphasis></simpara>
</section>
<!--<section id="_exploring_the_newly_generated_project">
<title>Exploring the newly generated project</title>
<simpara>The initial project includes the following Java packages:<?asciidoc-br?>
- <emphasis role="strong">controller</emphasis> – contains the backing bean for the JSF page called index.xhtml – specifically supporting the newMember and memberRegistration.register expressions in index.xhtml<?asciidoc-br?>
- <emphasis role="strong">data</emphasis> – contains a class which uses @Produces and @Named to return a list of members for index.xhtml<?asciidoc-br?>
- <emphasis role="strong">model</emphasis> – contains the JPA entity classes – simple annotated POJOs (@Entity) – in the case of Member.java, it demonstrates the use of new EE6, Bean Validation JSR 303<?asciidoc-br?>
- <emphasis role="strong">rest</emphasis> – contains the JAX-RS endpoints, also simple annotated POJOs (@Path)<?asciidoc-br?>
- <emphasis role="strong">service</emphasis> - handles the registration transaction for new members<?asciidoc-br?>
- <emphasis role="strong">util</emphasis> – contains Resources.java which sets up an alias for @PersistenceContext to be injectable via @Inject</simpara>
<figure id="project_explorer_java_packages_image">
	<title>Project Explorer Java Packages</title>
	<mediaobject>
		<imageobject>
			<imagedata fileref="images/getting_started_example/project_explorer_java_packages.png"/>
		</imageobject>
		<textobject>
			<phrase>images/getting_started_example/project_explorer_java_packages.png</phrase>
        </textobject>
</mediaobject>
</figure>
<simpara>Under src you will find<?asciidoc-br?></simpara>
<itemizedlist>
<listitem>
<simpara>
main/resources/<emphasis role="strong">import.sql</emphasis> – contains insert statements that provides initial database data.  This is particularly useful when hibernate.hbm2dll.auto=create-drop as seen in persistence.xml - since the schema is recreated with each deployment<?asciidoc-br?>
</simpara>
</listitem>
<listitem>
<simpara>
main/resources/META-INF/<emphasis role="strong">persistence.xml</emphasis> – this file establishes that this project contains JPA entities and it identifies the datasource as ExampleDS.  It also includes the hibernate.hbm2dll.auto property set to create-drop by default.  ExampleDS is pre-established on both JBoss AS 7 and Enterprise Application Platform 6.  You can visit the application server’s admin console at <ulink url="http://localhost:9990/console/">http://localhost:9990/console/</ulink> and see that ExampleDS is mapped to the embedded H2 database.  This tutorial will cover the deployment of the H2 console for exploring the database via web-based interactive SQL tool<?asciidoc-br?>
</simpara>
</listitem>
<listitem>
<simpara>
test/java/test you will find a "test" package that contains <emphasis role="strong">MemberRegistrationTest.java</emphasis> – this is an Arquillian based test that runs both at the command line (mvn test –Parq-jbossas-remote) as well as from within Eclipse (Run As JUnit Test).<?asciidoc-br?>
</simpara>
</listitem>
<listitem>
<simpara>
src/main/webapp you will find <emphasis role="strong">index.xhtml</emphasis>, this is the primary JSF-based user interface for the sample application.  If you double-click on that file you will see the JBoss Developer Studio/JBoss Tools Visual Page Editor – allowing you to visually navigate through the file and see the source simultaneously.  Changes to the source are immediately reflected in the visual pane.<?asciidoc-br?>
</simpara>
</listitem>
</itemizedlist>
<figure id="project_explorer_resources_image">
	<title>Project Explorer Resources</title>
	<mediaobject>
		<imageobject>
			<imagedata fileref="images/getting_started_example/project_explorer_resources.png"/>
		</imageobject>
		<textobject>
			<phrase>images/getting_started_example/project_explorer_resources.png</phrase>
        </textobject>
</mediaobject>
</figure>
<simpara>In src/main/webapp/WEB-INF, you will find three key files:<?asciidoc-br?>
- <emphasis role="strong">beans.xml</emphasis> is basically empty but it is the marker file that indicates this is a CDI capable EE6 application.<?asciidoc-br?>
- <emphasis role="strong">faces-config.xml</emphasis> is also empty but it is the marker file that indicates this is a JSF capable EE6 application.<?asciidoc-br?>
- <emphasis role="strong">jboss-javaee6-webapp-ds.xml</emphasis> - is actually a hot deployable file that establishes a new datasource within the JBoss container.</simpara>
<figure id="visual_page_editor_image">
	<title>Visual Page Editor</title>
	<mediaobject>
		<imageobject>
			<imagedata fileref="images/getting_started_example/visual_page_editor.png" width="90%" scalefit="1"/>
		</imageobject>
		<textobject>
			<phrase>images/getting_started_example/visual_page_editor.png</phrase>
        </textobject>
</mediaobject>
</figure>
</section>-->
<section id="_adding_a_new_entity_using_forge">
<title>Adding a new entity using Forge</title>
<simpara>Right-click on the model package in the Project Explorer and select <emphasis role="strong">Show In Forge Console</emphasis>.</simpara>
<figure id="show_in_forge_console_image"><title>Show In Forge Console</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/getting_started_example/show_in_forge_console.png" width="90%" scalefit="1"/>
  </imageobject>
  <textobject><phrase>images/getting_started_example/show_in_forge_console.png</phrase></textobject>
</mediaobject>
</figure>
<simpara>You will be prompted with a dialog indicating <guilabel>Forge Not Running</guilabel>; select <emphasis role="strong">Yes</emphasis></simpara>
<figure id="forge_is_not_running_image"><title>Show Forge Not Running</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/getting_started_example/forge_is_not_running.png" width="70%" scalefit="1"/>
  </imageobject>
  <textobject><phrase>images/getting_started_example/forge_is_not_running.png</phrase></textobject>
</mediaobject>
</figure>
<simpara>If you are not prompted you can start Forge using the green arrow in the Forge Console tab.</simpara>
<figure id="forge_console_image"><title>Forge Console</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/getting_started_example/forge_console.png" width="90%" scalefit="1"/>
  </imageobject>
  <textobject><phrase>images/getting_started_example/forge_console.png</phrase></textobject>
</mediaobject>
</figure>
<simpara>Forge allows you to interactively type commands that generate code and update the IDE.  You can complete commands via the <keycap>Tab</keycap> key.</simpara>
<simpara>The overall commands are as follows:</simpara>
<literallayout class="monospaced">entity --named Event --package org.jboss.tools.examples.model</literallayout>
<literallayout class="monospaced">field string --named name</literallayout>
<literallayout class="monospaced">validation setup</literallayout>
<literallayout class="monospaced">constraint NotNull --onProperty name</literallayout>
<literallayout class="monospaced">constraint Size --onProperty name --min 5 --max 50 --message "Must be &gt; 5 and &lt; 50"</literallayout>
<literallayout class="monospaced">field string --named description</literallayout>
<literallayout class="monospaced">constraint Size --onProperty description --min 20 --max 1000 --message "Must be &gt; 20 and &lt; 1000"</literallayout>
<literallayout class="monospaced">field boolean --named major</literallayout>
<literallayout class="monospaced">field string --named picture</literallayout>
<simpara>At the line <emphasis>[jboss-jbossee6-webapp] model $</emphasis> type in <literal>en</literal> and hit the tab key on your keyboard.  <literal>entity</literal> will fill in.   Hit tab again and <literal>entity --named</literal> will appear.  Type in <literal>Event</literal> and add a space, Forge can not anticipate the name of your new entity.  Hit tab again and select <literal>--package</literal>.  Now, hit tab 5 times to fill in <literal>org.jboss.tools.examples</literal>,  and since there are multiple entries underneath examples, Forge will display those options.  Type in <literal>m</literal> and hit tab to select <literal>model</literal>.</simpara>
<simpara> Press the Enter key to watch the command execute.</simpara>
<figure id="forge_event_entity_image"><title>Forge new entity</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/getting_started_example/forge_event_entity.png" width="90%" scalefit="1"/>
  </imageobject>
  <textobject><phrase>images/getting_started_example/forge_event_entity.png</phrase></textobject>
</mediaobject>
</figure>
<simpara>The Event entity will be generated and placed into the <guilabel>model</guilabel> package. The entity will then be opened in the editor.</simpara>
<figure id="forge_event_entity_created_image"><title>Event Entity</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/getting_started_example/forge_event_entity_created.png" width="90%" scalefit="1"/>
  </imageobject>
  <textobject><phrase>images/getting_started_example/forge_event_entity_created.png</phrase></textobject>
</mediaobject>
</figure>
<note><para>The "@Entity public class" line is generated on the same physical line as "import java.lang.Override".</para></note>
<simpara>At the Forge prompt, you will notice that you have been switched into <emphasis>Event.java</emphasis></simpara>
<simpara>Type <literal>ls</literal>, providing a list of the fields and methods.</simpara>
<figure id="forge_ls_results_image"><title>Forge <literal>ls</literal></title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/getting_started_example/forge_ls.png" width="90%" scalefit="1"/>
  </imageobject>
  <textobject><phrase>images/getting_started_example/forge_ls.png</phrase></textobject>
</mediaobject>
</figure>
<simpara>Now that the base Event entity has been created, add the fields and their JSR 303 Bean Validation constraints.</simpara>
<simpara>This next step involves adding a <property>name</property> property for the Event entity.</simpara>
<simpara>Type <literal>fie</literal> and hit tab to fill in <literal>field</literal>, if you hit tab again, Forge will list out the possible field types.   Type in <literal>s</literal> and hit tab, Forge will respond with <literal>string</literal>.  Hit tab again to get <literal>--named</literal> and type in <literal>name</literal>.
The resulting command should be <literal>field string --named name</literal> and then press the Enter key.</simpara> 
<simpara>This will add a private String name member variable and the appropriate get/set methods.  You should also notice that the <methodname>toString</methodname> method is tweaked to include <property>name</property> as well.</simpara>
<figure id="forge_added_name_image"><title>@Column name</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/getting_started_example/forge_added_name.png" width="90%" scalefit="1"/>
  </imageobject>
  <textobject><phrase>images/getting_started_example/forge_added_name.png</phrase></textobject>
</mediaobject>
</figure>
<simpara>The remaining Forge commands are:</simpara>
<literallayout class="monospaced">validation setup</literallayout>
<literallayout class="monospaced">constraint NotNull --onProperty name</literallayout>
<literallayout class="monospaced">constraint Size --onProperty name --min 5 --max 50 --message "Must be &gt; 5 and &lt; 50"</literallayout>
<literallayout class="monospaced">field string --named description</literallayout>
<literallayout class="monospaced">constraint Size --onProperty description --min 20 --max 1000 --message "Must be &gt; 20 and &lt; 1000"</literallayout>
<literallayout class="monospaced">field boolean --named major</literallayout>
<literallayout class="monospaced">field string --named picture</literallayout>
<simpara>Use the <guilabel>Outline</guilabel> view to see the results of Forge on the <emphasis>Event.java</emphasis> JPA entity. The view is on the right-side when using the <guilabel>JBoss Perspective</guilabel>.</simpara>
<figure id="outline_of_event_image"><title>Outline View</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/getting_started_example/outline_of_event.png"/>
  </imageobject>
  <textobject><phrase>images/getting_started_example/outline_of_event.png</phrase></textobject>
</mediaobject>
</figure>
</section>
<section id="_reviewing_persistence_xml_amp_updating_import_sql">
<title>Reviewing persistence.xml and updating import.sql</title>
<simpara>By default, with the way the <emphasis role="strong">jboss-javaee6-webapp</emphasis> project is configured, the entity classes become the database schema. <emphasis role="strong">persistence.xml</emphasis>. Open up the <emphasis role="strong">persistence.xml</emphasis> file and review its settings. It is still under src/main/resources/META-INF.
The two key settings are the &lt;jta-data-source&gt; and hibernate.hbm2ddl.auto.  The datasource setting must map to one already established in the src\main\webapp\jboss-javaee6-webapp–ds.xml descriptor file.
The hibernate.hbm2ddl.auto=create-drop property indicates that missing tables &amp; columns will be created or updated inside the database schema itself.
Open up the <emphasis role="strong">import.sql</emphasis> file, this file contains INSERT statements that will inject sample data into your initial database structure.  Add the following insert statements:</simpara>
<literallayout class="monospaced">insert into Event (id, name, description, major, picture, version) values (1,
'Shane''s Sock Puppets',
'This critically acclaimed masterpiece...',
true,
'http://dl.dropbox.com/u/65660684/640px-Carnival_Puppets.jpg',
1);</literallayout>
<literallayout class="monospaced">insert into Event (id, name, description, major, picture, version) values (2,
'Rock concert of the decade',
'Get ready to rock...',
true,
'http://dl.dropbox.com/u/65660684/640px-Weir%2C_Bob_(2007)_2.jpg',
1);</literallayout>
</section>
<section id="_optional_adding_a_new_entity_as_a_pojo">
<title>Optional: Adding a new entity as a POJO</title>
<simpara>Right-click on the <guilabel>model</guilabel> package and select <menuchoice><guimenuitem>New</guimenuitem><guimenuitem>Class</guimenuitem></menuchoice>.  Enter the class name as <property>Venue</property>.</simpara>
<simpara>Add the private variables representing the columns in the Venue table.</simpara>
<programlisting>package org.jboss.tools.examples.model;

public class Venue {
        private Long id;
        private String name;
        private String description;
        private int capacity;
}</programlisting>
<simpara>Right-click on the editor, and from the context menu, select <menuchoice>
<guimenuitem>Source</guimenuitem>
    <guimenuitem>Generate Getters and Setters</guimenuitem>
</menuchoice>.</simpara>
<figure id="generate_getters_setters_menu_image"><title>Generate Getters and Setters Menu</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/getting_started_example/generate_getters_setters.png" width="90%" scalefit="1"/>
  </imageobject>
  <textobject><phrase>images/getting_started_example/generate_getters_setters.png</phrase></textobject>
</mediaobject>
</figure>
<simpara>This will create getX and setX methods for all private variables, making them accessible by the entity class.</simpara>
<figure id="generate_getters_setters_dialog_image"><title>Generate Getters and Setters Dialog</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/getting_started_example/getter_setter_dialog.png" width="80%" scalefit="1"/>
  </imageobject>
  <textobject><phrase>images/getting_started_example/getter_setter_dialog.png</phrase></textobject>
</mediaobject>
</figure>
<simpara><emphasis role="strong">Select All</emphasis> and <emphasis role="strong">OK</emphasis></simpara>
<figure id="venue_after_getters_setters_image"><title>Venue.java with gets/sets</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/getting_started_example/venue_after_getters_setters.png" width="90%" scalefit="1"/>
  </imageobject>
  <textobject><phrase>images/getting_started_example/venue_after_getters_setters.png</phrase></textobject>
</mediaobject>
</figure>
<simpara>Right-click on the editor and from the context menu select <menuchoice><guimenuitem>Source</guimenuitem><guimenuitem>Generate Hibernate/JPA Annotations</guimenuitem></menuchoice>.</simpara>
<simpara>If you have not yet saved Venue.java, you will prompted to do so.</simpara>
<figure id="save_modified_resources_image"><title>Save Modified Resources</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/getting_started_example/save_modified_resources.png" width="80%" scalefit="1"/>
  </imageobject>
  <textobject><phrase>images/getting_started_example/save_modified_resources.png</phrase></textobject>
</mediaobject>
</figure>
<simpara>The <guilabel>Hibernate: add JPA annotations</guilabel> wizard will launch.
Ensure that Venue is the class you are working on.</simpara>
<figure id="hibernate_add_jpa_image"><title>Hibernate: add JPA annotations</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/getting_started_example/hibernate_add_jpa_annotations.png" width="80%" scalefit="1"/>
  </imageobject>
  <textobject><phrase>images/getting_started_example/hibernate_add_jpa_annotations.png</phrase></textobject>
</mediaobject>
</figure>
<simpara>Select <guibutton>Next</guibutton>. The next step in the wizard will provide a sampling of the refactored sources. The changes being made to your Venue class will be detailed.</simpara>
<figure id="hibernate_add_jpa_annotations_step2_image"><title>Hibernate: add JPA annotations Step 2</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/getting_started_example/hibernate_add_jpa_annotations_step2.png" width="80%" scalefit="1"/>
  </imageobject>
  <textobject><phrase>images/getting_started_example/hibernate_add_jpa_annotations_step2.png</phrase></textobject>
</mediaobject>
</figure>
<simpara>Click <guibutton>Finish</guibutton></simpara>
<simpara>You can now enter the Bean Validation annotations ( for example, <property>@NotNull</property>) for each variable.</simpara>
</section>
<section id="_deployment">
<title>Deployment</title>
<simpara>Ensure that you have installed the <filename>h2console.war</filename> file into the deployments directory. The WAR file can be copied from the quickstarts directory. You can find the enterprise quickstarts in the Customer Portal, or the unsupported community quickstarts can be downloaded from <ulink url="http://www.jboss.org/jbossas/downloads/">http://www.jboss.org/jbossas/downloads/</ulink>.</simpara>
<figure id="quickstarts_directory_layout_image">
	<title>Quickstarts Directory Layout</title>
	<mediaobject>
		<imageobject>
			<imagedata fileref="images/getting_started_example/quickstarts_directory_layout.png" width="80%" scalefit="1"/>
		</imageobject>
		<textobject>
			<phrase>images/getting_started_example/quickstarts_directory_layout.png</phrase>
		</textobject>
	</mediaobject>
</figure>
<simpara>Drag and drop the <filename>h2console.war</filename> file into deployments. Notice the <filename>.deployed</filename> files, if an error occurs you should see a <filename>.failed</filename> file instead.</simpara>
<figure id="h2console_deployments_image">
	<title>h2console.war in deployments</title>
	<mediaobject>
		<imageobject>
			<imagedata fileref="images/getting_started_example/h2console_deployments.png" width="80%" scalefit="1"/>
  </imageobject>
  <textobject><phrase>images/getting_started_example/h2console_deployments.png</phrase></textobject>
</mediaobject>
</figure>
<simpara>To deploy the project, right click on the project name in the <guilabel>Project Explorer</guilabel> and from the context menu select <menuchoice><guimenuitem>Run As</guimenuitem><guimenuitem>Run on Server</guimenuitem></menuchoice>.  If needed, this will start the application server instance, compile, build and push the application into the <filename>JBoss/standalone/deployments</filename> directory.</simpara>
<figure id="run_as_run_on_server_image"><title>Run As &#8594; Run on Server</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/getting_started_example/run_as_run_on_server.png" width="90%" scalefit="1"/>
  </imageobject>
  <textobject><phrase>images/getting_started_example/run_as_run_on_server.png</phrase></textobject>
</mediaobject>
</figure>
<simpara> By deploying the project in this way, the internal web browser will also be launched with the appropriate URL for the application.</simpara>
<figure id="result_run_on_server_image"><title>Web browser interaction</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/getting_started_example/result_run_on_server.png" width="80%" scalefit="1"/>
  </imageobject>
  <textobject><phrase>images/getting_started_example/result_run_on_server.png</phrase></textobject>
</mediaobject>
</figure>
<simpara>With a web browser, navigate to <ulink url="http://localhost:8080/h2console">http://localhost:8080/h2console</ulink></simpara>
<figure id="h2console_in_browser_image"><title>h2console in browser</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/getting_started_example/h2console_in_browser.png" width="80%" scalefit="1"/>
  </imageobject>
  <textobject><phrase>images/getting_started_example/h2console_in_browser.png</phrase></textobject>
</mediaobject>
</figure>
<simpara>Enter <filename>jdbc:h2:mem:jboss-javaee6-webapp</filename> in as the JDBC URL.  This file is found in <filename>src\main\webapp\WEB-INF\</filename></simpara>
<simpara>Set the password to <emphasis>sa</emphasis> and click <guibutton>Connect</guibutton>.</simpara>
<simpara>Your Event has now been dynamically added into the H2 schema.</simpara>
<simpara>To verify that your new EE 6 JPA entity called Event has been added to the system, deployed successfully and created the supporting RDBMS schema, use the SQL statement: <code>select * from event</code> and press the <guibutton>Run</guibutton> button. The data you previously entered in the <filename>import.sql</filename> file will be displayed.</simpara>
<figure><title>h2console Select * from Event</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/getting_started_example/h2console_select_from_event.png" width="90%" scalefit="1"/>
  </imageobject>
  <textobject><phrase>[h2console_select_from_event.png]</phrase></textobject>
</mediaobject>
</figure>
</section>
<section id="_adding_a_jax_rs_restful_web_service">
<title>Adding a JAX-RS RESTful web service</title>
<simpara>You will now create a POJO with the JAX-RS annotations that will become an endpoint, providing access to the Event data.</simpara>
<simpara>Right-click on the <guilabel>rest</guilabel> package, and from the context menu select <menuchoice><guimenuitem>New</guimenuitem><guimenuitem>Class</guimenuitem></menuchoice>. Input <emphasis>EventService</emphasis> as the class name.</simpara>
<figure id="new_class_eventservice_image"><title>New Class EventService</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/getting_started_example/new_class_eventservice.png" width="80%" scalefit="1"/>
  </imageobject>
  <textobject><phrase>images/getting_started_example/new_class_eventservice.png</phrase></textobject>
</mediaobject>
</figure>
<simpara>Click <guibutton>Finish</guibutton>.</simpara>
<simpara>The new <filename>EventService.java</filename> file will now be opened in the Java editor.</simpara>
<simpara>Copy the following code into the <filename>EventService.java</filename> file:</simpara>
<programlisting>package org.jboss.tools.examples.rest;

@Path("/events")
@RequestScoped
public class EventService {
        @Inject
        private EntityManager em;

        @GET
        @Produces(MediaType.APPLICATION_JSON)
        public List&lt;Event&gt; getAllEvents() {
                final List&lt;Event&gt; results =
                        em.createQuery(
                        "select e from Event e order by e.name").getResultList();
                return results;
        }
}</programlisting>
<simpara>This code returns all Events for the JAX-RS endpoint.</simpara>
<figure id="event_service_copy_paste_image"><title>EventService after Copy and Paste</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/getting_started_example/event_service_copy_paste.png" width="80%" scalefit="1"/>
  </imageobject>
  <textobject><phrase>images/getting_started_example/event_service_copy_paste.png</phrase></textobject>
</mediaobject>
</figure>
<simpara>Still in the Java editor, right-click and from the context menu select <menuchoice><guimenuitem>Source</guimenuitem><guimenuitem>Organize Imports</guimenuitem></menuchoice>.</simpara>
<figure id="source_organize_imports_image"><title>Source &#8594; Organize &#8594; Imports</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/getting_started_example/source_organize_imports.png" width="80%" scalefit="1"/>
  </imageobject>
  <textobject><phrase>images/getting_started_example/source_organize_imports.png</phrase></textobject>
</mediaobject>
</figure>
<simpara>Some of the class names are not unique. You will be prompted with any decisions for an intended class. Select the following:</simpara>
<itemizedlist>
		<listitem>
			<para>
				javax.ws.rs.core.MediaType		
			</para>
		</listitem>
		<listitem>
			<para>
				org.jboss.tools.examples.Event
			</para>
		</listitem>
		<listitem>
			<para>
				javax.ws.rs.Produces
			</para>
		</listitem>
		<listitem>
			<para>
				java.util.List
			</para>
		</listitem>
		<listitem>
			<para>
				java.inject.Inject
			</para>
		</listitem>
		<listitem>
			<para>
				java.enterprise.context.RequestScoped
			</para>
		</listitem>
</itemizedlist>
<simpara>The following screenshots illustrate how you handle these decisions. The description of each screenshot indicates the name of the class you should select.</simpara>
<figure id="organize_imports_1_image"><title>javax.ws.rs.core.MediaType</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/getting_started_example/organize_imports_1.png" width="70%" scalefit="1"/>
  </imageobject>
  <textobject><phrase>images/getting_started_example/organize_imports_1.png</phrase></textobject>
</mediaobject>
</figure>
<figure id="organize_imports_2_image"><title>org.jboss.tools.examples.Event</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/getting_started_example/organize_imports_2.png" width="70%" scalefit="1"/>
  </imageobject>
  <textobject><phrase>images/getting_started_example/organize_imports_2.png</phrase></textobject>
</mediaobject>
</figure>
<figure id="organize_imports_3_image"><title>javax.ws.rs.Produces</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/getting_started_example/organize_imports_3.png" width="70%" scalefit="1"/>
  </imageobject>
  <textobject><phrase>images/getting_started_example/organize_imports_3.png</phrase></textobject>
</mediaobject>
</figure>
<figure id="organize_imports_4_image"><title>java.util.List</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/getting_started_example/organize_imports_4.png" width="70%" scalefit="1"/>
  </imageobject>
  <textobject><phrase>images/getting_started_example/organize_imports_4.png</phrase></textobject>
</mediaobject>
</figure>
<figure id="organize_imports_5_image"><title>javax.inject.Inject</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/getting_started_example/organize_imports_5.png" width="70%" scalefit="1"/>
  </imageobject>
  <textobject><phrase>images/getting_started_example/organize_imports_5.png</phrase></textobject>
</mediaobject>
</figure>
<figure id="organize_imports_6_image"><title>javax.enterprise.context.RequestScoped</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/getting_started_example/organize_imports_6.png" width="70%" scalefit="1"/>
  </imageobject>
  <textobject><phrase>images/getting_started_example/organize_imports_6.png</phrase></textobject>
</mediaobject>
</figure>
<simpara>You should now see the following code contained within your <filename>EventService.java</filename> file:</simpara>
<programlisting>import java.util.List;

import javax.enterprise.context.RequestScoped;
import javax.inject.Inject;
import javax.persistence.EntityManager;
import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;

import org.jboss.tools.examples.model.Event;</programlisting>
<simpara>Save the changes you have made to the <filename>EventService.java</filename> and you will see it listed under the <guilabel>JAX-RS REST Web Services</guilabel> section of the project, in the <guilabel>Project Explorer</guilabel>.</simpara>
<figure id="project_explorer_jax_rs_services_image"><title>Project Explorer JAX-RS Services</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/getting_started_example/project_explorer_jax_rs_services.png" width="80%" scalefit="1"/>
  </imageobject>
  <textobject><phrase>images/getting_started_example/project_explorer_jax_rs_services.png</phrase></textobject>
</mediaobject>
</figure>
<simpara>You have successfully configured your JAX-RS endpoint.</simpara>
<simpara>You can deploy your <filename>jboss-javaee6-webapp</filename> project to your local application server via <menuchoice><guimenuitem>Run As</guimenuitem><guimenuitem>Run on Server</guimenuitem></menuchoice> or right-click on the project in the <guilabel>Servers</guilabel> tab and select <guimenuitem>Full Publish</guimenuitem>.</simpara>
<figure id="full_publish_image"><title>Full Publish</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/getting_started_example/full_publish.png" width="80%" scalefit="1"/>
  </imageobject>
  <textobject><phrase>images/getting_started_example/full_publish.png</phrase></textobject>
</mediaobject>
</figure>
<simpara>Using a web browser navigate to the following URL:<ulink url="http://localhost:8080/jboss-javaee6-webapp/rest/events">http://localhost:8080/jboss-javaee6-webapp/rest/events</ulink>. You will see the results of the query, formatted as JavaScript Object Notation (JSON) returned into the browser.</simpara>
<figure id="json_event_results_image"><title>JSON Response</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/getting_started_example/json_event_results.png" width="90%" scalefit="1"/>
  </imageobject>
  <textobject><phrase>images/getting_started_example/json_event_results.png</phrase></textobject>
</mediaobject>
</figure>
<note><simpara>The <filename>rest</filename> prefix is setup in a file called <filename>JaxRsActivator.java</filename> and it contains a small bit of code that configures the application for JAX-RS endpoints.</simpara></note>
</section>
<section id="_adding_a_jquery_mobile_client_application">
<title>Adding a jQuery Mobile client application</title>

<simpara>You will now add a HTML5, jQuery based client application, optimized for a mobile web experience.</simpara>

<simpara>In the Project Explorer, navigate to <filename>src/main/webapp</filename>, right-click on <filename>webapp</filename> to bring up the context menu and select <menuchoice><guimenuitem>New</guimenuitem><guimenuitem>HTML File</guimenuitem></menuchoice>.</simpara>
<figure id="new_html_file_image"><title>New HTML File</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/getting_started_example/new_html_file.png" width="70%" scalefit="1"/>
  </imageobject>
  <textobject><phrase>images/getting_started_example/new_html_file.png</phrase></textobject>
</mediaobject>
</figure>
<simpara>The <guilabel>New HTML File Wizard</guilabel> will launch. Enter the file name as <filename>mobile.html</filename>.</simpara>
<figure id="new_html_file_correct_location_image"><title>New HTML File src/main/webapp</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/getting_started_example/new_html_file_correct_location.png" width="70%" scalefit="1"/>
  </imageobject>
  <textobject><phrase>images/getting_started_example/new_html_file_correct_location.png</phrase></textobject>
</mediaobject>
</figure>
<simpara>Click <guibutton>Next</guibutton></simpara>
<simpara>On the <guilabel>Select HTML Template</guilabel> page, select <guimenuitem>HTML5 jQuery Mobile Page</guimenuitem>.</simpara>
<figure id="select_html_template"><title>Select HTML5 jQuery Mobile Template</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/getting_started_example/select_html_template.png" width="70%" scalefit="1"/>
  </imageobject>
  <textobject><phrase>images/getting_started_example/select_html_template.png</phrase></textobject>
</mediaobject>
</figure>
<simpara>Click <guibutton>Finish</guibutton></simpara>
<simpara>Using a web browser navigate to <ulink url="http://localhost:8080/jboss-javaee6-webapp/mobile.html">http://localhost:8080/jboss-javaee6-webapp/mobile.html</ulink>.</simpara>
<note><para>HTML files are deployed automatically, however if you find it missing, use <guimenuitem>>Full Publish</guimenuitem> or <menuchoice><guimenuitem>Run As</guimenuitem><guimenuitem>Run on Server</guimenuitem></menuchoice>, as demonstrated in previous steps.</para></note>
<simpara>You will see a dialog box stating <emphasis>Ready to Go</emphasis>.</simpara>
<figure id="jquery_mobile_template_image"><title>jQuery Mobile Template</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/getting_started_example/jquery_mobile_template.png" width="70%" scalefit="1"/>
  </imageobject>
  <textobject><phrase>images/getting_started_example/jquery_mobile_template.png</phrase></textobject>
</mediaobject>
</figure>
<simpara>To connect your front-end to your back-end, edit the <property>pageinit</property> JavaScript event and include an invocation of the previously created JAX-RS service, <classname>Events</classname>.</simpara>
<simpara>Insert the following block of code directly below the <code>alert()</code></simpara>
<screen>         $.getJSON("rest/events", function(events) {
        // console.log("returned are " + results);
        var listOfEvents = $("#listOfItems");
        listOfEvents.empty();
        $.each(events, function(index, event) {
                // console.log(event.name);
                listOfEvents.append("&lt;li&gt;&lt;a href='#'&gt;" + event.name + "&lt;/a&gt;");
        });
        listOfEvents.listview("refresh");
        });</screen>
<simpara>Notes to assist understanding the above JavaScript code:</simpara>
<itemizedlist>
	<listitem>
		<para>
			Uses <code>$.getJSON("rest/events")</code> to interact with <filename>EventService.java</filename>
		</para>
	</listitem>
	<listitem>
		<para>
			<code>// console.log</code> has been commented out as it causes problems in Internet Explorer.
		</para>
	</listitem>
	<listitem>
		<para>
			References <classname>listOfItems</classname>, declared in the HTML using an <property>id</property> attribute
		</para>
	</listitem>
	<listitem>
		<para>
			<code>.empty</code> is executed on the list, removing the items: One, Two and Three
		</para>
	</listitem>
	<listitem>
		<para>
			A <classname>Found</classname> event is appended to the unordered list (UL) in the HTML
		</para>
	</listitem>
	<listitem>
		<para>
			<classname>listOfItems</classname> is refreshed
		</para>
	</listitem>
</itemizedlist>

<simpara>Refresh your browser to see the results.</simpara>
<figure id="jquery_mobile_results_image"><title>jQuery Mobile REST Results</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/getting_started_example/jquery_mobile_results.png" width="70%" scalefit="1"/>
  </imageobject>
  <textobject><phrase>images/getting_started_example/jquery_mobile_results.png</phrase></textobject>
</mediaobject>
</figure>
<simpara>From within the <guilabel>JBoss Perspective</guilabel>, click on the icon representing a mobile phone to launch <guilabel>BrowserSim</guilabel>.</simpara>
<figure id="mobile_browsersim_in_toolbar_image"><title>Mobile BrowserSim icon</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/getting_started_example/mobile_browsersim_in_toolbar.png" width="80%" scalefit="1"/>
  </imageobject>
  <textobject><phrase>images/getting_started_example/mobile_browsersim_in_toolbar.png</phrase></textobject>
</mediaobject>
</figure>
<simpara>BrowserSim allows you to see how your project will be viewed on a range of mobile devices.</simpara>
<figure id="mobile_browsersim_image"><title>Mobile BrowserSim</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/getting_started_example/mobile_browsersim.png" width="30%" scalefit="1"/>
  </imageobject>
  <textobject><phrase>images/getting_started_example/mobile_browsersim.png</phrase></textobject>
</mediaobject>
</figure>
<simpara><guilabel>BrowserSim</guilabel> has a <guilabel>Devices</guilabel> menu. From this menu you can change the device type, orientation and browser dimensions.</simpara>
<figure id="mobile_browsersim_devices_menu_image"><title>Mobile BrowserSim Devices Menu</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/getting_started_example/mobile_browsersim_devices_menu.png" width="30%" scalefit="1"/>
  </imageobject>
  <textobject><phrase>images/getting_started_example/mobile_browsersim_devices_menu.png</phrase></textobject>
</mediaobject>
</figure>
<figure id="mobile_browsersim_windows_menu_image"><title>Mobile BrowserSim on Windows 7</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/getting_started_example/mobile_browsersim_windows_menu.png" width="30%" scalefit="1"/>
  </imageobject>
  <textobject><phrase>images/getting_started_example/mobile_browsersim_windows_menu.png</phrase></textobject>
</mediaobject>
</figure>
<simpara>You can also add your own custom device and browser types.</simpara>
<figure id="mobile_browsersim_custom_devices_image"><title>Mobile BrowserSim Custom Devices Window</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/getting_started_example/mobile_browsersim_custom_devices.png" width="65%" scalefit="1"/>
  </imageobject>
  <textobject><phrase>images/getting_started_example/mobile_browsersim_custom_devices.png</phrase></textobject>
</mediaobject>
</figure>
<simpara>You can browse any website using <guilabel>BrowserSim</guilabel>, providing you have an Internet connection. By doing so you can view the source code of other mobile sites by navigating to <menuchoice><guimenuitem>File</guimenuitem><guimenuitem>View Page Source</guimenuitem></menuchoice>.</simpara>
<figure id="mobile_browsersim_bofa_source_image"><title>Mobile BrowserSim View Source</title>
<mediaobject>
  <imageobject>
  <imagedata fileref="images/getting_started_example/mobile_browsersim_bofa_source.png" width="80%" scalefit="1"/>
  </imageobject>
  <textobject><phrase>images/getting_started_example/mobile_browsersim_bofa_source.png</phrase></textobject>
</mediaobject>
</figure>
</section>
</chapter>
