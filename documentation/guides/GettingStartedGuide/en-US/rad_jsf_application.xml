<?xml version="1.0" encoding="UTF-8"?>
<chapter id="rad_jsf_application">
	<?dbhtml filename="rad_jsf_application.html"?>
	<chapterinfo>
		<keywordset>
			<keyword>JBoss Developer Studio</keyword>
			<keyword>JSF</keyword>
			<keyword>JBoss</keyword>
			<keyword>RAD</keyword>
		</keywordset>
	</chapterinfo>
	<title>RAD development of a simple JSF application</title>

	<note>
		<title>Note:</title>
		<para>We highly recommend developing in <property>Seam</property>. This chapter is for users
            who for some reason cannot use <property>Seam</property>.</para>
	</note>

	<para>In this chapter you will learn how to create a simple JSF application being based on the
            <property>&quot;RAD&quot;</property> philosophy. We will create the familiar
        Guess Number application. The game is played according to the following rules. You are asked to guess a number
        between 0 and 100. If the guess is correct, a success page is displayed with a link to play
        again. If the guess is incorrect, a message is printed notifying that a smaller or a larger
        number should be entered and the game continues.</para>
	<para>We&apos;ll show you how to create such an application from scratch, along the way
        demonstrating the powerful features included in JBoss Developer Studio such as project templating, Visual
        Page Editor, code completion and others. You will design the JSF application and then run
        the application from inside JBoss Developer Studio using the bundled JBoss server.</para>

	<section id="SettingUpTheProject12">
		<?dbhtml filename="SettingUpTheProject12.html"?>
		<title>Setting up the project</title>
		<para>First, you should create a JSF 1.2 project using an integrated JBDS&apos;s new
            project wizard and predefined templates. Follow the next steps:</para>
		<itemizedlist>
			<listitem>
				<para>In the Web Projects view (if it is not open select <menuchoice><guimenuitem>Window</guimenuitem><guimenuitem>Show View</guimenuitem><guimenuitem>Others</guimenuitem><guimenuitem>JBoss Tools Web</guimenuitem><guimenuitem>Web Projects</guimenuitem></menuchoice>) click <guibutton>Create New JSF Project</guibutton> button. <figure>
                        <title>Create New JSF Project</title>
						<mediaobject>
							<imageobject>
								<imagedata fileref="images/rad_jsf_application/rad_jsf_application_1.png"/>
							</imageobject>
						</mediaobject>
					</figure>
				</para>
			</listitem>

			<listitem>
				<para>Enter <property>GuessNumber</property> as a project name, in JSF Environment
                    drop down list choose <property>JSF 1.2</property>
				</para>
			</listitem>
			<listitem>
				<para>Leave everything else as it is and click the <guibutton>Finish</guibutton> button
				</para>
			</listitem>
		</itemizedlist>
		<para>Our project will appear in the Project Explorer and Web Projects views. As you can see
            JBoss Developer Studio has created the entire skeleton for the project with all
            required libraries, <filename>faces-config.xml</filename> file and <filename>web.xml</filename> file.</para>
		<figure>
			<title>New JSF Project</title>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/rad_jsf_application/rad_jsf_application_2.png"/>
				</imageobject>
			</mediaobject>
		</figure>

		<para>As the project has been set up, new JSP pages should now be created.</para>
	</section>
	<section id="CreatingJSPPages">
		<?dbhtml filename="CreatingJSPPages.html"?>
		<title>Creating JSP Pages</title>

		<para>Here, we are going to add two pages to our application. The first page is called
            <filename>inputnumber.jsp</filename>. It prompts you to enter a number. If the guess is incorrect, the same
            page will be redisplayed with a message indicating whether a smaller or a larger number
            should be tried. The second page is called <filename>success.jsp</filename>. This page will be shown after you guess
            the number correctly. From this page you also have the option to play the game again.</para>

		<para>Now, we will guide you through the steps on how to do this.</para>
		<itemizedlist>
			<listitem>
				<para>First a folder called <filename>pages</filename> needs to be created under the <filename>WebContent</filename> folder. To do this right click on the <filename>WebContent</filename> folder in the Package Explorer view and select <menuchoice><guimenuitem>New</guimenuitem><guimenuitem>Folder</guimenuitem></menuchoice>. Set the <guilabel>Folder Name</guilabel> to <filename>pages</filename> and click the <guibutton>Finish</guibutton> button.</para>
				<para>
					<figure>
						<title>Create pages folder</title>
						<mediaobject>
							<imageobject>
								<imagedata fileref="images/rad_jsf_application/rad_jsf_application_2a.png"/>
							</imageobject>
						</mediaobject>
					</figure>
				</para>
			</listitem>
			
			<listitem>
				<para>Open the <filename>faces-config.xml</filename> file.</para>
			</listitem>
			<listitem>
				<para>Right click anywhere on the diagram mode</para>
			</listitem>
			<listitem>
				<para>From the context menu select <guimenuitem>New View</guimenuitem>
				</para>
			</listitem>
		</itemizedlist>
		<figure>
			<title>Create New View</title>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/rad_jsf_application/rad_jsf_application_3.png"/>
				</imageobject>
			</mediaobject>
		</figure>
		<itemizedlist>

			<listitem>
				<para>Type <emphasis><property>pages/inputnumber</property></emphasis> as the value for <emphasis> the <property>From View ID</property> field
					</emphasis>
				</para>
			</listitem>
			<listitem>
				<para>Leave everything else as is and click the <guibutton>Finish</guibutton> button</para>
			</listitem>
			<listitem>
				<para>In the same way create another JSF view. Type <emphasis><property>pages/success</property></emphasis> as the value for <emphasis><property>From View ID</property></emphasis>
				</para>
			</listitem>
			<listitem>
				<para>Select <menuchoice><guimenuitem>File</guimenuitem><guimenuitem>Save</guimenuitem></menuchoice>
				</para>
			</listitem>
		</itemizedlist>
		<para>On the diagram you will see two created views.</para>
		<figure>
			<title>New Views</title>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/rad_jsf_application/rad_jsf_application_4.png"/>
				</imageobject>
			</mediaobject>
		</figure>
	</section>

	<section id="CreatingTransition">
		<?dbhtml filename="CreatingTransition.html"?>
		<title>Creating Transition between two views</title>
		<para>Then, we should create connection between JSP pages.</para>
		<itemizedlist>
			<listitem>
				<para>In the diagram, select the <guibutton>Create New Connection</guibutton> icon third from the top along the upper left side of the diagram to get an arrow cursor with a two-pronged plug at the arrow&apos;s bottom 
					<figure>
          	<title>Create Connection</title>
						<mediaobject>
							<imageobject>
								<imagedata fileref="images/rad_jsf_application/rad_jsf_application_5.png"/>
							</imageobject>
						</mediaobject>
					</figure>
				</para>
			</listitem>
			<listitem>
				<para>Click on the <emphasis><property>pages/inputnumber</property></emphasis> page icon and then click on the <emphasis><property>pages/success</property></emphasis> page icon</para>
			</listitem>
		</itemizedlist>
		<para>A transition should appear between the two icons of views.</para>
		<figure>
			<title>Created Connection</title>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/rad_jsf_application/rad_jsf_application_6.png"/>
				</imageobject>
			</mediaobject>
		</figure>
		<itemizedlist>
			<listitem>
				<para>Select <menuchoice><guimenuitem>File</guimenuitem><guimenuitem>Save</guimenuitem></menuchoice> from the menu bar</para>
			</listitem>
		</itemizedlist>
	</section>

	<section id="CreatingResourceFile">
		<?dbhtml filename="CreatingResourceFile.html"?>
		<title>Creating Resource File</title>
		<para>A resource file is just a file with a <emphasis>.properties</emphasis> extension for
            collecting text messages in one central place. JBoss Developer Studio allows you to
            create quickly a resource file. The messages stored in resource file can be displayed to
            you on a Web page during application execution. </para>
		<para>
			With resource file you don&apos;t hard code anything into the JSP pages. It also makes it easier to translate your application to other languages. All you have to do is to translate all your messages to the other language and save them in a new properties file with a name that ends with the appropriate ISO-639 language code.
		</para>
		<para>It is a good idea to keep your resources inside the <filename>JavaSource</filename> folder, where you keep your .java files. Every time you build the project, all <emphasis>.properties</emphasis> files will then be copied to the <filename>classes</filename> folder by default.</para>
		<itemizedlist>
			<listitem>
				<para>Right click the <filename>JavaSource</filename> folder and select <menuchoice><guimenuitem>New</guimenuitem><guimenuitem>Folder</guimenuitem></menuchoice>
				</para>
			</listitem>
			<listitem>
				<para>Enter <filename>game</filename> as the Folder name and click the <guibutton>Finish</guibutton> button
				</para>
			</listitem>
		</itemizedlist>
		<para>Your resource file and java bean will be stored in this folder.</para>
		<itemizedlist>
			<listitem>
				<para>Right click on the <filename>game</filename> folder and select <menuchoice><guimenuitem>New</guimenuitem><guimenuitem>Properties File</guimenuitem></menuchoice>
				</para>
			</listitem>
			<listitem>
				<para>
					Type <emphasis><property>messages</property></emphasis> as the value for &quot;name&quot; attribute and click the <guibutton>Finish</guibutton> button
				</para>
			</listitem>
		</itemizedlist>
		<para>JBoss Developer Studio will automatically open
            <property>messages.properties</property> file for editing.</para>
		<figure>
			<title>Messages.properties File</title>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/rad_jsf_application/rad_jsf_application_7.png"/>
				</imageobject>
			</mediaobject>
		</figure>
		<itemizedlist>
			<listitem>
				<para>Click the <guibutton>Add</guibutton> button for adding new attribute to your resource file</para>
			</listitem>
			<listitem>
				<para>Enter <emphasis role="italic"><property>how_to_play</property></emphasis> for the &quot;name&quot; and <emphasis role="italic"><property>Please pick a number between 0 and 100.</property></emphasis> for the value</para>
			</listitem>
			<listitem>
				<para>Click the <guibutton>Finish</guibutton> button
				</para>
			</listitem>
			<listitem>
				<para>Add the following properties using the same process:</para>
			</listitem>
		</itemizedlist>
		<programlisting role="JAVA"><![CDATA[makeguess_button=Make Guess
trayagain_button=Play Again?
success_text=How cool.. You have guessed the number, {0} is correct! 
tryagain_smaller=Oops..incorrect guess. Please try a smaller number.
tryagain_bigger=Oops..incorrect guess. Please try a bigger number.
]]></programlisting>
		<itemizedlist>
			<listitem>
				<para>Select <menuchoice><guimenuitem>File</guimenuitem><guimenuitem>Save</guimenuitem></menuchoice> from the menu bar</para>
			</listitem>
		</itemizedlist>
		<para>Your .properties file should now look like follows:</para>
		<figure>
			<title>Properties are Added</title>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/rad_jsf_application/rad_jsf_application_8.png"/>
				</imageobject>
			</mediaobject>
		</figure>
		<para>
				The <guibutton>Up</guibutton> and <guibutton>Down</guibutton> buttons allow you to move the attributes in the list. To delete the attribute, select it and press the <guibutton>Delete</guibutton> button.</para>
		<para>If you want to change a value or a name of your attribute, select it and then click the <guibutton>Edit</guibutton> button.</para>

		<para>If the .properties file is rather big and there are a lot of entries in it, you can use filtering and regular expressions narrow down the list. The Filter and Regular Expressions Search is implemented by an expandable panel, closed by default: </para>
		<para>When "Expression" is not selected (as by default), filter is case insensitive. When "Expression" is selected, filter uses regular expressions which are case sensitive</para>
		<figure>
			<title>Filter and Regular Expressions Search Panel</title>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/rad_jsf_application/rad_jsf_application_8a.png"/>
				</imageobject>
			</mediaobject>
		</figure>
		<para> Enter the characters that should be searched for in the entries to the  'name' or 'value' input fields accordingly. The filtered results will be displayed in the table below:</para>

		<figure>
			<title>Filter results</title>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/rad_jsf_application/rad_jsf_application_8b.png"/>
				</imageobject>
			</mediaobject>
		</figure>

		<para>When using regular expressions please note, that regular expression syntax does not use "*" for any characters and "?" for any one character. It's necessary to use "." for any one character and ".*" for any characters. Symbols "*" and "?" are used to show that the preceding token is not required, for example, "a.a" matches "aba" but not "aa", while "a.?a" or a.*a" matches both; besides "a.*a" matches "abcda".</para>
		<para>To find the exact match, use sequences \A and \z in expression. For example, expression "\Adate\z" matches only string "date"; expression "\Adate" matches "date" and "dateline", expression "date\z" matches "date" and "Begin date", and expression "date" matches all of them.</para>

	</section>

	<section id="CreatingJavaBean">
		<?dbhtml filename="CreatingJavaBean.html"?>
		<title>Creating Java Bean</title>
		<para>In this section you&apos;ll learn how to create a Java bean that will hold business logic of our application.</para>
		<itemizedlist>
			<listitem>
				<para>Right click the <filename>game</filename> folder
				</para>
			</listitem>
			<listitem>
				<para>Select <menuchoice><guimenuitem>New</guimenuitem><guimenuitem>Class</guimenuitem></menuchoice></para>
			</listitem>
			<listitem>
				<para>Type <emphasis><property>NumberBean</property></emphasis> for bean name</para>
			</listitem>
		</itemizedlist>
		<para>A java bean is created.</para>
		<itemizedlist>
			<listitem>
				<para>Declare the variable of your entered number:</para>
			</listitem>
		</itemizedlist>
		<programlisting role="JAVA"><![CDATA[Integer userNumber;
]]></programlisting>
		<para>JBDS allows to quickly generate getters and setters for java bean.</para>
		<itemizedlist>
			<listitem>
				<para>Right click the <filename>NumberBean.java</filename> file </emphasis> in the Package Explorer view</para>
			</listitem>
			<listitem>
				<para>Select <menuchoice><guimenuitem>Source</guimenuitem><guimenuitem>Generate Getters and Setters...</guimenuitem></menuchoice>
				</para>
			</listitem>
			<listitem>
				<para>Check <emphasis><property>userNumber</property></emphasis> box and click the <guibutton>OK</guibutton> button
					<figure>
						<title>Generate Getters and Setters</title>
						<mediaobject>
							<imageobject>
								<imagedata fileref="images/rad_jsf_application/rad_jsf_application_9.png"/>
							</imageobject>
						</mediaobject>
					</figure>
				</para>
			</listitem>
			<listitem>
				<para>Add the declaration of the second variable</para>
			</listitem>
		</itemizedlist>
		<programlisting role="JAVA"><![CDATA[int randomNumber;
]]></programlisting>
		<itemizedlist>
			<listitem>
				<para>.. other bean methods:</para>
			</listitem>
		</itemizedlist>
		<programlisting role="JAVA"><![CDATA[public NumberBean () 
{
    randomNumber = (int)(Math.random()*100);
    System.out.println ( "Random number: "+randomNumber);
  }
  public String playagain () 
  {
    FacesContext context = FacesContext.getCurrentInstance();
    HttpSession session = 
        (HttpSession) context.getExternalContext().getSession(false);
    session.invalidate();
    return "playagain"; 
  }
  public String checkGuess () 
  {
     
    // if guessed, return 'success' for navigation
    if ( userNumber.intValue() == randomNumber ) 
    {
      return "success";
    }
else 
   {
      FacesContext context = FacesContext.getCurrentInstance();
      ResourceBundle bundle = ResourceBundle.getBundle("game.messages", 
      context.getViewRoot().getLocale());
      String msg = "";
      // if number bigger, get appropriate message
      if ( userNumber.intValue() > randomNumber ) 
         msg = bundle.getString("tryagain_smaller");
      else // if number smaller, get appropriate message
         msg = bundle.getString("tryagain_bigger");      
      // add message to be displayed on the page via <h:messages> tag
      context.addMessage (null, new FacesMessage(msg)); 
      // return 'tryagain' for navigation
      return "tryagain";
    }
  }
]]></programlisting>
		<itemizedlist>
			<listitem>
				<para>And the import declarations:</para>
			</listitem>
		</itemizedlist>
		<programlisting role="JAVA"><![CDATA[import javax.faces.context.FacesContext;
import javax.servlet.http.HttpSession;
import javax.faces.application.FacesMessage;
import java.util.ResourceBundle;
]]></programlisting>
		<para>The whole java bean contain the following code:</para>
		<programlisting role="JAVA"><![CDATA[package game;

import javax.faces.context.FacesContext;
import javax.servlet.http.HttpSession;
import javax.faces.application.FacesMessage;
import java.util.ResourceBundle;

public class NumberBean 
{
  Integer userNumber; 
  int randomNumber; // random number generated by application
  
  public Integer getUserNumber () 
  {
    return userNumber;
  }
  public void setUserNumber (Integer value)
  {
     this.userNumber = value;
  }
  
  // constructor, generates random number
  public NumberBean () 
  {
    randomNumber = (int)(Math.random()*100);
    System.out.println ( 
   "Random number: " + randomNumber);
  }
  
  public String playagain () 
  {
    FacesContext context = FacesContext.getCurrentInstance();
    HttpSession session = 
        (HttpSession) context.getExternalContext().getSession(false);
    session.invalidate();
    return "playagain"; 
  }
  
  // check if user guessed the number
  public String checkGuess () 
  {
    // if guessed, return 'success' for navigation
    if ( userNumber.intValue() == randomNumber )
    {
      return "success";
    }
    // incorrect guess
    else 
   {
      // get a reference to properties file to retrieve messages
      FacesContext context = FacesContext.getCurrentInstance();
      ResourceBundle bundle = 
          ResourceBundle.getBundle("game.messages", 
          context.getViewRoot().getLocale());
      String msg = "";
      // if number is bigger, get appropriate message
      if ( userNumber.intValue() > randomNumber ) 
         msg = bundle.getString("tryagain_smaller");
      else // if number smaller, get appropriate message
         msg = bundle.getString("tryagain_bigger");
      
      // add message to be displayed on the page via <h:messages> tag
      context.addMessage (null, new FacesMessage(msg)); 
      // return 'tryagain' for navigation
      return "tryagain";
    }
  }
}

]]></programlisting>
	</section>

	<section id="EditingFacesConfig">
		<?dbhtml filename="EditingFacesConfig.html"?>
		<title>Editing faces-config.xml File</title>
		<para>In this section you will learn about the <filename>faces-config.xml</filename> file.</para>
		<para>This file holds two navigation rules and defines the backing bean used.</para>
		<itemizedlist>
			<listitem>
				<para>Open the <filename>faces-config.xml</filename> file in a source mode</para>
			</listitem>
			<listitem>
				<para>Here we will add one more navigation rule and a managed bean declaration, so that the content of the file looks like this:</para>
			</listitem>
		</itemizedlist>
		<programlisting role="XML"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<faces-config 
	version="1.2" 
	xmlns="http://java.sun.com/xml/ns/javaee"
	xmlns:xi="http://www.w3.org/2001/XInclude"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee 
    http://java.sun.com/xml/ns/javaee/web-facesconfig_1_2_.xsd">
  
  <navigation-rule>
    <from-view-id>*</from-view-id>
    <navigation-case>
      <from-outcome>playagain</from-outcome> 
      <to-view-id>/pages/inputnumber.jsp</to-view-id>
    </navigation-case>
  </navigation-rule>

  <navigation-rule>
    <from-view-id>/pages/inputnumber.jsp</from-view-id>
    <navigation-case>
      <from-outcome>success</from-outcome> 
      <to-view-id>/pages/success.jsp</to-view-id>
    </navigation-case>
  </navigation-rule>
  
  <managed-bean>
    <managed-bean-name>NumberBean</managed-bean-name>
    <managed-bean-class>game.NumberBean</managed-bean-class>
    <managed-bean-scope>session</managed-bean-scope>
  </managed-bean>
                 
</faces-config>
]]></programlisting>
		<para>The first navigation rule states that from any page (<property>*</property> stands for any page) an outcome of playagain will take you to the <filename>/pages/inputnumber.jsp</filename> file. Outcome values are returned from backing bean methods in this example. The second navigation rule states that if you are at the page <filename>/pages/inputnumber.jsp</filename>, and the outcome is success, then navigate to the <filename>/pages/success.jsp</filename> page. </para>
	</section>
	<section id="EditingTheJSPViewFiles2">
		<?dbhtml filename="EditingTheJSPViewFiles2.html"?>
		<title>Editing the JSP View Files</title>
		<para>Now, we will continue editing the JSP files for our two &quot;views&quot; using the Visual Page Editor.</para>
		<section id="EditingInputjsp">
			<?dbhtml filename="EditingInputjsp.html"?>
			<title>Editing inputnumber.jsp page</title>
			<para>First, edit the <filename>inputnumber.jsp</filename> file.</para>
			<para>On this page we will have an output text component displaying a message, a text field for user&apos;s number entering and a button for input submission.</para>
			<itemizedlist>
				<listitem>
					<para>Open the <filename>inputnumber.jsp</filename> file by double-clicking on the <filename>/pages/inputnumber. jsp</filename> icon</para>
				</listitem>
			</itemizedlist>
			<para>The Visual Page Editor will open in a screen split between source code along the top and a WYSIWIG view along the bottom. You can see that some JSF code will have already been generated since we chose a template when creating the page.</para>
			<para>At the beginning it's necessary to create a <code>&lt;h:form&gt;</code> component that will hold the other components.</para>
			<itemizedlist>
				<listitem>
					<para>Place the mouse cursor inside the <code>&lt;f:view&gt;&lt;/f:view&gt;</code> tag
					</para>
				</listitem>
				<listitem>
					<para>Go to JBoss Tools Palette and expand JSF HTML folder by selecting it</para>
				</listitem>
				<listitem>
					<para>Click on the <code>&lt;h:form&gt;</code> tag 
						<figure>
              <title>Insert h:form</title>
							<mediaobject>
								<imageobject>
									<imagedata fileref="images/rad_jsf_application/rad_jsf_application_10.png" />
								</imageobject>
							</mediaobject>
						</figure>
					</para>
				</listitem>
				<listitem>
					<para>In the Insert Tag dialog select the <emphasis><property>id</property></emphasis> field and click on the second column. A blinking cursor will appear in a input text field inviting to enter a value of id 
					<figure>
          	<title>Define Id of Form</title>
							<mediaobject>
								<imageobject>
									<imagedata fileref="images/rad_jsf_application/rad_jsf_application_11.png" />
								</imageobject>
							</mediaobject>
						</figure>
					</para>
				</listitem>
				<listitem>
					<para>Enter <emphasis><property>inputNumbers</property></emphasis> and click the <guibutton>Finish</guibutton> button
					</para>
				</listitem>
			</itemizedlist>
			<para>In source view you can see the declaration of a form.</para>
			<figure>
				<title>Created Form</title>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/rad_jsf_application/rad_jsf_application_12.png"/>
					</imageobject>
				</mediaobject>
			</figure>
			<para>First let&apos;s declare the properties file in the <filename>inputnumber.jsp</filename> page using the loadBundle JSF tag.</para>
			<itemizedlist>
				<listitem>
					<para>Add this declaration on the top of a page, right after the first two lines:</para>
				</listitem>
			</itemizedlist>
			<programlisting role="XML"><![CDATA[<f:loadBundle basename="game.messages" var="msg"/>
]]></programlisting>
			<para>As always JBDS provides code assist:</para>
			<figure>
				<title>Code Assist</title>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/rad_jsf_application/rad_jsf_application_13.png"/>
					</imageobject>
				</mediaobject>
			</figure>
			<itemizedlist>
				<listitem>
					<para>Switch to Visual tab, where it is possible to work with the editor through a WYSIWYG interface</para>
				</listitem>
				<listitem>
					<para>Click the <emphasis><property>outputText</property></emphasis> item from the <guilabel>JSF HTML</guilabel> group in the <guilabel>JBoss Tools Palette</guilabel> view, drag the cursor over to the editor, and drop it inside the blue box in the editor</para>
				</listitem>

				<listitem>
					<para>Select the second column in the <property>value</property> row.</para>
				</listitem>
				<listitem>
					<para>Click the <guibutton>...</guibutton> button next to the value field</para>
				</listitem>
			</itemizedlist>
			<para>JBDS will display a list of possible values:</para>
			<figure>
				<title>Choose Value</title>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/rad_jsf_application/rad_jsf_application_14.png"/>
					</imageobject>
				</mediaobject>
			</figure>
			<itemizedlist>
				<listitem>
					<para>Expand <menuchoice><guimenuitem>Resource Bundles</guimenuitem><guimenuitem>msg</guimenuitem></menuchoice> 
					</para>
				</listitem>
				<listitem>
					<para>Select the <emphasis><property>how_to_play</property></emphasis> value and click the <guibutton>OK</guibutton> button. Then click the <guibutton>Finish</guibutton> button.
						<figure>
							<title>Selecting Value</title>
							<mediaobject>
								<imageobject>
									<imagedata fileref="images/rad_jsf_application/rad_jsf_application_15.png" />
								</imageobject>
							</mediaobject>
						</figure>
					</para>
				</listitem>
			</itemizedlist>
			<para>The text will appear on the page:</para>
			<figure>
				<title>Created OutputText Component</title>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/rad_jsf_application/rad_jsf_application_16.png"/>
					</imageobject>
				</mediaobject>
			</figure>
			<itemizedlist>
				<listitem>
					<para>Switch to Source mode and insert a <code>&lt;br/&gt;</code> tag after the <code>&lt;h:outputText&gt;</code> component to make a new line.</para>
				</listitem>
				<listitem>
					<para>Click the <guibutton>Save</guibutton> button.</para>
				</listitem>
				<listitem>
					<para>On the Palette click on <emphasis><property>inputText</property>, </emphasis> drag the cursor over to the editor, and drop it inside the editor after the text.</para>
				</listitem>
				<listitem>
					<para>Switch to a Source mode and insert a <code>&lt;br/&gt;</code> tag after the <code>&lt;h:outputText&gt;</code> component to make a new line</para>
				</listitem>
				<listitem>
					<para>Click the <guibutton>Save</guibutton> button</para>
				</listitem>
				<listitem>
					<para>On the Palette click on <emphasis><property>inputText</property>, </emphasis> drag the cursor over to the editor, and drop it inside the editor after the text</para>
				</listitem>
				<listitem>
					<para>Select the <emphasis><property>value</property></emphasis> row and click in the second column</para>
				</listitem>
				<listitem>
					<para>Click the <guibutton>...</guibutton> button next to the value field</para>
				</listitem>
				<listitem>
					<para>Expand <menuchoice><guimenuitem>Managed Beans</guimenuitem><guimenuitem>NumberBean</guimenuitem></menuchoice> 				
					</para>
				</listitem>
				<listitem>
					<para>Select <emphasis><property>userNumber</property></emphasis> value and click the <guibutton>OK</guibutton> button
					</para>
				</listitem>
				<listitem>
					<para>Select the <emphasis><property>Advanced</property></emphasis> tab</para>
				</listitem>
				<listitem>
					<para>Select the <emphasis><property>id</property></emphasis> row and click in the second column</para>
				</listitem>
				<listitem>
					<para>Type <emphasis><property>userNumber</property></emphasis> in the text field</para>
				</listitem>
				<listitem>
					<para>Select the <emphasis><property>required</property></emphasis> row and click in the second column</para>
				</listitem>
				<listitem>
					<para>Click <guibutton>...</guibutton> button next to the value field</para>
				</listitem>
				<listitem>
					<para>Expand <emphasis><property>Enumeration</property></emphasis> and select <emphasis><property>true</property></emphasis> as a value</para>
				</listitem>
			</itemizedlist>
			<figure>
				<title>Add &quot;required&quot; Attribute</title>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/rad_jsf_application/rad_jsf_application_17.png"/>
					</imageobject>
				</mediaobject>
			</figure>
			<itemizedlist>
				<listitem>
					<para>Click the <guibutton>OK</guibutton> button, then click the <guibutton>Finish</guibutton> button

					</para>
				</listitem>
				<listitem>
					<para>Go to Source mode</para>
				</listitem>
				<listitem>
					<para>Add the validation attribute to <code>&lt;f:validateLongRange&gt;</code> for user input validation</para>
				</listitem>
			</itemizedlist>
			<programlisting role="XML"><![CDATA[<h:inputText id="userNumber" value="#{NumberBean.userNumber}" required="true">
           <f:validateLongRange minimum="0" maximum="100"/>
</h:inputText>
]]></programlisting>
			<itemizedlist>
				<listitem>
					<para>Click the <guibutton>Save</guibutton> button</para>
				</listitem>
				<listitem>
					<para>Again select <emphasis><property>Visual</property></emphasis> mode</para>
				</listitem>
				<listitem>
					<para>On the Palette, click on <emphasis><property>commandButton</property>, </emphasis> drag the cursor over tothe editor, and drop it inside the editor after the <code>inputText</code> component.</para>
				</listitem>
				<listitem>
					<para>In the editing dialog select the <emphasis><property>value</property></emphasis> row and click on the second column</para>
				</listitem>
				<listitem>
					<para>Click the <guibutton>...</guibutton> button next to the value field</para>
				</listitem>
				<listitem>
					<para>Expand <menuchoice><guimenuitem>Resource Bundles</guimenuitem><guimenuitem>msg</guimenuitem></menuchoice> and select <emphasis><property>makeguess_button</property></emphasis> as a value</para>
				</listitem>
				<listitem>
					<para>Click the <guibutton>OK</guibutton> button
					</para>
				</listitem>
				<listitem>
					<para>Select the <emphasis><property>action</property></emphasis> row and click in the second column</para>
				</listitem>
				<listitem>
					<para>Type <emphasis><property>#{NumberBean.checkGuess}</property></emphasis> in the text field</para>
				</listitem>
				<listitem>
					<para>Click the <guibutton>Finish</guibutton> button
					</para>
				</listitem>
				<listitem>
					<para>In Source mode add <code>&lt;br/&gt;</code> tags between the <code>&lt;outputText&gt;</code>, <code>&lt;inputText&gt;</code> and <code>&lt;commandButton&gt;</code> components to place them on different lines</para>
				</listitem>
			</itemizedlist>
			<para><filename>inputnumber.jsp</filename> page should look like this:</para>
			<programlisting role="XML"><![CDATA[<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<%@ taglib prefix="f"  uri="http://java.sun.com/jsf/core"%>
<%@ taglib prefix="h"  uri="http://java.sun.com/jsf/html"%>
<f:loadBundle basename="game.messages" var="msg"/>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
		<title>Insert title here</title>
	</head>
	<body>
		<f:view>
			<h:form id="inputNumbers">
				<h:outputText value="#{msg.how_to_play}"/>
				<br/>
				<h:messages style="color: blue" />
				<br/>
				<h:inputText id="userNumber" required="true" value="#{NumberBean.userNumber}">
					<f:validateLongRange minimum="0" maximum="100" />
				</h:inputText>
				<br/>
				<br/>
				<h:commandButton action="#{NumberBean.checkGuess}" value="#{msg.makeguess_button}"/>			
			</h:form>
	</f:view>
	</body>
</html>
]]></programlisting>
		</section>
		<section id="EditingSuccessJsp">
			<?dbhtml filename="EditingSuccessJsp.html"?>
			<title>Editing success.jsp page</title>
			<para>We now edit the <filename>success.jsp</filename> page in the same way as we just edited the <filename>inputnumber.jsp</filename> file. The code for the <filename>success.jsp</filename> page should look like the following:</para>
			<programlisting role="XML"><![CDATA[<%@ taglib uri="http://java.sun.com/jsf/html" prefix="h" %>
<%@ taglib uri="http://java.sun.com/jsf/core" prefix="f" %>
<f:loadBundle basename="game.messages" var="msg"/>

<html>
	<head>
		<title></title>
	</head>
	<body>
		<f:view>
			<h:form id="result">
				<h:outputFormat value="#{msg.success_text}">
				<f:param value="#{NumberBean.userNumber}" />
				</h:outputFormat>
				<br />
				<br />
				<h:commandButton value="#{msg.trayagain_button}"
					action="#{NumberBean.playagain}" />
			</h:form>
		</f:view>
	</body>
</html>

]]></programlisting>
			<para>Again you can use code assist provided by JBDS when editing jsp page:</para>
			<figure>
				<title>Code Assist for &lt;f:param&gt;</title>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/rad_jsf_application/rad_jsf_application_18.png" scale="80"/>
					</imageobject>
				</mediaobject>
			</figure>
			<para>The <filename>success.jsp</filename> page is shown if you correctly guessed the number. The <code>&lt;h:outputFormat&gt;</code> tag will get the value of <code>success_text</code> from the properties file. The <code>{0}</code> in <code>success_text</code> will be substituted for by the value of the value attribute within the <code>&lt;f:param&gt;</code> tag during runtime.</para>
			<para>In the final result you have a button which allows you to replay the game. The <code>action</code> value references a backing bean method. In this case, the method only terminates the current session so that when you are shown the first page, the input text box is clear and a new random number is generated.</para>
			<itemizedlist>
				<listitem>
					<para>Switch to Preview mode to see how this page will look in a browser:</para>
				</listitem>
			</itemizedlist>
			<figure>
				<title>Success.jsp in Preview Mode</title>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/rad_jsf_application/rad_jsf_application_19.png"/>
					</imageobject>
				</mediaobject>
			</figure>
		</section>
	</section>
	<section id="CreatingIndexjsp">
		<?dbhtml filename="CreatingIndexjsp.html"?>
		<title>Creating index.jsp page</title>
		<para>Now we need to create the <filename>index.jsp</filename> page.</para>
		<para>The <filename>index.jsp</filename> page is the entry point of our application. It&apos;s just forwarding to the <filename>inputnumber.jsp</filename> page.</para>
		<itemizedlist>
			<listitem>
				<para>Right click the <filename>WebContent</filename> folder and select <menuchoice><guimenuitem>New</guimenuitem><guimenuitem>JSP File</guimenuitem></menuchoice>
				</para>
			</listitem>
			<listitem>
				<para>Enter <filename>index</filename> for name field and click the <guibutton>Next</guibutton> button.</para>
			</listitem>
			<listitem>
				<para>Untick the <guilabel>Use JSP Template</guilabel> check box and click the <guibutton>Finish</guibutton> button.</para>
			</listitem>
			<listitem>
				<para>Edit the source of the file so it looks like the following:</para>
			</listitem>
		</itemizedlist>
		<programlisting role="XML"><![CDATA[<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
 <body>
  <jsp:forward page="/pages/inputnumber.jsf" />
 </body>
</html>

]]></programlisting>
		<para>Note the <emphasis>.jsf</emphasis> extension of a page. It means that we trigger the JSF controller servlet to handle the page according the servlet mapping in the <filename>faces-config.xml</filename> file.</para>
	</section>
	<section id="RunningTheApplication33">
		<?dbhtml filename="RunningTheApplication33.html"?>
		<title>Running the Application</title>
		<para>Finally, we have all the pieces needed to run the application.</para>
		<itemizedlist>
			<listitem>
				<para>Start up JBoss server by clicking on the the <guibutton>Start</guibutton> icon in the <property>Servers</property> view. (If the JBoss Server is already running, stop it by clicking on the red icon and then start it again. After the messages in the Console tabbed view stop scrolling, JBoss is available)</para>
			</listitem>
			<listitem>
				<para>Right-click on the project and select <menuchoice><guimenuitem>Run As</guimenuitem><guimenuitem>Run on Server</guimenuitem></menuchoice></para>
			</listitem>
			<listitem>
				<para>Play with the application by entering correct as well as incorrect values</para>
			</listitem>
		</itemizedlist>
		<figure>
			<title>You are Asked to Enter a Number Between 0 and 100</title>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/rad_jsf_application/rad_jsf_application_20.png"/>
				</imageobject>
			</mediaobject>
		</figure>
		<figure>
			<title>Your Input is Validated and an Error Message is Displayed if Invalid Input was
                Entered</title>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/rad_jsf_application/rad_jsf_application_21.png" scale="90"/>
				</imageobject>
			</mediaobject>
		</figure>

		<figure>
			<title>After You Enter a Guess, the Application Tells You Whether a Smaller or a Larger
                Number Should be Tried</title>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/rad_jsf_application/rad_jsf_application_22.png" scale="90"/>
				</imageobject>
			</mediaobject>
		</figure>

		<figure>
			<title>Your Guess is Correct</title>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/rad_jsf_application/rad_jsf_application_23.png" scale="90"/>
				</imageobject>
			</mediaobject>
		</figure>
	</section>
</chapter>
