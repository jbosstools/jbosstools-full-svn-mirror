<?xml version="1.0" encoding="UTF-8"?>

<chapter id="intro-chapter">
  <title>Introduction</title>
	<para><emphasis role="bold">Go To:  <ulink url="index.html">Table of Contents</ulink></emphasis></para>
	<para>
	        The Teiid Designer User's Guide provides detailed descriptions of Teiid Designer features and functionality.
	</para>
  
	<sect1 id="what-is-modeler">
		<title>What is Teiid Designer?</title>
		<para>
			Teiid Designer
			is an Eclipse-based graphical modeling tool for modeling, analyzing,
			integrating and testing multiple data sources to produce Relational,
			XML and Web Service Views that expose your business data.
		</para>
		<figure>
			<title>Teiid Designer</title>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/screencaps/DesignerSnapshot.png"/>
				</imageobject>
			</mediaobject>
		</figure>
	</sect1>
	<sect1 id="why-use-modeler">
		<title>Why Use Teiid Designer?</title>
		<para>
			Teiid Designer
			is a visual tool that enables rapid, model-driven definition,
			integration and testing of data services without programming. With
			Teiid Designer
			, not only do you map from data sources to target formats using a
			visual tool, but you can also:
			<itemizedlist>
				<listitem>
					<para> resolve semantic differences</para>
				</listitem>
				<listitem>
					<para> create virtual data structures at a physical or logical
						level</para>
				</listitem>
				<listitem>
					<para> use declarative interfaces to integrate, aggregate, and
						transform the data on its way from source to a target format which
						is compatible and optimized for consumption by your applications
					</para>
				</listitem>
				<listitem>
					<para> resolve semantic differences</para>
				</listitem>
			</itemizedlist>
			This allows you to abstract the structure of the information you
			expose to and use in your applications from the underlying physical
			data structures. With
			Teiid Designer, data services are defined quickly, the resulting artifacts are easy
			to maintain and reuse, and all the valuable work and related metadata
			are saved for later reference.
		</para>
		<para>
			You can use Teiid Designer to integrate multiple sources, and access them using the common data
			access standards:
			<itemizedlist>
				<listitem>
					<para> Web Services / SOAP / XML</para>
				</listitem>
				<listitem>
					<para> JDBC / SQL</para>
				</listitem>
				<listitem>
					<para> ODBC / SQ</para>
				</listitem>
			</itemizedlist>
		</para>
		<para>
			Teiid Designer
			is an integral part of the Teiid Designer enterprise-class system for
			providing data services for service-oriented architectures.
		</para>
	</sect1>  

	<sect1 id="metadata-overview">
		<title>Metadata Overview</title>
		<para>
		</para>
		<sect2 id="what-is-metadata">
			<title>What is Metadata</title>
			<para>
				<emphasis role="bold">Metadata</emphasis>
				is data about data. A piece of metadata, called a meta object in the
				Teiid Designer, contains information about a specific information structure,
				irrespective of whatever individual data fields that may comprise that
				structure.
			</para>
			<para>
				Let’s use the example of a very basic database, an address book. Within
				your address book you certainly have a field or column for the ZIP code
				(or postal code number). Assuming that the address book services
				addresses within the United States, you can surmise the following about
				the column or field for the ZIP code:
				<itemizedlist>
					<listitem> <para>Named ZIPCode</para> </listitem>
					<listitem> <para>Numeric</para> </listitem>
					<listitem> <para>A string</para> </listitem>
					<listitem> <para>Nine characters long</para> </listitem>
					<listitem> <para>Located in the StreetAddress table</para> </listitem>
					<listitem> <para>Comprised of two parts: The first five digits represent the five ZIP code numbers, the final four represent the ZIP Plus Four digits if available, or 0000 if not</para> </listitem>
					<listitem> <para>Formatted only in integer numeric characters. Errors will result if formatted as 631410.00 or 6314q0000</para> </listitem>
				</itemizedlist>
			</para>
			<para>
				This definition represents metadata about the ZIP code data in the address book database. It abstracts information from the database itself and becomes useful to describe the content of your enterprise information systems and to determine how a column in one enterprise information source relates to another, and how those two columns could be used together for a new purpose
			</para>
			<para>
				You can think of this metadata in several contexts:
				<itemizedlist>
					<listitem> <para>What information does the metadata contain? (see <link linkend="business-technical-metadata">Business and Technical Metadata</link>)</para> </listitem>
					<listitem> <para>What data does the metadata represent? (see <link linkend="source-view-metadata">Source and View Metadata</link>)</para> </listitem>
					<listitem> <para>How will my organization use and manage this metadata? (see <link linkend="design-runtime-metadata">Design-Time and Runtime Metadata</link>)</para> </listitem>
				</itemizedlist>
			</para>
		</sect2>
		<sect2 id="editing-metadata-vs-data">
			<title>Editing Metadata vs. Editing Data</title>
			<para> The Teiid Designer helps you to create and describe an abstract
				graphic representation of your data structure of your data in the
				original data sources. It also describes whether those data sources
				are composed of Relational databases, text files, data streams, legacy
				database systems, or some other information type.</para>
			<para> The Teiid Designer allows you to create, edit, and link these
				graphically-represented meta objects that are really a description of
				your data, and not the data itself.</para>
			<para> So when this documentation describes the process of creating,
				deleting, or editing these meta objects, <emphasis role="bold">remember</emphasis> that you are not, in
				fact, modifying the underlying data.</para>
		</sect2>
		<sect2 id="metadata-models">
			<title>Metadata Models</title>
			<para> A <emphasis role="bold">metadata model</emphasis> represents a collection of metadata information
				that describes a complete structure of data.</para>
			<para> In a previous example we described the field ZIPCode as a
				<emphasis role="bold">metadata object</emphasis> in an address book database.. This <emphasis role="bold">meta object</emphasis>
				represents a single distinct bit of metadata information. We alluded
				to its parent table, StreetAddress. These <emphasis role="bold">meta objects</emphasis>, and others
				that would describe the other tables and columns within the database,
				would all combine to form a <emphasis role="bold">Source Metadata</emphasis> model for whichever
				enterprise information system hosts all the objects.</para>
			<para> You can have <emphasis role="bold">Source Models</emphasis> within your collection of <emphasis role="bold">metadata models</emphasis>
				These model physical data storage locations. You can also have
				<emphasis role="bold">View Models</emphasis>, which model the business view of the data. Each contains
				one type of metadata or another. For more information about difference
				between Source and View metadata, see “Source and View Metadata.”
			</para>
			<para> 
				<emphasis role="italic">NOTE: For detailed information about creating models from your
					metadata, see <link linkend="models-101-section"><emphasis role="bold">Models 101</emphasis></link></emphasis>
			</para>
		</sect2>
		<sect2 id="business-technical-metadata">
			<title>Business and Technical Metadata</title>
			<para>
				Metadata can include different types of information about a piece of
				data.
				<itemizedlist>
					<listitem>
						<para>
							<emphasis role="bold">Technical metadata</emphasis>
							describes the information required to access the data, such as
							where the data resides or the structure of the data in its native
							environment.
						</para>
					</listitem>
					<listitem>
						<para>
							<emphasis role="bold">Business metadata</emphasis>
							details other information about the data, such as keywords related
							to the meta object or notes about the meta object.
						</para>
					</listitem>
				</itemizedlist>
			</para>
			<para>
				Note that the terms <emphasis role="bold">technical and business metadata,</emphasis> refer to the
				content of the metadata, namely what type of information is contained
				in the metadata. Don’t confuse these with the terms “physical” and
				“view” metadata that indicate what the metadata represents. For more
				information, see Source and View Metadata.
			</para>
			<sect3 id="technical-metadata">
				<title>Technical Metadata</title>
				<para>
				Technical metadata represents information that describes how to access the data in its original 
				native data storage. Technical metadata includes things such as datatype, 
				the name of the data in the enterprise information system, and other information that 
				describes the way the native enterprise information system identifies the meta object
				</para>
				<para>
					Using our example of an address book database, the following represent the 
					technical metadata we know about the ZIP code column:
					<itemizedlist>
						<listitem> <para>Named ZIPCode</para> </listitem>
						<listitem> <para>Nine characters long</para> </listitem>
						<listitem> <para>A string</para> </listitem>
						<listitem> <para>Located in the StreetAddress table</para> </listitem>
						<listitem> <para>Uses SQL Query Language</para> </listitem>
					</itemizedlist>
					These bits of information describe the data and information required to 
					access and process the data in the enterprise information system.
				</para>
			</sect3>
			<sect3 id="business-metadata">
				<title>Business Metadata</title>
				<para> Business metadata represents additional information about a
					piece of data, not necessarily related to its physical storage in the
					enterprise information system or data access requirements. It can
					also represent descriptions, business rules, and other additional
					information about a piece of data.</para>
				<para>
					Continuing with our example of the ZIP Code column in the address
					book database, the following represents business metadata we may know
					about the ZIP code:
					<itemizedlist>
						<listitem>
							<para>The first five characters represent the five ZIP code
								numbers, the final four represent the ZIP Plus Four digits if
								available, or 0000 if not</para>
						</listitem>
						<listitem>
							<para>The application used to populate this field in the
								database strictly enforces the integrity of the data format</para>
						</listitem>
					</itemizedlist>
				</para>
				<para> Although the first might seem technical, it does not directly
					relate to the physical storage of the data. It represents a business
					rule applied to the contents of the column, not the contents
					themselves.</para>
				<para> The second, of course, represents some business information
					about the way the column was populated. This information, although
					useful to associate with our definition of the column, does not
					reflect the physical storage of the data.</para>
			</sect3>
		</sect2>
		<sect2 id="design-runtime-metadata">
			<title>Design-Time and Runtime Metadata</title>
			<para> Teiid Designer software distinguishes between design-time metadata
				and run-time metadata. This distinction becomes important if you use 
				the Teiid Designer Server. Design-time data
				is laden with details and representations that help the user
				understand and efficiently organize metadata. Much of that detail is
				unnecessary to the underlying system that runs the Virtual Database
				that you will create. Any information that is not absolutely
				necessary to running the Virtual Database is stripped out of the
				run-time metadata to ensure maximum system performance.</para>
			<sect3 id="design-time-metadata">
				<title>Design-Time Metadata</title>
				<para>
					Design-time metadata refers to data within
					your local directory that you have created or have imported. You can
					model this metadata in the Teiid Designer, adding
					<emphasis role="bold">Source</emphasis>
					and
					<emphasis role="bold">View</emphasis>
					metadata.
				</para>
			</sect3>
			<sect3 id="runtime-metadata">
				<title>Runtime Metadata</title>
				<para> Once you have adequately modeled your enterprise information
					systems, including the necessary technical metadata that describes
					the physical structure of your sources, you can use the metadata for
					data access.</para>
				<para> To prepare the metadata for use in the Teiid Designer Server, you
					take a snapshot of a metadata model for the Teiid Designer Server to use
					when resolving queries from your client applications. This run-time
					metadata represents a static version of design-time metadata you
					created or imported. This snapshot is in the form of a <emphasis role="bold">Virtual
					Database</emphasis> definition, or <emphasis role="bold">VDB</emphasis>.</para>
				<para>
					As you create this <emphasis role="bold">runtime metadata</emphasis>, the Teiid Designer:
					<itemizedlist>
						<listitem>
							<para>derives the runtime metadata from a consistent set of
								metadata models.</para>
						</listitem>
						<listitem>
							<para>creates a subset of design-time metadata, focusing on
								the technical metadata that describes the access to underlying
								enterprise information systems.</para>
						</listitem>
						<listitem>
							<para> optimizes runtime metadata for data access performance.
							</para>
						</listitem>
					</itemizedlist>
				</para>
				<para> You can continue to work with the design-time metadata, but
					once you have created a runtime metadata model, it remains static.
				</para>
			</sect3>
		</sect2>
		<sect2 id="source-view-metadata">
			<title>Source and View Metadata</title>
			<para> In addition to the distinction between business and technical
				metadata, you should know the difference between <emphasis role="bold">Source Metadata and
				View Metadata</emphasis>.</para>
			<para> <emphasis role="italic">Source and View metadata refer to what the metadata represents,
				not its content</emphasis>.</para>
			<para> <emphasis role="bold">Source Metadata</emphasis> directly represents metadata for an enterprise
				information system and captures exactly where and how the data is
				maintained. Source Metadata sounds similar to technical metadata, but
				Source Metadata can contain both technical and business metadata. When
				you model Source Metadata, you are modeling the data that your
				enterprise information systems contain. For more information, see
				“Modeling Your Teiid Designer Information Systems.”</para>
			<para> View Metadata, on the other hand, represent tailored views that
				<emphasis role="bold">transform</emphasis> the <emphasis role="bold">Source Metadata</emphasis> into the terminology and domain of
				different applications. <emphasis role="bold">View Metadata</emphasis>, too, can contain both technical
				and business metadata. When you model <emphasis role="bold">View Metadata</emphasis>, you’re modeling
				the data as your applications (and your enterprise) ultimately use it.
				For more information, see “<emphasis role="bold">Modeling Your Teiid Designer Data Needs</emphasis>.”
			</para>
			<sect3 id="modeling-source-metadata">
				<title>Modeling Your Source Metadata</title>
				<para>
					When you model the <emphasis role="bold">Source Metadata</emphasis> within your enterprise information
					systems, you capture some detailed information, including:
					<itemizedlist>
						<listitem>
							<para>Identification of datatype</para>
						</listitem>
						<listitem>
							<para>Storage formats</para>
						</listitem>
						<listitem>
							<para>Constraints</para>
						</listitem>
						<listitem>
							<para>Source-specific locations and names</para>
						</listitem>
					</itemizedlist>
				</para>
				<para> The <emphasis role="bold">Source Metadata</emphasis> captures this detailed technical metadata
					to provide a map of the data, the location of the data, and how you
					access it.</para>
				<para> This collection of <emphasis role="bold">Source Metadata</emphasis> comprises a direct mapping
					of the information sources within your enterprise. If you use the
					Teiid Designer Server for information integration, this technical
					metadata plays an integral part in query resolution.</para>
				<para> For example, our ZIPCode column and its parent table
					StreetAddress map directly to fields within our hypothetical address
					book database.</para>
				<para> To extend our example, we might have a second source of
					information, a comma-separated text file provided by a marketing
					research vendor. This text file can supply additional demographic
					information based upon address or ZIP code. This text file would
					represent another EIS, and the meta objects in its Source Model would
					describe each comma-separated value.</para>
			</sect3>
			<sect3 id="modeling-view-metadata">
				<title>Modeling Your View Metadata</title>
				<para> When you create <emphasis role="bold">View Metadata</emphasis>, you are not describing the
					nature of your physical data storage. Instead, you describe the way
					your enterprise uses the information in its day-to-day operations.
				</para>
				<para>
					<emphasis role="bold">View Metadata</emphasis> derives its classes and attributes from other metadata.
					You can derive <emphasis role="bold">View Metadata</emphasis> from <emphasis role="bold">Source Metadata</emphasis> that describes the
					ultimate sources for the metadata or even from other View Metadata.
					However, when you model <emphasis role="bold">View Metadata</emphasis>, you create special “views” on
					your existing enterprise information systems that you can tailor to
					your business use or application expectations. This <emphasis role="bold">View Metadata</emphasis>
					offers many benefits:
					<itemizedlist>
						<listitem>
							<para>You can expose only the information relevant to an
								application. The application uses this <emphasis role="bold">View Metadata</emphasis> to resolve
								its queries to the ultimate physical data storage.</para>
						</listitem>
						<listitem>
							<para>You can add content to existing applications that require
								different views of the data by adding the <emphasis role="bold">View Metadata</emphasis> to the
								existing <emphasis role="bold">View Metadata</emphasis> that application uses. You save time and
								effort since you do not have to create new models nor modify your
								existing applications.</para>
						</listitem>
						<listitem>
							<para>Your applications do not need to refer to specific
								physical enterprise information systems, offering flexibility and
								interchangeability. As you change sources for information, you do
								not have to change your end applications.</para>
						</listitem>
						<listitem>
							<para>The <emphasis role="bold">View Metadata</emphasis> models document the various ways your
								enterprise uses the information and the different terminology that
								refers to that information. They do so in a central location.
							</para>
						</listitem>
					</itemizedlist>
				</para>
				<para> Our example enterprise information sources, the address book
					database, and the vendor-supplied comma-delimited text file, reside
					in two different native storage formats and therefore have two Source
					Metadata models. However, they can represent one business need: a
					pool of addresses for a mass mailing.</para>
				<para> By creating a <emphasis role="bold">View Metadata</emphasis> model, we could accurately show
					that this single View Table, the AddressPool, contains information
					from the two enterprise information systems. The <emphasis role="bold">View Metadata</emphasis> model
					not only shows from where it gets the information, but also the SQL
					operations it performs to select its information from its source
					models.</para>
				<para> This <emphasis role="bold">View Metadata</emphasis> can not only reflect and describe how your
					organization uses that information, but, if your enterprise uses the
					Teiid Designer Server, your applications can use the <emphasis role="bold">View Metadata</emphasis> to
					resolve queries.</para>
				<para> To create this <emphasis role="bold">View Metadata</emphasis>, you create a view and define a
					<emphasis role="bold">transformation</emphasis> for that view, a special query that enables you to
					select information from the source (or even other view) metadata
					models. For more information, see “<link linkend="transformation-editor-section"><emphasis role="bold">Transformation Editor</emphasis></link>.”</para>
			</sect3>
			<sect3 id="modeling-transformations">
				<title>Modeling Metadata Transformations</title>
				<para>
					Section on Modeling transformations.
				</para>
				<sect4 id="metadata-transformations">
					<title>Metadata Transformations</title>
					<para>
					By modeling View Metadata, you can illustrate the business view of your enterprise information sources. View Metadata models not only describe that business view, but also illustrate how the meta objects within the View Metadata models derive their information from other metadata models.
					</para>
					<para>
					Let’s return to the example of our address book database and the vendor’s comma-separated list. We want to generate the View Metadata model, Address Pool, from these enterprise information systems.
					</para>
					<figure id="address-transform">
						<title>Data Flow for View Transformations</title>
						<mediaobject><imageobject>
							<imagedata fileref="images/screencaps/AddressPoolTransformation.jpg" align="center" />
						</imageobject></mediaobject>
					</figure>
					<para>
					The transformation that joins these metadata models to create the virtual Address Pool metadata model contains a SQL query, called a union, that determines what information to draw from the source metadata and what to do with it.
					</para>
					<para>
					The resulting Address Pool contains not only the address information from our Address Book database, but also that from our vendor-supplied text file.
					</para>
				</sect4>
				<sect4 id="sql-transformations">
					<title>SQL in Transformations </title>
					<para>
					Transformations contain SQL queries that SELECT the appropriate attributes from the information sources. 
					</para>
					<para>
					For example, from the sources the transformation could select relevant address columns, including first name, last name, street address, city, state, and ZIP code. Although the metadata models could contain other columns and tables, such as phone number, fax number, e-mail address, and Web URL, the transformation acts as a filter and populates the Address Pool metadata model with only the data essential to building our Address Pool.
					</para>
					<para>
					You can add other SQL logic to the transformation query to transform the data information. For example, the address book database uses a nine-character string that represents the ZIP Plus Four. The transformation could perform any SQL-supported logic upon the ZIPCode column to substring this information into the format we want for the Address Pool View metadata model.
					</para>
				</sect4>
				<sect4 id="mapping-xml-transformations">
					<title>Mapping XML Transformations </title>
					<para>
					When you model View Metadata, you can also create a View XML Document model. This View Document lets you select information from within your other data sources, just like a regular View Metadata model, but you can also map the results to tags within an XML document.
					</para>
					<figure id="address-xml-transform">
						<title>Data Flow for XML Transformations</title>
						<mediaobject><imageobject>
							<imagedata fileref="images/screencaps/AddressPoolXMLTransformation.jpg" align="center" />
						</imageobject></mediaobject>
					</figure>
					<para>
					In this example, the Address Pool View Metadata model still selects its information from the Address Book Database and the Vendor Text File, but it also maps the resulting columns into tags in the Address XML document.
					</para>
				</sect4>
			</sect3>
		</sect2>
	</sect1>
	<sect1 id="models-101-section">
		<title>Models 101</title>
		<para>
		</para>
		<sect2 id="intro-what-are-models">
			<title>What Are Models</title>
			<para> A model is a representation of a set of information constructs.
				A familiar model is the relational model, which defines tables
				composed of columns and containing records of data. Another familiar
				model is the XML model, which defines hierarchical data sets.</para>
			<para> In Teiid Designer, models are used to define the entities, and
				relationships between those entities, required to fully define the
				integration of information sets so that they may be accessed in a
				uniform manner, using a single API and access protocol. The file
				extension used for these models is '.xmi' ( Example:
				NorthwindOracle.xmi ) which adheres to the XMI syntax defined by the
				OMG.</para>
			<para> Below is an example of the partial contents of a model file.
			</para>
			<figure>
				<title>Sample Model File</title>
				<mediaobject><imageobject>
					<imagedata fileref="images/screencaps/SampleModelFile.jpg"/>
				</imageobject></mediaobject>
			</figure>
			<para> Model files should never be modified "by hand". While it is
				possible to do so, there is the possibility that you may corrupt the
				file such that it cannot be used within the Teiid Designer system.</para>
			<para> The fundamental models in Teiid Designer define the structural and
				data characteristics of the information contained in data sources.
				These are referred to as source models (represented by <inlinemediaobject>
					<imageobject>
						<imagedata fileref="images/icons/Model.gif"/>
					</imageobject>
				</inlinemediaobject> ). Teiid Designer
				uses the information in source models to federate the information in
				multiple sources, so that from a user's viewpoint these all appear to
				be in a single source.</para>
			<figure>
				<title>Model Internals</title>
				<mediaobject><imageobject>
					<imagedata fileref="images/screencaps/ModelInternals.gif"/>
				</imageobject></mediaobject>
			</figure>
			<para> In addition to source models, Teiid Designer provides the ability to
				define a variety of view models(represented by <inlinemediaobject>
					<imageobject>
						<imagedata fileref="images/icons/ViewModel.gif"/>
					</imageobject>
				</inlinemediaobject> ). These can be used to
				define a layer of abstraction above the physical (or source) layer, so
				that information can be presented to end users and consuming
				applications in business terms rather than as it is physically stored.
				Views are mapped to sources using transformations between models.
				These business views can be in a variety of forms:</para>
			<itemizedlist>
				<listitem> <para>Relational Tables and Views</para> </listitem>
				<listitem> <para>XML</para> </listitem>
				<listitem> <para>XML Service</para> </listitem>
				<listitem> <para>Web services</para> </listitem>
				<listitem> <para>Relationships</para> </listitem>
				<listitem> <para>Functions</para> </listitem>
				<listitem> <para>UML 2.0</para> </listitem>
			</itemizedlist>
			<para> A third model type, logical, provides the ability to define
				models from a logical or structural perspective.</para>
		</sect2>
		<sect2 id="intro-how-is-a-model-defined">
			<title>How is a Model Defined?</title>

			<para>
			    Models are defined using Teiid Designer in various ways:
			</para>
			<itemizedlist>
				<listitem> 
					<para>Created via importing source data characteristics. 
						(see <link linkend="importers-chapter"><emphasis role="bold">Import Wizard</emphasis></link>)</para> 
				</listitem>
				<listitem> 
					<para>Manual creation via <link linkend="newmodels-chapter"><emphasis role="bold">New Model Wizard</emphasis></link></para> 
				</listitem>
				<listitem> 
					<para>Transforming or copying from one model into another
						 (see <link linkend="newmodels-chapter"><emphasis role="bold">New Model Wizard</emphasis></link> options)</para> 
				</listitem>
				<listitem> <para>Various custom actions</para></listitem>
			</itemizedlist>
		</sect2>
		<sect2 id="intro-model-classes-and-types">
			<title>Model Classes and Types</title>
			
			<para>Teiid Designer can be used to model a variety of classes of
				models. Each of these represent a conceptually different
				classification of models.</para>
			<itemizedlist>
				<listitem> 
					<para><emphasis role="bold">Relational</emphasis> - Model data that can be represented in table –
						columns and records – form. Relational models can represent structures
						found in relational databases, spreadsheets, text files, or simple Web
						services.</para>
				</listitem>
				<listitem> 
					<para><emphasis role="bold">XML</emphasis> - Model that represents the basic structures of XML documents.
						These can be “backed” by XML Schemas. XML models represent nested
						structures, including recursive hierarchies.</para>
				</listitem>
				<listitem> 
					<para><emphasis role="bold">XML Schema</emphasis> - W3C
						standard for formally defining the structure and constraints of XML
						documents, as well as the datatypes defining permissible values in XML
						documents.</para>
				</listitem>
				<listitem> 
					<para><emphasis role="bold">XML Service</emphasis> - TBD.</para>
				</listitem>
				<listitem> 
					<para><emphasis role="bold">Web Services</emphasis> - which define Web service
						interfaces, operations, and operation input and output parameters (in
						the form of XML Schemas).</para>
				</listitem>
				<listitem> 
					<para><emphasis role="bold">Model Extensions</emphasis> - for defining property
						name/value extensions to other model classes.</para>
				</listitem>
				<listitem> 
					<para><emphasis role="bold">Function</emphasis> - The Function metamodel supports the capability to provide
						user-defined functions, including binary source jars, to use in custom transformation SQL statements.
						Currently only a single UDF model is supported by Teiid Designer. 
						See <link linkend="udfs-view"><emphasis role="bold">UDFs View</emphasis></link> for details.</para>
				</listitem>
				<listitem> 
					<para><emphasis role="bold">Relationship</emphasis> - TBD.</para>
				</listitem>
				<listitem> 
					<para><emphasis role="bold">UML 2.0</emphasis> - TBD.</para>
				</listitem>
			</itemizedlist>

			<para>VDBs contain two primary varieties of model types - source and
				view. Source models represent the structure and characteristics of
				physical data sources, whereas view models represent the structure and
				characteristics of abstract structures you want to expose to your
				applications.</para>
		</sect2>
		<sect2 id="intro-models-and-vdbs">
			<title>Models and VDBs</title>
			<para>Models used for data integration are packaged into a virtual
				database (VDB). The models must be in a complete and consistent state
				when used for data integration. That is, the VDB must contain all the
				models and all resources they depend upon. Models contained within a
				VDB can be imported into the Teiid Designer. In this way, VDBs
				can be used as a way to exchange a set of related models. (See
				 description in <link linkend="vdb-editor-section"><emphasis role="bold">VDB Editor</emphasis></link> section)</para>
		</sect2>
		<sect2 id="intro-models-and-connector-bindings">
			<title>Models and Connectors</title>

			<para>A connector provides the connectivity to the source for
				the query engine when it is executing queries to that source.</para>
			<para>All Source models must have connectors associated with
				them in a VDB in order to be tested in Teiid Designer or deployed for data
				access.</para>
			<para>It is possible that multiple models may use the same connector,
				but each model must have a connector.</para>
			<para>In Teiid Designer, connector are automatically created
				"under the hood" when you import from a specific supported data
				source. You can also create and maintain your own custom connectors.
				(see <link linkend="manage-bindings-section"><emphasis role="bold">Manage Connectors</emphasis></link>)</para>
				
		</sect2>
		<sect2 id="intro-model-validation">
			<title>Model Validation</title>
			
			<para>Models must be in a valid state in order to be used for data
				access. Validation of a single model means that it must be in a
				self-consistent and complete state, meaning that there are no "missing
				pieces" and no references to non-existent entities. Validation of
				multiple models checks that all inter-model dependencies are present
				and resolvable.</para>
			<para> Models must always be validated when they are deployed in a VDB
				for data access purposes.</para>
			<para> Enterprise Teiid Designer will automatically validate your models
				whenever the user Saves ( Note: the "Models > Validate Automatically"
				option must be checked). When editing models, the editor tabs will
				display a "*" to indicate that the model has unsaved changes.</para>
		</sect2>
		<sect2 id="intro-testing-your-models">
			<title>Testing Your Models</title>
			<para> Designing and working with data is often much easier when you can
				see the information you're working with. The Teiid Designer's <emphasis role="bold">Preview Data</emphasis>
				feature makes this possible and allows you to instantly preview the
				information described by any object, whether it's a physical table or a
				virtual view. In other words, you can test the views with actual data
				by simply selecting the table, view, procedure or XML document. The
				preview functionality leverages an embedded version of the Teiid Designer
				Server, so you can be sure that the behavior in the Teiid Designer will
				reliably match when the VDB is deployed to the Server. Previewing
				information is a fast and easy way to sample the data. Of course, to
				run more complicated queries like what your application likely uses,
				simply execute the VDB in the Teiid Designer and type in any query or SQL
				statement.</para>
			<para> After creating your models, you can test them by using the
				<emphasis role="bold">Preview Data</emphasis> action <inlinemediaobject>
						<imageobject>
							<imagedata fileref="images/icons/previewData.gif"/>
						</imageobject>
					</inlinemediaobject>. By selecting a desired table object and
				executing the action, the results of a simple query will be displayed
				in the <link linkend="preview-results-view"><emphasis role="bold">Preview</emphasis></link> results view. This action is accessible throughout the
				Teiid Designer in various view toolbars and context menus.</para>
			<para> There are two requirements for previewing your data: the
				selected object must be one several previewable model object types and
				all source models within the model dependency tree must be bound to
				connectors.</para>
			<para> Previewable objects include:</para>
			<itemizedlist>
				<listitem>
					<para>Relational table or view, including tables involving
						access patterns.</para>
				</listitem>
				<listitem>
					<para>Relational procedure.</para>
				</listitem>
				<listitem>
					<para>Web Service operation.</para>
				</listitem>
				<listitem>
					<para>XML Document staging table.</para>
				</listitem>
			</itemizedlist>
			<para> Note that any virtual table, view or procedure is previewable as
				long as all "physical" source models are bound via connectors.
				(See <link linkend="connectors-view"><emphasis role="bold">Connectors</emphasis></link> view and 
				<link linkend="manage-bindings-section"><emphasis role="bold">Manage Connectors</emphasis></link>)</para>
			<note>
				<para>If attempting to preview a relational access patter, a web service operation or a relational procedure
					with input parameters, a dialog will be presented to request values for required parameters.</para>
			</note>
		</sect2>
	</sect1>


</chapter>
