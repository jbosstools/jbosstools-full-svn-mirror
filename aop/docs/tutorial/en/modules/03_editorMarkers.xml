<chapter id="Editor">
	<title>The Aop Editor</title>
	
	<para>The AOP Editor is a small extension to the generic java
	editor class for eclipse. The main difference is that it does provide
	markers on the left side to visually clue the user in to what 
	java elements (methods, types, fields, etc) match
	the myriad of expressions you have created for your 
	pointcuts, typedefs, and introductions. </para>
	
	<section><title>Setup</title>
		<informaltable frame="none">
			<tgroup cols="2" align="left" colsep="0" rowsep="0">
				<tbody>
					<row>
						<entry valign="top">
		<para>I've created some elements to begin, as seen to the right. </para>
		<para>A typedef with the expression <literal>has(* *->getMyInt(..))</literal></para>
		<para>An introduction with the expression <literal>has(* *->getMyString(..))</literal></para>
		<para>A named pointcut with the expression <literal>execution(* *->getMyString(..))</literal></para>
		<para>A binding that uses that pointcut. The binding binds
		our PojoInterceptor as advice.</para>

		</entry>
		<entry><mediaobject><imageobject>
				<imagedata align="center" fileref="images/03_setup_AMV.gif"/>
		</imageobject></mediaobject></entry>
</row></tbody></tgroup></informaltable>
	</section>
	
	<section><title>Type matchers</title>
		<informaltable frame="none">
			<tgroup cols="2" align="left" colsep="0" rowsep="0">
				<tbody>
					<row>
						<entry valign="top">
		<para>Currently, introductions and typedefs are the only implemented
		features who's expressions reference only class types. </para>
				</entry>
		<entry><mediaobject><imageobject>
				<imagedata align="center" fileref="images/03_marker_pojo2.gif"/>
		</imageobject></mediaobject></entry>
</row></tbody></tgroup></informaltable>
		
		<para>To the upper-right,we see our pojo2 class declaration. 
		MyPojo2 only matches the introduction, and does not match the typedef. 
		Below, we see our MyPojo1 definition, which matches both our typedef
		and the introduction. Because the image markers overlap, it can become
		difficult to see everything that references or matches this class type.</para>
		
		<para>To remedy this situation, we've also included "advice", which can
		be accessed through a hotkey combination. If you place your cursor on 
		the class declaration (on the words MyPojo1) and press
		<literal>ctrl+1</literal>, this information will be displayed.
		It is possible this feature will prove less beneficial than it
		at first seemed, and could be removed, instead presenting the 
		information in the <literal>Advised Members View</literal>. This
		remains to be seen, based on user feedback. </para>
		
		
		<figure id="TypeMarkerAdvice">
		   <mediaobject>
		      <imageobject>
				<imagedata align="center" fileref="images/03_marker_introtype.gif"/>
		      </imageobject>
		      <caption><para>"Advice" offered for class types</para></caption>
		   </mediaobject>
		</figure>
		
		
	</section>
	
	<section><title>Advised Members Markers</title>
		<para>The other type of markers we have are for member elements of a class
		source file that are advised by some type of advice. <literal>Advice</literal>
		is defined as Interceptors or Aspect methods. An example of this is 
		shown below.</para>
		<figure id="AdvisedByInterceptor">
		   <mediaobject>
		      <imageobject>
				<imagedata align="center" fileref="images/03_marker_advised.gif"/>
		      </imageobject>
		      <caption><para>"Advice" offered for elements advised by interceptors / aspects</para></caption>
		   </mediaobject>
		</figure>
		
		<para>By selecting the <literal>goto</literal> option, an editor
		with the source for that Interceptor or Aspect will be opened. 
		There, also, there will be a marker that can bring you to any of
		members that that advice advises as shown below.</para>
		
		<para>An image marker is also available, however it is not currently
		shown because there is already an image marker designating the 
		<literal>invoke</literal> method as an implementer method
		of the <literal>Interceptor</literal> interface.</para>

		<figure id="InterceptorMarkerAdvice">
		   <mediaobject>
		      <imageobject>
				<imagedata align="center" fileref="images/03_adviceAssist_interceptor.gif"/>
		      </imageobject>
		      <caption><para>"Advice" offered to navigate to java methods / fields </para></caption>
		   </mediaobject>
		</figure>

	</section>
	
	<section><title>Adding / deleting methods</title>
		
		<para>Adding or removing methods from classes could change 
		which expressions they match. (Pointcut, typedef, introduction, etc).
		So whenever a delta can be calculated, whether the classes match
		is recalculated and markers are either shown (if a matching method
		is added) or removed (if removed). A before-and-after series is 
		posted below to demonstrate this. </para>
		
		<figure id="editorChangesPre">
		   <mediaobject>
		      <imageobject>
				<imagedata align="center" fileref="images/03_editor_changes_pre.gif"/>
		      </imageobject>
		      <caption><para>The before view. Class matches the introduction.</para></caption>
		   </mediaobject>
		</figure>

		<figure id="editorChangesPost">
		   <mediaobject>
		      <imageobject>
				<imagedata align="center" fileref="images/03_editor_changes_post.gif"/>
		      </imageobject>
		      <caption><para>The after view. Class does not match the introduction.</para></caption>
		   </mediaobject>
		</figure>
		
	</section>
	
	<section><title>Changing Annotations</title>
		<para>Similar behavior can be achieved by changing 
		a class's annotation, as demonstrated below. First, I created 
		a new Pojo with the following code:</para>
		
		<programlisting>public class MyPojo3 {
	public void someMethod() {
		
	}
}</programlisting>

		<para>I've added the following typedef expression:
			<literal>has(* *->@my.test.aop.AnnotInterface(..))</literal></para>
		
		<para>Along with that, I created an empty interface by that name.</para>
		
		<section><title>Making it match</title>
			<para>To make it match, just add the annotation as shown
			below. The example shown is an example of JBoss AOP's 
			1.4-style annotations. In the standalone AOP
			library, you must pre-compile classes with this
			style of annotations. In the IDE, it is done for you.</para>

			<figure id="editorChangesAnnotPre">
			   <mediaobject>
			      <imageobject>
					<imagedata align="center" fileref="images/03_editor_annot_pre.gif"/>
			      </imageobject>
			      <caption><para>The before view. Class matches the typedef.</para></caption>
			   </mediaobject>
			</figure>
	
			<figure id="editorChangesAnnotPost">
			   <mediaobject>
			      <imageobject>
					<imagedata align="center" fileref="images/03_editor_annot_post.gif"/>
			      </imageobject>
			      <caption><para>The after view. Class does not match the typedef.</para></caption>
			   </mediaobject>
			</figure>

		</section>
	</section>
</chapter>

