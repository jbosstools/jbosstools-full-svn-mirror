<?xml version="1.0" encoding="UTF-8"?>
<chapter id="codegen">
  <title>Controlling POJO code generation</title>

  <para>When using <emphasis>
      <property>&lt;hbm2java&gt;</property>
    </emphasis> or the eclipse plugin to generate POJO java code you have the possibility to control
    certain aspects of the code generation. This is primarily done with the <emphasis>
      <property>&lt;meta&gt;</property>
    </emphasis> tag in the mapping files. The following section describes the possible <emphasis>
      <property>&lt;meta&gt;</property>
    </emphasis> tags and their use.</para>

  <section>
    <title>The <literal>&lt;meta&gt;</literal> attribute</title>

    <para>The <emphasis>
        <property>&lt;meta&gt;</property>
      </emphasis> tag is a simple way of annotating the <emphasis>
        <property>hbm.xml</property>
      </emphasis> with information, so tools have a natural place to store/read information that is
      not directly related to the Hibernate core.</para>

    <para>You can use the <emphasis>
        <property>&lt;meta&gt;</property>
      </emphasis> tag to e.g. tell <emphasis>
        <property>&lt;hbm2java&gt;</property>
      </emphasis> to only generate <emphasis>
        <property>&quot;protected&quot;</property>
      </emphasis> setters, have classes always implement a certain set of interfaces or even have
      them extend a certain base class and even more.</para>

    <para>The following example shows how to use various <emphasis>
        <property>&lt;meta&gt;</property>
      </emphasis> attributes and the resulting java code.</para>

    <programlisting role="XML"><![CDATA[<class name="Person">
    <meta attribute="class-description">
        Javadoc for the Person class
        @author Frodo
    </meta>
    <meta attribute="implements">IAuditable</meta>
    <id name="id" type="long">
        <meta attribute="scope-set">protected</meta>
        <generator class="increment"/>
    </id>
    <property name="name" type="string">
        <meta attribute="field-description">The name of the person</meta>
    </property>
</class>]]></programlisting>

    <para>The above <emphasis>
        <property>hbm.xml</property>
      </emphasis> will produce something like the following (code shortened for better
      understanding). Notice the Javadoc comment and the protected set methods:</para>

    <programlisting role="JAVA"><![CDATA[// default package

import java.io.Serializable;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

/** 
 *         Javadoc for the Person class
 *         @author Frodo
 */
public class Person implements Serializable, IAuditable {

    public Long id;

    public String name;

    public Person(java.lang.String name) {
        this.name = name;
    }

    public Person() {
    }

    public java.lang.Long getId() {
        return this.id;
    }

    protected void setId(java.lang.Long id) {
        this.id = id;
    }

    /** 
     * The name of the person
     */
    public java.lang.String getName() {
        return this.name;
    }

    public void setName(java.lang.String name) {
        this.name = name;
    }

}]]></programlisting>

    <table frame="topbot">
      <title>Supported meta tags</title>

      <tgroup cols="2">
        <colspec colwidth="1.0*"/>

        <colspec colwidth="2*"/>

        <thead>
          <row>
            <entry>Attribute</entry>

            <entry>Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry>
              <literal>class-description</literal>
            </entry>

            <entry>inserted into the javadoc for classes</entry>
          </row>

          <row>
            <entry>
              <literal>field-description</literal>
            </entry>

            <entry>inserted into the javadoc for fields/properties</entry>
          </row>

          <row>
            <entry>
              <literal>interface</literal>
            </entry>

            <entry>If true, an interface is generated instead of an class.</entry>
          </row>

          <row>
            <entry>
              <literal>implements</literal>
            </entry>

            <entry>interface the class should implement</entry>
          </row>

          <row>
            <entry>
              <literal>extends</literal>
            </entry>

            <entry>class that the current class should extend (ignored for subclasses)</entry>
          </row>

          <row>
            <entry>
              <literal>generated-class</literal>
            </entry>

            <entry>overrule the name of the actual class generated</entry>
          </row>

          <row>
            <entry>
              <literal>scope-class</literal>
            </entry>

            <entry>scope for class</entry>
          </row>

          <row>
            <entry>
              <literal>scope-set</literal>
            </entry>

            <entry>scope for setter method</entry>
          </row>

          <row>
            <entry>
              <literal>scope-get</literal>
            </entry>

            <entry>scope for getter method</entry>
          </row>

          <row>
            <entry>
              <literal>scope-field</literal>
            </entry>

            <entry>scope for actual field</entry>
          </row>

          <row>
            <entry>
              <literal>default-value</literal>
            </entry>

            <entry>default initialization value for a field</entry>
          </row>

          <row>
            <entry>
              <literal>use-in-tostring</literal>
            </entry>

            <entry>include this property in the <literal>toString()</literal></entry>
          </row>

          <row>
            <entry>
              <literal>use-in-equals</literal>
            </entry>

            <entry>include this property in the <literal>equals()</literal> and
                <literal>hashCode()</literal> method. If no use-in-equals is specified, no
              equals/hashcode will be generated.</entry>
          </row>

          <row>
            <entry>
              <literal>gen-property</literal>
            </entry>

            <entry>property will not be generated if false (use with care)</entry>
          </row>

          <row>
            <entry>
              <literal>property-type</literal>
            </entry>

            <entry>Overrides the default type of property. Use this with any tag's to specify the
              concrete type instead of just Object.</entry>
          </row>

          <row>
            <entry>
              <literal>class-code</literal>
            </entry>

            <entry>Extra code that will inserted at the end of the class</entry>
          </row>

          <row>
            <entry>
              <literal>extra-import</literal>
            </entry>

            <entry>Extra import that will inserted at the end of all other imports</entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>Attributes declared via the <emphasis>
        <property>&lt;meta&gt;</property>
      </emphasis> tag are per default <emphasis>
        <property>&quot;inherited&quot;</property>
      </emphasis> inside an <emphasis>
        <property>hbm.xml</property>
      </emphasis> file.</para>

    <para>What does that mean? It means that if you e.g want to have all your classes implement
        <literal>IAuditable</literal> then you just add an <emphasis> &lt;meta
        attribute="implements"&gt;IAuditable&lt;/meta&gt;</emphasis> in the top of the <emphasis>
        <property>hbm.xml</property>
      </emphasis> file, just after <emphasis>
        <property>&lt;hibernate-mapping&gt;</property>. </emphasis> Now all classes defined
      in that <emphasis>
        <property>hbm.xml</property>
      </emphasis> file will implement <literal>IAuditable</literal>!</para>

    <note>
      <title>Note:</title>
      <para>This applies to <emphasis>all</emphasis>
        <literal>&lt;meta&gt;</literal>-tags. Thus it can also e.g. be used to specify that
        all fields should be declare protected, instead of the default private. This is done by
        adding <literal>&lt;meta
          attribute="scope-field"&gt;protected&lt;/meta&gt;</literal> at e.g. just under
        the <literal>&lt;class&gt;</literal> tag and all fields of that class will be
        protected.</para>
    </note>

    <para>To avoid having a <emphasis>
        <property>&lt;meta&gt;</property>
      </emphasis> tag inherited then you can simply specify <emphasis> inherit = "false"</emphasis>
      for the attribute, e.g. <emphasis> &lt;meta attribute = "scope-class" inherit =
        "false"&gt;public abstract&lt;/meta&gt;</emphasis> will restrict the <emphasis>
        <property>&quot;class-scope&quot;</property>
      </emphasis> to the current class, not the subclasses.</para>

    <section>
      <title>Recommendations</title>

      <para>The following are some good practices when using <emphasis>
          <property>&lt;meta&gt;</property>
        </emphasis> attributes.</para>

      <section>
        <title>Dangers of a class level <literal>use-in-string and use-in-equals</literal> meta
          attributes when having bi-directional associations</title>

        <para>If we have two entities with a bi-directional association between them and define at
          class scope level the meta attributes: <emphasis>
            <property>use-in-string</property>, </emphasis>
          <emphasis>
            <property>use-in-equals</property>: </emphasis></para>

        <programlisting role="XML"><![CDATA[<hibernate-mapping>
  <class name="Person">
    <meta attribute="use-in-tostring">true</meta>
    <meta attribute="use-in-equals">true</meta>
    ...
  </class>
</hibernate-mapping>]]></programlisting>

        <para>And for <emphasis>
            <property>Event.hbm</property>
          </emphasis> file:</para>

        <programlisting role="XML"><![CDATA[<hibernate-mapping>              
  <class name="events.Event" table="EVENTS">
    <meta attribute="use-in-tostring">true</meta>
    <meta attribute="use-in-equals">true</meta>                  
    <id name="id" column="EVENT_ID">
        <generator class="native"/>
    </id>
    <property name="date" type="timestamp" column="EVENT_DATE"/>
    <property name="title"/>
    <set name="participants" table="PERSON_EVENT" inverse="true">
        <key column="EVENT_ID"/>
        <many-to-many column="PERSON_ID" class="events.Person"/>
    </set>                    
  </class>
</hibernate-mapping>]]></programlisting>

        <para>Then <emphasis>
            <property>&lt;hbm2java&gt;</property>
          </emphasis> will assume you want to include all properties and collections in the
            <property>toString()/equals()</property> methods and this can result in infinite
          recursive calls.</para>

        <para>To remedy this you have to decide which side of the association will include the other
          part (if at all) in the <property>toString()/equals()</property> methods. Therefore it is
          not a good practice to put at class scope such <emphasis>
            <property>meta</property>
          </emphasis> attributes, unless you are defining a class without bi-directional
          associations.</para>

        <para>We recomend instead to add the <emphasis>
            <property>meta</property>
          </emphasis> attributes at the property level:</para>

        <programlisting role="XML"><![CDATA[<hibernate-mapping>             
  <class name="events.Event" table="EVENTS">                  
    <id name="id" column="EVENT_ID">
        <meta attribute="use-in-tostring">true</meta>
        <generator class="native"/>
    </id>
    <property name="date" type="timestamp" column="EVENT_DATE"/>
    <property name="title">
      <meta attribute="use-in-tostring">true</meta>
      <meta attribute="use-in-equals">true</meta>      
    </property>
    <set name="participants" table="PERSON_EVENT" inverse="true">
        <key column="EVENT_ID"/>
        <many-to-many column="PERSON_ID" class="events.Person"/>
    </set>                    
  </class>
</hibernate-mapping>]]></programlisting>

        <para>and now for <property>Person</property>:</para>

        <programlisting role="XML"><![CDATA[<hibernate-mapping>
    <class name="Person">
    <meta attribute="class-description">
        Javadoc for the Person class
        @author Frodo
    </meta>
    <meta attribute="implements">IAuditable</meta>
    <id name="id" type="long">
        <meta attribute="scope-set">protected</meta>
        <meta attribute="use-in-tostring">true</meta>        
        <generator class="increment"/>
    </id>
    <property name="name" type="string">
        <meta attribute="field-description">The name of the person</meta>
        <meta attribute="use-in-tostring">true</meta>
    </property>
  </class>
</hibernate-mapping>]]></programlisting>
      </section>

      <section>
        <title>Be aware of putting at class scope level <literal>&lt;meta&gt;</literal>
          attribute <literal>use-in-equals</literal></title>

        <para>For <property>equal()/hashCode()</property> method generation, you have to take into
          account that the attributes that participate on such method definition, should take into
          account only attributes with business meaning (the name, social security number, etc, but
          no generated id's, for example).</para>

        <para>This is important because Java's hashbased collections, such as
            <property>java.util.Set</property> relies on <property>equals()</property> and
            <property>hashcode()</property> to be correct and not change for objects in the set;
          this can be a problem if the id gets assigned for an object after you inserted it into a
          set.</para>

        <para>Therefore automatically configuration of the generation of
            <property>equals()/hashCode()</property> methods specifying at class scope level the <emphasis>
            <property>&lt;meta&gt;</property>
          </emphasis> attribute <emphasis>
            <property>use-in-equals</property>
          </emphasis> could be a dangerous decision that could produce non expected
          side-effect.</para>

        <para><ulink url="http://www.hibernate.org/109.html">Here</ulink> you can get more in-depth
          explanation on the subject of <property>equals()</property> and
            <property>hashcode()</property>.</para>
      </section>
    </section>

    <section>
      <title>Advanced &lt;meta&gt; attribute examples</title>

      <para>This section shows an example for using meta attributes (including userspecific
        attributes) together with the code generation features in <property>Hibernate
          Tools</property>.</para>

      <para>The usecase being implemented is to automatically insert some pre- and post-conditions
        into the getter and setters of the generated POJO. </para>

      <section>
        <title>Generate pre/post-conditions for methods</title>

        <para>With a <emphasis> &lt;meta attribute="class-code"&gt;</emphasis>, you can add
          additional methods on a given class, nevertheless such <emphasis>
            <property>&lt;meta&gt;</property>
          </emphasis> attribute can not be used at a property scope level and <property>Hibernate
            Tools</property> does not provide such <emphasis>
            <property>&lt;meta&gt;</property>
          </emphasis> attributes.</para>

        <para>A possible solution for this is to modify the freemarker templates responsible for
          generating the POJO's. If you look inside <emphasis>
            <property>hibernate-tools.jar</property>, </emphasis> you can find the template: <emphasis>
            <property>pojo/PojoPropertyAccessor.ftl</property>
          </emphasis></para>

        <para>This file is as the name indicates used to generate property accessors for
          pojo's.</para>

        <para>Extract the <emphasis>
            <property>PojoPropertyAccessor.ftl</property>
          </emphasis> into a local folder i.e. <emphasis>
            <property>${hbm.template.path}</property>, </emphasis> respecting the whole path, for
          example: <emphasis>
            <property>${hbm.template.path}/pojo/PojoPropertyAccessor.ftl</property>
          </emphasis></para>

        <para>The contents of the file is something like this:</para>

        <programlisting role="XML"><![CDATA[<#foreach property in pojo.getAllPropertiesIterator()>
    ${pojo.getPropertyGetModifiers(property)} 
    ${pojo.getJavaTypeName(property, jdk5)} 
    ${pojo.getGetterSignature(property)}() {
        return this.${property.name};
    }
    
    ${pojo.getPropertySetModifiers(property)} void set${pojo.getPropertyName(property)}
        (${pojo.getJavaTypeName(property, jdk5)} ${property.name}) 
    {
        this.${property.name} = ${property.name};
    }
</#foreach>]]></programlisting>

        <para>We can add conditionally pre/post-conditions on our <literal>set</literal> method
          generation just adding a little Freemarker syntax to the above source code:</para>

        <programlisting role="XML"><![CDATA[<#foreach property in pojo.getAllPropertiesIterator()>
    ${pojo.getPropertyGetModifiers(property)} 
    ${pojo.getJavaTypeName(property, jdk5)} 
    ${pojo.getGetterSignature(property)}()
    {
        return this.${property.name};
    }
    
    ${pojo.getPropertySetModifiers(property)} void set${pojo.getPropertyName(property)}
        (${pojo.getJavaTypeName(property, jdk5)} ${property.name}) 
        {
      <#if pojo.hasMetaAttribute(property, "pre-cond")> 
       ${c2j.getMetaAsString(property, "pre-cond","\n")} 
      </#if>      
      this.${property.name} = ${property.name};
      <#if pojo.hasMetaAttribute(property, "post-cond")> 
       ${c2j.getMetaAsString(property, "post-cond","\n")} 
      </#if>        
}
</#foreach>]]>
</programlisting>

        <para>Now if in any <emphasis>
            <property>.hbm.xml</property>
          </emphasis> file we define the <emphasis>
            <property>&lt;meta&gt;</property>
          </emphasis> attributes: <literal>pre-cond</literal> or <literal>post-cond</literal>, their
          contents will be generated into the body of the relevant <literal>set</literal>
          method.</para>

        <para>As an example let us add a pre-condition for property <literal>name</literal>
          preventing no <property>Person</property> can have an empty name. Hence we have to modify
          the <emphasis>
            <property>Person.hbm.xml</property>
          </emphasis> file like this:</para>

        <programlisting role="XML"><![CDATA[<hibernate-mapping>
  <class name="Person">
  <id name="id" type="long">        
      <generator class="increment"/>
  </id>
  <property name="firstName" type="string">
      <meta attribute="pre-cond">
      if ((firstName != null) &amp;&amp; (firstName.length() == 0) ) {
        throw new IllegalArgumentException("firstName can not be an empty String");
      }
      </meta>
  </property>
</class>
</hibernate-mapping>]]></programlisting>

        <note>
          <title>Note:</title>
          <para>I) To escape the &amp; symbol we put &amp;amp;. You can use
            &lt;![CDATA[]]&gt; instead.</para>
          <para>II) Note that we are referring to "firstName" directly and this is the parameter
            name not the actual field name. If you want to refer the field you have to use
            "this.firstName" instead. </para>
        </note>

        <para>Finally we have to generate the <emphasis>
            <property>Person.java</property>
          </emphasis> class, for this we can use both Eclipse and Ant as long as you remember to set
          or fill in the templatepath setting. For Ant we configure <emphasis>
            <property>&lt;hibernatetool&gt;</property>
          </emphasis> task via <literal>the templatepath</literal> attribute as in:</para>

        <programlisting role="XML"><![CDATA[
    <target name="hbm2java">
        <taskdef name="hibernatetool"
          classname="org.hibernate.tool.ant.HibernateToolTask"
          classpathref="lib.classpath"/>
        <hibernatetool destdir="${hbm2java.dest.dir}"
          templatepath="${hbm.template.path}">
          <classpath>
            <path refid="pojo.classpath"/>
          </classpath>        
          <configuration>
            <fileset dir="${hbm2java.src.dir}">
              <include name="**/*.hbm.xml"/>
            </fileset>
          </configuration>
          <hbm2java/>
        </hibernatetool>
    </target>]]></programlisting>

        <para>Invoking the target <emphasis>
            <property>&lt;hbm2java&gt;</property>
          </emphasis> will generate on the <emphasis>
            <property>${hbm2java.dest.dir}</property>
          </emphasis> the file <emphasis>
            <property>Person.java</property>
          </emphasis>:</para>

        <programlisting role="JAVA"><![CDATA[// default package
import java.io.Serializable;
public class Person implements Serializable {

    public Long id;

    public String name;

    public Person(java.lang.String name) {
        this.name = name;
    }

    public Person() {
    }

    public java.lang.Long getId() {
        return this.id;
    }

    public void setId(java.lang.Long id) {
        this.id = id;
    }
    
    public java.lang.String getName() {
        return this.name;
    }

    public void setName(java.lang.String name) {
        if ((name != null) &amp;&amp; (name.length() == 0)) {
            throw new IllegalArgumentException("name can not be an empty String");
        }
        this.name = name;
    }
    }]]></programlisting>

        <para>In conclusion, this document is intended to introduce you to Hibernate plugin specific
          features related to tools bath for the Eclipse and Ant tasks.</para>

        <para>In the <link linkend="plugins">Eclipse Plugins</link> chapter you&apos;ve learnt
          about a set of wizards for creating Mapping files, Configuration file, Console
          Configuration, got familiar with Mapping and Configuration files editors, tooling for
          organizing and controlling Reverse Engineering, Hibernate Console and Mapping diagram as
          well.</para>

        <para>The rest chapters have shown the aspects of using the <property>Hibernate
            Tools</property> via Ant tasks.</para>

        <para>Please, visit <ulink
            url="http://www.jboss.com/index.html?module=bb&amp;op=viewforum&amp;f=201">JBoss
            Tools Users Forum</ulink> to leave questions or/and suggestions on the topic. Your
          feedback is always appreciated.</para>
      </section>
    </section>

  </section>

</chapter>
