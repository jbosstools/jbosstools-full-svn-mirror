<?xml version="1.0" encoding="UTF-8"?>
<chapter id="codegenarchitecture">
	<title>Code generation architecture</title>

	<para>
		The code generation mechanism in <productname>Hibernate Tools</productname> consists of a few core concepts. This section explains their overall structure, which are the same for the Ant and Eclipse tools.
	</para>

	<section>
		<title>Hibernate Meta Model</title>

		<para>
			The meta model is the model used by <productname>Hibernate Core</productname> to perform its object relational mapping. The model includes information about tables, columns, classes, properties, components, values, collections etc. The API is in <code>org.hibernate.mapping</code> and its main entry point is the <code>Configuration</code> class, the same class that is used to build a session factory.
		</para>

		<para>
			The model represented by the <code>Configuration</code> class can be built in many ways. The following list the currently supported ones in <productname>Hibernate Tools</productname>.
		</para>

		<para>
			<itemizedlist>
				<listitem>
					<para>
						A Core configuration uses <productname>Hibernate Core</productname> and supports reading <filename>hbm.xml</filename> files, requires a <filename>hibernate.cfg.xml</filename> file. This is referred to as <productname>core</productname> in Eclipse and <code>&lt;configuration&gt;</code> in Ant.
					</para>
				</listitem>

				<listitem>
					<para>
						An Annotation configuration uses <productname>Hibernate Annotations</productname> and supports <filename>hbm.xml</filename> files and annotated classes, and requires a <filename>hibernate.cfg.xml</filename> file. This is referred to as <productname>annotations</productname> in Eclipse and <code>&lt;annotationconfiguration&gt;</code> in Ant.</para>
				</listitem>

				<listitem>
					<para>
						A JPA configuration uses a <productname>Hibernate EntityManager</productname> and supports <filename>hbm.xml</filename> files and annotated classes, and requires that the project has a <filename>META-INF/persistence.xml</filename> file in its classpath. This is referred to as <productname>JPA</productname> in Eclipse and <code>&lt;jpaconfiguration&gt;</code> in Ant.</para>
				</listitem>

				<listitem>
					<para>
						A JDBC configuration uses <property>Hibernate Tools</property> reverse engineering and reads its mappings via JDBC metadata + additional reverse engineering files (<filename>reveng.xml</filename>). Automatically used in Eclipse when doing reverse engineering from JDBC and referred to as <code>&lt;jdbcconfiguration&gt;</code> in Ant.</para>
				</listitem>
			</itemizedlist>
		</para>

		<para>
			In most projects you will normally use only one of the Core, Annotation or JPA configuration and possibly the JDBC configuration if you are using the reverse engineering facilities of <productname>Hibernate Tools</productname>. 
		</para>

		<note>
			<title>Note:</title>
			<para>No matter which Hibernate Configuration type you are using <productname>Hibernate Tools</productname> supports them.</para>
		</note>

		<para>The following drawing illustrates the core concepts:</para>

		<para>
			<figure>
				<title>Hibernate Core Concepts</title>
				<mediaobject>
					<imageobject role="fo">
						<imagedata fileref="images/code_generation/code_generation_1.png" format="PNG"/>
					</imageobject>

					<imageobject role="html">

						<imagedata align="center" fileref="images/code_generation/code_generation_1.png" format="PNG"/>
					</imageobject>
				</mediaobject>
			</figure>
		</para>

		<para>
			The code generation is done based on the Configuration model no matter which type of configuration have been used to create the meta model, and thus the code generation is independent on the source of the meta model and represented via Exporters.
		</para>
	</section>

	<section>
		<title>Exporters</title>

		<para>
			Code generation is done in so called Exporters. An <code>Exporter</code> is handed a Hibernate Meta Model represented as a <code>Configuration</code> instance and it is then the job of the exporter to generate a set of code artifacts.
		</para>

		<para>
			The tools provides a default set of Exporter's which can be used in both Ant and the Eclipse UI. Documentation for these Exporters is in the <xref linkend="ant"/> and <xref linkend="plugins"/> sections.
		</para>

		<para>
			Users can provide their own customer Exporter's, either by custom classes implementing the Exporter interface or simply be providing custom templates. This is documented at in the <xref linkend="hbmtemplate"/> section.
		</para>
	</section>
</chapter>
