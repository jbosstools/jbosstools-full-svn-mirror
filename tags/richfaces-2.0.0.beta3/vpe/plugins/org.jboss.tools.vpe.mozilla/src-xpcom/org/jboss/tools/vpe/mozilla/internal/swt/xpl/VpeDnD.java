/*
 * ************* DO NOT EDIT THIS FILE ***********
 *
 * This file was automatically generated from VpeDnD.idl.
 */

/*
 * author Sergey Vasilyev
 */
package org.jboss.tools.vpe.mozilla.internal.swt.xpl;

import org.eclipse.swt.graphics.Rectangle;
import org.jboss.tools.vpe.mozilla.internal.swt.xpl.XPCOMObject;

/**
 * 
 * IID: 0xA5EA4500-600F-4716-A17D-827EEF6BD126
 */

public class VpeDnD extends nsISupports
{
	static final int LAST_METHOD_ID = nsISupports.LAST_METHOD_ID + 3;

    public static final String VPE_DND_IID_STRING =
        "A5EA4500-600F-4716-A17D-827EEF6BD126";

    public static final nsID VPE_DND_IID =
        new nsID("A5EA4500-600F-4716-A17D-827EEF6BD126");

    private nsString pathSeparator;
    private nsString moveCursor;

    public VpeDnD(int address) {
		super(address);
    	pathSeparator = new nsString(System.getProperty("path.separator"));
    	moveCursor = new nsString("move");
	}

	/* void Init (in nsIDOMDocument aDOMDocument, in nsIPresShell aPresShell, in IVpeDropListener aListener); */
    private int init(int aDOMDocument, int aPresShell, int aListener) {
		return XPCOM.VtblCall(super.LAST_METHOD_ID + 1, getAddress(), aDOMDocument,
				aPresShell, aListener, pathSeparator.getAddress() );
    }

	/* void GetBounds(in nsIDOMNode aNode, out PRInt32 aX,	out PRInt32 aY, out PRInt32 aWidth,	out PRInt32 aHeight); */
    private int GetBounds(int aNode, int[] aX, int[] aY, int[] aWidth, int[] aHeight) {
		return XPCOM.VtblCall(super.LAST_METHOD_ID + 2, getAddress(), aNode, aX, aY, aWidth, aHeight);
	}

	/* void SetCursor(in AString aCursorName, in PRInt32 aLock); */
	private int setCursor(int aCursorName, int aLock) {
		return XPCOM.VtblCall(super.LAST_METHOD_ID + 3, getAddress(), aCursorName, aLock);
	}
    
	/* void Init (in nsIDOMDocument aDOMDocument, in nsIPresShell aPresShell, in IVpeDropListener aListener); */
    public void Init(nsIDOMDocument aDOMDocument, nsIPresShell aPresShell, XPCOMObject aListener) {
		int rc = init(aDOMDocument.getAddress(), aPresShell.getAddress(), aListener.getAddress());
		if (rc != XPCOM.NS_OK) {
			error(rc);
		}
    }

	//=========================================================================

	public Rectangle getBounds(nsIDOMNode node) {
		int[] aX = new int[] {0};
		int[] aY = new int[] {0};
		int[] aWidth = new int[] {0};
		int[] aHeight = new int[] {0};
		int rc = GetBounds(node.getAddress(), aX, aY, aWidth, aHeight);
		if (rc != XPCOM.NS_OK) error(rc);
		return new Rectangle(aX[0], aY[0], aWidth[0], aHeight[0]);
	}

	public void setMoveCursor() {
		int rv = setCursor(moveCursor.getAddress(), 0);
		if (rv != XPCOM.NS_OK) {
			error(rv);
		}
	}

	public void _setMoveCursor() {
		nsString cursor = new nsString("move");
		int rv = setCursor(cursor.getAddress(), 0);
		cursor.dispose();
		if (rv != XPCOM.NS_OK) {
			error(rv);
		}
	}
	
	/**
	 * Set mouse pointer
	 * @param aCursorName - mouse pointer name, "move" for example 
	 * @param aLock - lock mouse pointer or not, (1 or 0)
	 */
	public void SetCursor(String aCursorName, int aLock) {
		nsString cursor = new nsString(aCursorName);
		int rv = setCursor(cursor.getAddress(), aLock);
		cursor.dispose();
		if (rv != XPCOM.NS_OK) {
			error(rv);
		}
	}
}

/*
 * end
 */
