<project default="install">
	<target name="help">
		<echo>
		REQUIRMENTS:
		
		This script requires Ant-Contrib. If missing, it will attempt to download 
		it from Sourceforge.net for you into this folder.
		
		COMMANDLINE PARAMS:
		
		install   - csv list of features to install; if missing, install ALL found features.
		
		sourceZip - /full/path/to/jboss-tools-update.zip; zip must exist
		
		targetDir - /full/path/to/an/existing/jbdevstudio/eclipse; folder must exist
		
		OPTIONAL / MAY BE REQUIRED:
		
		otherRepos - csv list of local, zipped, or remote update sites from which to install 
			prereqs (eg., BIRT, Maven); may want these sites: 
			http://download.jboss.org/jbosstools/updates/target-platform/latest/
			http://download.eclipse.org/releases/helios/,\
			http://download.eclipse.org//birt/update-site/2.6/,\
			http://m2eclipse.sonatype.org/sites/m2e/,\
			http://m2eclipse.sonatype.org/sites/m2e-extras/,\
			http://subclipse.tigris.org/update_1.6.x
			
		RUNNING THIS SCRIPT:
		
		/path/to/eclipse-dir/eclipse -consolelog -nosplash -data /tmp \
      		-application org.eclipse.ant.core.antRunner \
      		-f /path/to/installJBossTools.xml \
      			-DotherRepos=http://download.jboss.org/jbosstools/updates/target-platform/latest/
			-DsourceZip=/path/to/JBossTools-Update-3.1.0.v200909102049M-H274-M3.zip \
			-DtargetDir=/path/to/eclipse-dir \
			-Dinstall=org.jboss.tools.jmx.sdk.feature.feature.group
</echo>
	</target>

	<property name="install" value="" />
	<property name="otherRepos" value="" />

	<property name="sourceZip" value="" />
	<property name="targetDir" value="" />

	<target name="install" depends="init">
		<if>
			<or>
				<not>
					<isset property="targetDir" />
				</not>
				<equals arg1="${targetDir}" arg2="" />
				<not>
					<available file="${targetDir}" type="dir" />
				</not>
			</or>
			<then>
				<fail>
ERROR!
Must specify path to an existing Eclipse or JBoss Developer Studio  
install folder into which features will be installed.
</fail>
			</then>
		</if>

		<if>
			<or>
				<not>
					<isset property="sourceZip" />
				</not>
				<equals arg1="${sourceZip}" arg2="" />
			</or>
			<then>
				<fail>
ERROR!
Must specify path to a previously downloaded JBoss Tools 
or JBoss Developer Studio Update site zip.  
</fail>
			</then>
		</if>

		<if>
			<not>
				<available file="${sourceZip}" type="file" />
			</not>
			<then>
				<fail>ERROR!
Cannot find sourceZip in ${sourceZip}. 
</fail>
			</then>
		</if>

		<if>
			<or>
				<not>
					<isset property="install" />
				</not>
				<equals arg1="${install}" arg2="" />
			</or>
			<then>
				<!-- for update site zips, dest must be ${temp.dir}/eclipse; for SDKs, ${temp.dir} -->
				<tempfile property="temp.dir" />
				<mkdir dir="${temp.dir}/eclipse" />
				<unzip src="${sourceZip}" dest="${temp.dir}/eclipse" overwrite="false" />

				<!-- collect features to install if not specified -->
				<var name="install" value="" />
				<for param="featureJar">
					<path>
						<fileset dir="${temp.dir}/eclipse/features" includes="*.jar" />
					</path>
					<sequential>
						<var name="feature.jarfile" unset="true" />
						<var name="feature.id" unset="true" />
						<propertyregex property="feature.jarfile"
						               defaultvalue="@{featureJar}"
						               input="@{featureJar}"
						               regexp=".+/features/([^/]+\.jar)"
						               replace="\1"
						               override="true"
						/>
						<propertyregex property="feature.id"
						               defaultvalue="${feature.jarfile}"
						               input="${feature.jarfile}"
						               regexp="([^_]+)_(\d+\.\d+\.\d+\..+)\.jar"
						               replace="\1"
						               override="true"
						/>
						<propertyregex property="feature.id"
						               defaultvalue="${feature.id}"
						               input="${feature.id}"
						               regexp="([^_]+)_(\d+\.\d+\.\d+)\.jar"
						               replace="\1"
						               override="true"
						/>
						<var name="install" value="${install},${feature.id}.feature.group" />
						<var name="feature.jarfile" unset="true" />
						<var name="feature.id" unset="true" />
					</sequential>
				</for>
				<!-- trim prefix "," -->
				<propertyregex property="install" input="${install}" defaultvalue="${install}" regexp=",(.+)" replace="\1" override="true" />
				<delete dir="${temp.dir}" />
			</then>
		</if>

		<if>
			<and>
				<isset property="otherRepos" />
				<not>
					<equals arg1="${otherRepos}" arg2="" />
				</not>
			</and>
			<then>
				<var name="p2.director.input.repo" value="jar:file:${sourceZip}!/,${otherRepos}" />
			</then>
			<else>
				<var name="p2.director.input.repo" value="jar:file:${sourceZip}!/" />
			</else>
		</if>


		<antcall target="run.director">
			<param name="p2.director.installIU" value="${install}" />
			<param name="p2.director.install.path" value="${targetDir}" />
			<param name="p2.director.input.repo" value="${p2.director.input.repo}" />
		</antcall>

	</target>

	<target name="run.director">
		<property name="p2.director.extraArgs" value="" />
		<property name="p2.director.installIU" value="${install}" />
		<property name="p2.director.install.path" value="${targetDir}" />
		<property name="p2.director.input.repo" value="jar:file:${sourceZip}!/" />
		<echo>
Source Repo(s): ${p2.director.input.repo}
Install Path: ${p2.director.install.path}
Feature(s) or Plugin(s) to Install:
${install}
 </echo>

		<mkdir dir="${p2.director.install.path}" />
		<chmod perm="ugo+rwx" file="${p2.director.install.path}/eclipse" />
		<exec executable="${p2.director.install.path}/eclipse"
		      failonerror="true"
		      dir="${p2.director.install.path}"
		      timeout="1200000"
		      taskname="p2.dir"
		>
			<!-- deprecated application for Eclipse 3.4: org.eclipse.equinox.p2.director.app.application -->
			<arg line=" -application org.eclipse.equinox.p2.director" />
			<arg line=" -nosplash" />
			<arg line=" --launcher.suppressErrors" />
			<arg line=" -consoleLog" />
			<arg line=" -flavor tooling" />
			<arg line=" -roaming" />
			<arg line=" -profile SDKProfile" />
			<arg line=" -destination ${p2.director.install.path}" />
			<arg line=" -bundlepool ${p2.director.install.path}" />
			<arg line=" -installIU ${p2.director.installIU}" />
			<arg line=" -metadataRepository ${p2.director.input.repo},file:${p2.director.install.path}/p2/org.eclipse.equinox.p2.engine/profileRegistry/SDKProfile.profile"
			/>
			<arg line=" -artifactRepository ${p2.director.input.repo},file:${p2.director.install.path}" />
			<arg line=" -profileProperties org.eclipse.update.install.features=true" />
			<arg line=" -vmargs" />
			<arg line=" -Declipse.p2.data.area=${p2.director.install.path}/p2" />
			<arg line=" -Declipse.p2.MD5Check=false" />
		</exec>
	</target>

	<target name="check.ant-contrib" if="antContribJarUnavailable">
		<antcall target="get.ant-contrib" />
		<available file="ant-contrib.jar" property="antContribJarAvailable" />
		<fail unless="antContribJarAvailable">Error! 

Ant-Contrib 1.0b2 is required. Download it from http://downloads.sourceforge.net/ant-contrib/ant-contrib-1.0b2-bin.zip,
then place it in one of the following 4 locations. You can also redefine these paths in your build.properties file:

./ant-contrib.jar
  or
/usr/share/java/ant-contrib.jar
</fail>
	</target>

	<target name="get.ant-contrib">
		<get src="http://downloads.sourceforge.net/ant-contrib/ant-contrib-1.0b2-bin.zip" dest="/tmp/ant-contrib-1.0b2-bin.zip" usetimestamp="true" />
		<touch file="/tmp/ant-contrib-1.0b2-bin.zip" />
		<unzip src="${downloadsDir}/ant-contrib-1.0b2-bin.zip" dest="/tmp/ant-contrib-1.0b2-bin.zip_" overwrite="true" />
		<copy file="/tmp/ant-contrib-1.0b2-bin.zip_/ant-contrib/lib/ant-contrib.jar" tofile="./ant-contrib.jar" failonerror="true" />
		<delete dir="/tmp/ant-contrib-1.0b2-bin.zip_" includeemptydirs="true" quiet="true" />
		<delete file="/tmp/ant-contrib-1.0b2-bin.zip" quiet="true" />
	</target>

	<target name="init">
		<condition property="antContribJarUnavailable">
			<not>
				<or>
					<available file="/usr/share/java/ant-contrib.jar" type="file" />
					<available file="../lib/ant-contrib.jar" type="file" />
					<available file="./ant-contrib.jar" type="file" />
				</or>
			</not>
		</condition>
		<antcall target="check.ant-contrib" />
		<!-- This will fail if ant-contrib.jar cannot be found. You can install Ant-Contrib via RPM, or download it here:
			http://downloads.sourceforge.net/ant-contrib/ant-contrib-1.0b2-bin.zip
	-->
		<taskdef resource="net/sf/antcontrib/antlib.xml">
			<classpath>
				<pathelement location="/usr/share/java/ant-contrib.jar" />
				<pathelement location="../lib/ant-contrib.jar" />
				<pathelement location="./ant-contrib.jar" />
			</classpath>
		</taskdef>

	</target>

</project>
