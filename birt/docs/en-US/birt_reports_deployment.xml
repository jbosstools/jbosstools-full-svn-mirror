<?xml version='1.0' encoding='UTF-8'?>
<section id="birt_reports_deployment">
	<title>Creating a Dynamic BIRT Report</title>

	<para>
		<xref linkend="birt_integration_with_seam"/> and <xref linkend="hibernate_datasource"/> describe how to integrate a BIRT report into a Seam web project and how to use Hibernate data source to generate a dynamic report. In this section we will create a Seam web project that can make a dynamic report using the parameters that are defined on a web page.
    	</para>


	<para>
  		We will use the <emphasis>PRODUCTS</emphasis> table of <emphasis>DATAMODELS</emphasis> database for the purpose of this demo project. The demo application will generate a report about the company's products, and allow the user to specify a product line. To begin with, we need to generate Seam entities like we did in the previous <xref linkend="hibernate_datasource"/>. 
  </para>

	<orderedlist>
		<listitem>
			<para>
				The next step is to create a Java class that will store the <code>sortOrder</code> variable and its assessors, and register the class in the <filename>faces.config.xml</filename> file. The variable will be required to pass dynamic data to the report via report parameters; therefore it has to be of session scope.
			</para>
		</listitem>

		<listitem>
			<para>
				The report will print the data from the <emphasis>Products</emphasis> table. Create a new report file file called <filename>ProductsReport.rptdesign</filename> in the <filename>WebContent</filename> folder. You can use either the <property>BIRT JDBC Data Source</property> or <property>Hibernate Data Source</property> data source to create the  data set for this project. If you want to use the latter please read the previous <xref linkend="hibernate_datasource"/>.
			</para>
    
			<para>
      		The data set should have at least the following data set items: product vendor, product name, quantity in stock and buy price. The data is retrieved from the database with this query :
      </para>
    

			<programlisting role="XML"><![CDATA[SELECT productvendor, productname, quantityinstock, buyprice 
FROM Products as products]]></programlisting>
		</listitem>
		<listitem>
			<para>Make a table in the report and put each data set item into a column.</para>
		</listitem>
		<listitem>
			<para>As it was stated in the beginning of the chapter the report will be dynamic, therefore you need to declare a report parameter first, let it be <code>sortOrder</code> and to add the parameter to the query. 
			</para>
			<figure>
				<title>Report Parameter</title>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/birt_reports_deployment/reportParameter.png"/>
					</imageobject>
				</mediaobject>
			</figure>
			<para>
			BIRT offers rich JavaScript API, so you can modify the query programmatically like this:</para>
			<programlisting role="XML">

&lt;xml-property name=&quot;queryText&quot;&gt;&lt;![CDATA[
SELECT  productvedor,
productname,
quantityinstock,
buyprice
FROM Products as products 
]]&gt;&lt;/xml-property&gt;
    &lt;method name=&quot;beforeOpen&quot;&gt;&lt;![CDATA[
queryString = " ORDER BY products."+reportContext.getParameterValue("sortOrder")+" "+"DESC";
this.queryText = this.queryText+queryString;
]]&gt;&lt;/method&gt;
    
</programlisting>
		</listitem>
		<listitem>
			<para>The report is ready. You can preview it to make sure it works properly. </para>
		</listitem>
		<listitem>
			<para>
				Create a JavaBean class called <code>ReportJB</code>, and populate it with the following code.
			</para>
			<programlisting role="Java">
import java.io.Serializable;

import org.jboss.seam.ScopeType;
import org.jboss.seam.annotations.Name;
import org.jboss.seam.annotations.Scope;

@Name("ReportJB")
@Scope(ScopeType.SESSION)
public class ReportJB implements Serializable 
{
	private static final long serialVersionUID = 1L;
	protected String sortOrder = "buyprice";
	
	public String getSortOrder()
	{
		return sortOrder;
	}
	
	public void setSortOrder(String value)
	{
		sortOrder = value;
	}
	
	public ReportJB() 
	{
		
	}
}
</programlisting>
		</listitem>
		<listitem>
			<para>To set the report parameter you should create an <filename>XHTML</filename> view page, call it <filename>ProductForm.xhtml</filename>, and place it in the <filename>WebContent</filename> folder. On the page you can set the value of the <code>sortOrder</code> Java bean variable and press the <guibutton>Generate Report</guibutton> button to open another view page that will display the resulted report.
        </para>
    

			<para>The source code of the  <filename>ProductForm.xhtml</filename> should be the following:</para>

			<programlisting role="XML"><![CDATA[
<!DOCTYPE composition PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<ui:composition xmlns="http://www.w3.org/1999/xhtml"
	xmlns:s="http://jboss.com/products/seam/taglib"
	xmlns:ui="http://java.sun.com/jsf/facelets"
	xmlns:h="http://java.sun.com/jsf/html"
	xmlns:f="http://java.sun.com/jsf/core"
	xmlns:rich="http://richfaces.org/rich"
	xmlns:a4j="http://richfaces.org/a4j" template="layout/template.xhtml">
	<ui:define name="body">
		<rich:panel>
			<f:facet name="header">BIRT Report Generator</f:facet>
			<a4j:form ajaxSubmit="true" reRender="criterion"> 
				<table>
					<tr>
						<td>Select sort order criterion:</td>
						<td><h:selectOneMenu onchange="submit()"
							value="#{ReportJB.sortOrder}"> <!-- Bind to your Java Bean -->
							<f:selectItem itemValue="buyprice" itemLabel="buy price" />
							<f:selectItem itemValue="quantityinstock" itemLabel="quantity in stock" />
						</h:selectOneMenu>
						</td>
					</tr>
				</table>		
				</a4j:form>
			<s:button
				view="/#{!empty reportParameters.order ? 'Products' : 'ProductsReport'}.xhtml" id="generate" value="Generate Report" /> <!-- If the sertOrder variable is not set the button won't work -->
		</rich:panel>
	</ui:define>
</ui:composition>       
]]></programlisting>
			<para>
				The logic of the file is quite simple: when the sort order criterion is selected the value of <code>yourJavaBean.sortOrder</code> is set automatically via Ajax, and the report is ready to be generated.
			</para>
		</listitem>
		<listitem>
			<para>Now you need to create the web page that will print the report, name the file <filename>ProductsReport.xhtml</filename>.
        The file to output the report should have the following content:</para>

			<programlisting role="XML"><![CDATA[
<!DOCTYPE composition PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<ui:composition xmlns="http://www.w3.org/1999/xhtml"
	xmlns:s="http://jboss.com/products/seam/taglib"
	xmlns:ui="http://java.sun.com/jsf/facelets"
	xmlns:f="http://java.sun.com/jsf/core"
	xmlns:h="http://java.sun.com/jsf/html"
	xmlns:b="http://jboss.com/products/seam/birt"
	xmlns:rich="http://richfaces.org/rich" template="layout/template.xhtml">
	<ui:define name="body">
		<rich:panel>
			<f:facet name="header">Products Report</f:facet>
			<b:birt designType="embed" designName="products.rptdesign"
				embeddable="true" masterpage="true">
				<b:param name="sortOrder" value="#{ReportJB.sortOrder}" />
			</b:birt>
		</rich:panel>
</ui:define>
</ui:composition>
]]></programlisting>

		<para>
    	As you know from <xref linkend="birt_integration_with_seam"/>, before using the BIRT Integration framework tags on the page you need to declare the tag library and specify the name space with this line:
    </para>

			<programlisting role="XML"><![CDATA[
	xmlns:b="http://jboss.com/products/seam/birt"
]]></programlisting>
			<para>
 The dynamics to the report adds this line:     
  </para>
			<programlisting role="XML"><![CDATA[
<b:param name="sortOrder" value="#{yourJavaBean.sortOrder}" />
]]></programlisting>

			<para>We bound the <code>sortOrder</code> report parameter to Java Bean variable <code>value=&quot;#{ReportJB.sortOrder}&quot;</code> using EL expression, and the value to the variable is assigned in the <property>Products.xhtml</property> file. </para>
			<para>By default if you embed a report into HTML page the HTML-format report contains  the &lt;html&gt;,
        &lt;head&gt;, &lt;body&gt; etc., tags. However if your HTML page already has those tags, you can rid of them using the <code>embeddable=&quot;true&quot;</code> attribute of 
       
       the <emphasis role="bold"><property>&lt;b:birt&gt;</property>
				</emphasis>  component.</para>
		</listitem>
		<listitem>
			<para>Deploy the project onto the server and open your browser to see the report is successfully generated. You should navigate to 
   
       <ulink url="http://localhost:8080/yourProjectName/ProductForm.seam">http://localhost:8080/yourProjectName/ProductForm.seam</ulink> to select the criterion and press the <property>Generate Report</property> button. You will be redirected to the  <ulink url="http://localhost:8080/HelloBirt/ProductsReport.seam">http://localhost:8080/HelloBirt/ProductsReport.seam</ulink>

			</para>
			<figure>
				<title>Dynamic Report</title>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/birt_reports_deployment/productReport.png"/>
					</imageobject>
				</mediaobject>
			</figure>
		</listitem>
	</orderedlist>
	<para>Thus, a Seam project that includes the BIRT facet can be deployed as any project. If you
        define the Hibernate ODA driver, the JBoss BIRT engine will use JNDI URL that has to be bound
        to either Hibernate Session Factory or Hibernate Entity Manager Factory. If you
        don&apos;t specify the JNDI URL property, our engine will try the following JNDI
        URLs:</para>
	<itemizedlist>
		<listitem>
			<para>
				<emphasis>java:/&lt;project_name&gt;</emphasis>
			</para>
		</listitem>
		<listitem>
			<para>
				<emphasis>java:/&lt;project_name&gt;EntityManagerFactory</emphasis>
			</para>
		</listitem>
	</itemizedlist>

	<para>When creating a Seam EAR project, Hibernate Entity Manager Factory is bound to
            <emphasis>java:/{projectName}EntityManagerFactory</emphasis>. All you need to do is
        to use the Hibernate Configuration created automatically. You can use default values for the
        Hibernate Configuration and JNDI URL within the BIRT Hibernate Data Source.</para>

	<para>When using a Seam WAR project, neither HSF nor HEMF aren&apos;t bound to JNDI by
        default. You have to do this manually. For instance, HSF can be bound to JNDI by adding the
        following property to the <emphasis>
            <property>persistence.xml</property>
		</emphasis> file:</para>

	<programlisting role="XHTML"><![CDATA[<property name="hibernate.session_factory_name" value="java:/projectname"/>
    ]]></programlisting>

	<para>And you can use <emphasis>java:/projectname</emphasis> as the JNDI URL property when creating a BIRT
        Hibernate Data Source.</para>

	<note>
		<title>Note:</title>
		<para>If you want to test this feature using PDE Runtime, you need to add <emphasis>
                <property>osgi.dev=bin</property>
			</emphasis> to the <emphasis>
                <property>WebContent/WEB-INF/platform/configuration/config.ini</property>
			</emphasis> file.</para>
	</note>

	<para>In conclusion, the main goal of this document is to get you to know with a full feature set
        that <property>JBoss BIRT Tools</property> provide. Thus if you have some questions,
        comments or suggestions on the topic, please feel free to ask in the <ulink url="http://www.jboss.org/index.html?module=bb&amp;op=viewforum&amp;f=201">JBoss
            Tools Forum</ulink>. You can also influence on how you want to see JBoss Tools docs in
        future leaving your vote on the article <ulink url="http://www.jboss.org/community/docs/DOC-10795">Overview of the improvements required by JBossTools/JBDS Docs users</ulink>.</para>

</section>
