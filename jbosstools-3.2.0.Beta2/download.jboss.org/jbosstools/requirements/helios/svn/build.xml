<project default="partial.repo.mirror" name="partial.repo.mirror">

	<!-- 	Run this script as nboldt@qa01.qa.atl2.redhat.com to fetch a number of 
		features from a remote repo and mirror them locally, then zip the result.
	
		~/eclipse/eclipse -vm /opt/jdk1.6.0-beta/bin/java -nosplash -data /tmp/workspace \
		-consolelog -application org.eclipse.ant.core.antRunner -f build.xml
	-->
	<property name="working.dir" value="${java.io.tmpdir}/partial-repo-mirror" />

	<!-- 
		use followStrict="true" to prevent downloading all requirements not included in the IU list below 
		or followStrict="false" to produce two zips: one with everything and one with just the specified IUs 
	-->
	<property name="followStrict" value="true" />

	<property name="output.zip" value="${basedir}/Subversive-SVNKit-Update" />

	<target name="partial.repo.mirror" depends="init">
		<if>
			<not>
				<available file="${working.dir}" type="dir" />
			</not>
			<then>
				<echo>Fetch SVN features and plugins from repos</echo>
				<mkdir dir="${working.dir}" />
				<p2.mirror destination="file:/${working.dir}" description="Subversive All-In-One Repo">
					<source>
						<repository location="http://eclipse.svnkit.com/1.3.x/" />
						<repository location="http://www.polarion.org/projects/subversive/download/eclipse/2.0/update-site/" />
						<repository location="http://download.eclipse.org/technology/subversive/0.7/update-site/" />
						<repository location="http://download.eclipse.org/rt/ecf/3.2/3.6/site.p2" />
						<repository location="http://download.eclipse.org/releases/helios/" />
					</source>
					<iu id="org.tmatesoft.svnkit.feature.group" />
					<iu id="com.sun.jna.feature.group" />

					<iu id="org.polarion.eclipse.team.svn.connector.feature.group" />
					<iu id="org.polarion.eclipse.team.svn.connector.svnkit16.feature.group" />

					<iu id="org.eclipse.team.svn.resource.ignore.rules.jdt.feature.group" />
					<iu id="org.eclipse.team.svn.feature.group" />

					<iu id="org.eclipse.ecf" />
					<iu id="org.eclipse.ecf.filetransfer" />
					<iu id="org.eclipse.ecf.identity" />
					<iu id="org.eclipse.ecf.provider.filetransfer" />
					<iu id="org.eclipse.ecf.provider.filetransfer.httpclient" />
					<iu id="org.eclipse.ecf.provider.filetransfer.httpclient.ssl" />
					<iu id="org.eclipse.ecf.provider.filetransfer.ssl" />
					<iu id="org.eclipse.ecf.ssl" />

					<slicingOptions includeFeatures="true" followStrict="${followStrict}" />
				</p2.mirror>
			</then>
		</if>

		<if>
			<equals arg1="${followStrict}" arg2="false" />
			<then>
				<echo>Filter SVN features and plugins from complete mirror to extract subset</echo>
				<mkdir dir="${working.dir}2" />
				<copy todir="${working.dir}2">
					<fileset dir="${working.dir}"
					         includes="
						**/*svn*.jar*, 
						**/*jna*.jar*,
						**/org.eclipse.ecf*filetransfer*.jar*, 
						**/org.eclipse.ecf.identity_*.jar*,
						**/org.eclipse.ecf*ssl_*.jar*,
						**/org.eclipse.ecf_*.jar*"
					/>
				</copy>
				<delete file="${working.dir}2/content.jar" quiet="true" />
				<delete file="${working.dir}2/artifacts.jar" quiet="true" />
				<property name="updateSiteJarDir" value="${working.dir}2" />
			</then>
			<else>
				<property name="updateSiteJarDir" value="${working.dir}" />
			</else>
		</if>
		<!-- generate site.xml -->
		<antcall target="buildSiteXml" />
		<!-- TODO: switch to use Publisher: http://wiki.eclipse.org/Equinox/p2/Publisher#Features_and_Bundles_Publisher_Task
		
		<p2.publish.featuresAndBundles
    metadataRepository="file:/repository/location"
    artifactRepository="file:/repository/location"
    publishArtifacts="true"
    compress="true"
    source="/bundles/and/features/location/">
    	-->

		<!-- generate metadata -->
		<java classname="org.eclipse.equinox.launcher.Main"
		      fork="true"
		      timeout="10800000"
		      jvm="${java.home}/bin/java"
		      failonerror="false"
		      maxmemory="512m"
		      taskname="p2"
		>
			<classpath>
				<fileset dir="${eclipse.home}/plugins"
				         includes="org.eclipse.equinox.launcher_*.jar, org.eclipse.equinox.p2.metadata.generator_*.jar"
				/>
				<pathelement location="${eclipse.home}/plugins" />
			</classpath>
			<arg line="-application org.eclipse.equinox.p2.metadata.generator.EclipseGenerator" />
			<arg line=" -updateSite ${updateSiteJarDir}/ -site file:${updateSiteJarDir}/site.xml" />
			<arg line="-metadataRepository file://${updateSiteJarDir} -metadataRepositoryName &quot;Subversive Repo&quot;" />
			<arg line="-artifactRepository file://${updateSiteJarDir} -artifactRepositoryName &quot;Subversive Artifacts&quot;" />
			<arg line="-compress -noDefaultIUs -reusePack200Files" />
		</java>

		<if>
			<equals arg1="${followStrict}" arg2="false" />
			<then>
				<zip destfile="${output.zip}-FULL.zip" basedir="${working.dir}" excludes=".blobstore/**" />
				<zip destfile="${output.zip}.zip" basedir="${updateSiteJarDir}" excludes=".blobstore/**" />
			</then>
			<else>
				<zip destfile="${output.zip}.zip" basedir="${updateSiteJarDir}" excludes=".blobstore/**" />
			</else>
		</if>
		<delete dir="${working.dir}" includeemptydirs="true" quiet="true" />
		<delete dir="${updateSiteJarDir}" includeemptydirs="true" quiet="true" />
		<delete dir="${java.io.tmpdir}/workspace" includeemptydirs="true" quiet="true" />
	</target>

	<target name="buildSiteXml" description="Generate a site.xml to contain the features in a category">
		<!-- TODO: given a list of features, produce site.xml so they're contained in a default category (or, fix bug 269226 so we don't need this) -->
		<!-- TODO: support <site mirrorsURL="" associatedSites="" etc.> ? -->
		<echo>Generating site.xml for use with p2 repo / update site categories...</echo>
		<echo file="${updateSiteJarDir}/site.xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</echo>
		<if>
			<equals arg1="${pack200Files}" arg2="-reusePack200Files" />
			<then>
				<echo append="true" file="${updateSiteJarDir}/site.xml">&lt;site pack200="true"&gt;</echo>
			</then>
			<else>
				<echo append="true" file="${updateSiteJarDir}/site.xml">&lt;site&gt;</echo>
			</else>
		</if>

		<property name="category.name" value="Subversive Repo" />

		<echo append="true" file="${updateSiteJarDir}/site.xml">	&lt;description&gt;To install these features, point Eclipse at this site.&lt;/description&gt;

		&lt;!-- ${category.name} --&gt;
		&lt;category-def label="${category.name}" name="${category.name}"&gt;
			&lt;description&gt;${category.name}: contains all features in this build.&lt;/description&gt;
		&lt;/category-def&gt;
	</echo>

		<for param="featureJar">
			<path>
				<fileset dir="${updateSiteJarDir}/features" includes="*.jar" />
			</path>
			<sequential>
				<var name="feature.jarfile" unset="true" />
				<var name="feature.id" unset="true" />
				<var name="feature.version" unset="true" />
				<propertyregex property="feature.jarfile"
				               defaultvalue="@{featureJar}"
				               input="@{featureJar}"
				               regexp=".+/features/([^/]+\.jar)"
				               replace="\1"
				               override="true"
				/>
				<propertyregex property="feature.id"
				               defaultvalue="${feature.jarfile}"
				               input="${feature.jarfile}"
				               regexp="([^_]+)_(\d+\.\d+\.\d+\..+)\.jar"
				               replace="\1"
				               override="true"
				/>
				<propertyregex property="feature.version"
				               defaultvalue="${feature.jarfile}"
				               input="${feature.jarfile}"
				               regexp="([^_]+)_(\d+\.\d+\.\d+\..+)\.jar"
				               replace="\2"
				               override="true"
				/>
				<echo append="true" file="${updateSiteJarDir}/site.xml">	&lt;feature id="${feature.id}" version="${feature.version}" url="features/${feature.jarfile}" patch="false"&gt;
			&lt;category name="${category.name}"/&gt;
		&lt;/feature&gt;
	</echo>
				<var name="feature.jarfile" unset="true" />
				<var name="feature.id" unset="true" />
				<var name="feature.version" unset="true" />
			</sequential>
		</for>
		<echo append="true" file="${updateSiteJarDir}/site.xml">
	&lt;/site&gt;
	</echo>
	</target>

	<target name="init">
		<property name="COMMON_TOOLS" value="${java.io.tmpdir}"/>
		<available file="${COMMON_TOOLS}/ant-contrib.jar" type="file" property="ant-contrib.jar.exists" />
		<antcall target="get.ant-contrib" />
		<taskdef resource="net/sf/antcontrib/antlib.xml">
			<classpath>
				<pathelement location="${COMMON_TOOLS}/ant-contrib.jar" />
			</classpath>
		</taskdef>
	</target>

	<target name="get.ant-contrib" unless="ant-contrib.jar.exists">
		<property name="ANTCONTRIB_MIRROR" value="http://downloads.sourceforge.net/ant-contrib/" />
		<get usetimestamp="true"
		     dest="${COMMON_TOOLS}/ant-contrib-1.0b2-bin.zip"
		     src="${ANTCONTRIB_MIRROR}/ant-contrib-1.0b2-bin.zip"
		/>
		<touch file="${COMMON_TOOLS}/ant-contrib-1.0b2-bin.zip" />
		<mkdir dir="${java.io.tmpdir}/ant-contrib-1.0b2-bin.zip_" />
		<unzip src="${COMMON_TOOLS}/ant-contrib-1.0b2-bin.zip"
		       dest="${java.io.tmpdir}/ant-contrib-1.0b2-bin.zip_"
		       overwrite="true"
		/>
		<copy file="${java.io.tmpdir}/ant-contrib-1.0b2-bin.zip_/ant-contrib/lib/ant-contrib.jar"
		      tofile="${COMMON_TOOLS}/ant-contrib.jar"
		      failonerror="true"
		/>
		<delete dir="${java.io.tmpdir}/ant-contrib-1.0b2-bin.zip_" includeemptydirs="true" quiet="true" />
	</target>
</project>

