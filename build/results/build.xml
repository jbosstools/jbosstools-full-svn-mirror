<project default="build.results">

	<!-- should be set by script or in Hudson -->
	<property name="ZIPSUFFIX" value="SNAPSHOT" />

	<!-- should be set by Hudson -->
	<!-- <property name="JOB_NAME" value="jbosstools-3.2.0.M2.continuous" /> -->

	<!-- if a different template file (eg., a partially expanded one) should be used, feed it in here -->
	<property name="template.file" value="download-template.xml" />

	<!-- if ${WORKSPACE}/site folder exists, target that folder; else generate here. -->
	<condition property="output.dir" value="${WORKSPACE}/results" else="${basedir}">
		<available file="${WORKSPACE}/results" />
	</condition>

	<condition property="WORKINGDIR" value="${WORKSPACE}/sources" else="${basedir}/../..">
		<available file="${WORKSPACE}/sources" type="dir" />
	</condition>
	<property name="input.dir" value="${WORKINGDIR}" />

	<mkdir dir="${WORKINGDIR}" />

	<condition property="COMMON_TOOLS" value="/home/hudson/static_build_env/jbds/tools">
		<available file="/home/hudson/static_build_env/jbds" type="dir" />
	</condition>
	<condition property="COMMON_TOOLS" value="${WORKINGDIR}/../tools" else="${java.io.tmpdir}">
		<available file="${WORKINGDIR}/../tools" type="dir" />
	</condition>
	<mkdir dir="${COMMON_TOOLS}" />

	<condition property="build.xml" value="/home/hudson/static_build_env/jbds/tools/sources/build/build.xml">
		<available file="/home/hudson/static_build_env/jbds/tools/sources/build/build.xml" type="file" />
	</condition>
	<condition property="build.xml" value="${basedir}/../../build/build.xml">
		<available file="${basedir}/../../build/build.xml" type="file" />
	</condition>
	<condition property="build.xml" value="${basedir}/../../build.xml">
		<available file="${basedir}/../../build.xml" type="file" />
	</condition>
	<condition property="build.xml" value="${basedir}/../../sources/build.xml">
		<available file="${basedir}/../../sources/build.xml" type="file" />
	</condition>
	<condition property="build.xml" value="${basedir}/../build.xml">
		<available file="${basedir}/../build.xml" type="file" />
	</condition>
	<!-- if can't calculate where build/build.xml is located, must pass in path from parent when calling this script -->

	<target name="init">
		<ant antfile="${build.xml}" target="init" />

		<macrodef name="get.size">
			<attribute name="file" />
			<attribute name="property" />
			<sequential>
				<var name="size" unset="true" />
				<var name="size-in-mb" unset="true" />
				<if>
					<available file="@{file}" />
					<then>
						<length file="@{file}" property="size" />
						<math result="size-in-mb">
							<op op="/">
								<op op="floor">
									<op op="*">
										<op op="/">
											<num value="${size}" />
											<num value="1048576" />
										</op>
										<num value="100" />
									</op>
								</op>
								<num value="100" />
							</op>
						</math>

						<property name="@{property}" value="${size-in-mb}" />
					</then>
					<else>
						<property name="@{property}" value="-1" />
					</else>
				</if>
			</sequential>
		</macrodef>
		<taskdef resource="net/sf/antcontrib/antlib.xml">
			<classpath>
				<pathelement location="${COMMON_TOOLS}/ant-contrib.jar" />
			</classpath>
		</taskdef>
	</target>

	<target name="build.results" depends="init">
		<!-- 
			1. resolve variables in download-template.xml to produce download.xml
			2. XSL transform download.xml to produce download-snippet.txt
			3. manually copy the contents of this file into a page under 
				http://www.jboss.org/tools/downloads/
		-->
		<echo level="info">ZIPSUFFIX = ${ZIPSUFFIX}
WORKINGDIR = ${WORKINGDIR}
COMMON_TOOLS = ${COMMON_TOOLS}
input.dir = ${input.dir}
output.dir = ${output.dir}</echo>
		<for param="UPDATEZIP">
			<path>
				<fileset dir="${input.dir}">
					<include name="**/*-Update-${ZIPSUFFIX}.zip" />
					<include name="**/*-Sources-${ZIPSUFFIX}.zip" />
				</fileset>
			</path>
			<sequential>
				<var name="filename" unset="true" />
				<propertyregex property="filename" input="@{UPDATEZIP}" defaultvalue="@{UPDATEZIP}" regexp=".+/([^/]+\.zip)" replace="\1" casesensitive="false" override="true" />
				<propertyregex property="COMPONENT" input="${filename}" defaultvalue="${filename}" regexp="(.+)-(Update|Sources)-${ZIPSUFFIX}\.zip" replace="\1" casesensitive="false" override="true" />
				<if>
					<and>
						<isset property="JOB_NAME" />
						<equals arg1="${COMPONENT}" arg2="${JOB_NAME}" />
					</and>
					<then>
						<if>
							<!-- only set the update variable if it's NOT coming from the aggregate build -->
							<and>
								<equals arg1="${filename}" arg2="${JOB_NAME}-Sources-${ZIPSUFFIX}.zip" />
								<not>
									<contains string="${JOB_NAME}" substring="aggregate" />
								</not>
							</and>
							<then>
								<var name="COMPONENT" unset="true" />
								<var name="COMPONENT" value="sources" />
							</then>
							<elseif>
								<!-- only set the update variable if it's coming from the aggregate build; others should be ignored -->
								<and>
									<equals arg1="${filename}" arg2="${JOB_NAME}-Update-${ZIPSUFFIX}.zip" />
									<contains string="${JOB_NAME}" substring="aggregate" />
								</and>
								<then>
									<var name="COMPONENT" unset="true" />
									<var name="COMPONENT" value="update" />
								</then>
							</elseif>
						</if>
					</then>
				</if>

				<echo level="verbose">UPDATEZIP = @{UPDATEZIP}
COMPONENT = ${COMPONENT}</echo>
				<property name="${COMPONENT}-filename" value="${filename}" />

				<get.size file="@{UPDATEZIP}" property="${COMPONENT}-filesize" />
				<var name="filesize" unset="true" />
				<propertycopy from="${COMPONENT}-filesize" property="filesize" override="true" silent="true" />
				<echo level="info">filesize =  ${filesize}</echo>
				<echo level="info">filename =  ${filename}</echo>
				<var name="filesize" unset="true" />
				<var name="filename" unset="true" />
			</sequential>
		</for>

		<if>
			<!-- default operation from template file -->
			<equals arg1="${template.file}" arg2="download-template.xml" />
			<then>
				<copy todir="${output.dir}" overwrite="true">
					<fileset dir="${output.dir}" file="${template.file}" />
					<mapper type="merge" to="download.xml" />
					<filterchain>
						<expandproperties />
					</filterchain>
				</copy>
				<xslt in="${output.dir}/download.xml" out="${output.dir}/download-snippet.txt" style="download.xsl" />
				<xslt in="${output.dir}/download.xml" out="${output.dir}/buildResults.html" style="buildResults.xsl" />
				<copy todir="${output.dir}" file="buildResults.css"/>
				<delete file="${output.dir}/download.xml" />
			</then>
			<elseif>
				<!-- use previously XLST'd file from an upstream build -->
				<or>
					<contains string="${template.file}" substring="http:" />
					<contains string="${template.file}" substring="https:" />
					<contains string="${template.file}" substring="ftp:" />
				</or>
				<then>
					<propertyregex property="template.file.cleaned" input="${template.file}" defaultvalue="${template.file}" regexp=".+/([^/]+)" replace="\1" override="true" />
					<get src="${template.file}" dest="${output.dir}/${template.file.cleaned}.in" ignoreerrors="true" />
					<if>
						<available file="${output.dir}/${template.file.cleaned}.in" type="file" />
						<then>
							<!-- use pre-existing snippet file -->
							<copy todir="${output.dir}" overwrite="true">
								<fileset dir="${output.dir}" file="${template.file.cleaned}.in" />
								<mapper type="merge" to="download-snippet.txt" />
								<filterchain>
									<expandproperties />
								</filterchain>
							</copy>
							<delete file="${output.dir}/${template.file.cleaned}.in" quiet="true" />
						</then>
						<else>
							<!-- fall back to default template file -->
							<var name="template.file" value="download-template.xml" />
							<copy todir="${output.dir}" overwrite="true">
								<fileset dir="${output.dir}" file="${template.file}" />
								<mapper type="merge" to="download.xml" />
								<filterchain>
									<expandproperties />
								</filterchain>
							</copy>
							<xslt in="${output.dir}/download.xml" out="${output.dir}/download-snippet.txt" style="download.xsl" />
							<delete file="${output.dir}/download.xml" />
						</else>
					</if>
				</then>
			</elseif>
		</if>
	</target>

	<target name="test.xslt">
		<xslt in="download-template.xml" out="download-snippet.out.html" style="download.xsl" />
		<xslt in="download-template.xml" out="buildResults.out.html" style="buildResults.xsl" />
	</target>

</project>
