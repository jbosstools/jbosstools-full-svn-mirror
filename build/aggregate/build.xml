<project default="custom.build" name="jbosstools aggregate site build.xml">
	<!--
	To test output, run maven in this folder:
		$ mvn install -DJOB_NAME=jbosstools-3.3_trunk.aggregate -DBUILD_ID=2011-09-19_19-10-45 -DBUILD_NUMBER=6969 -DJBT_VERSION=3.3.99 -DBUILD_ALIAS=M7 -Dupdate.site.description="Stable Milestone"
		
	Or, to run just the ant script:
		$ cd ~/tru/build/aggregate/webtools-site; ant basic.build -f ../build.xml -Doutput.dir=`pwd`
		$ cd ~/tru/build/aggregate/site; ant custom.build -f ../build.xml -Doutput.dir=`pwd` -DinputRepo=http://download.jboss.org/jbosstools/builds/staging/_composite_/core/trunk/
	-->

	<!-- if ${WORKSPACE}/site folder exists, target that folder; else generate here. -->
	<condition property="output.dir" value="${WORKSPACE}/results" else="${basedir}">
		<available file="${WORKSPACE}/results" />
	</condition>

	<condition property="COMMON_TOOLS" value="/home/hudson/static_build_env/jbds/tools" else="${java.io.tmpdir}">
		<available file="/home/hudson/static_build_env/jbds" type="dir" />
	</condition>
	<mkdir dir="${COMMON_TOOLS}" />

	<condition property="WORKINGDIR" value="/home/hudson/static_build_env/jbds/tools/sources" else="${basedir}">
		<available file="/home/hudson/static_build_env/jbds" type="dir" />
	</condition>
	<mkdir dir="${WORKINGDIR}" />

	<tempfile property="tmpdir" destDir="${java.io.tmpdir}" prefix="aggregate-site-build"/>
	<mkdir dir="${tmpdir}" />

	<property name="project.build.directory" value="${output.dir}/target"/>

	<!-- look for target/repository (new) or target/site (old) -->
	<condition property="update.site.source.dir" value="${project.build.directory}/site" else="${project.build.directory}/repository">
		<available file="${project.build.directory}/site" type="dir" />
	</condition>

	<!-- load properties from file -->
	<condition property="associate.properties" value="${output.dir}/associate.properties">
		<available file="${output.dir}/associate.properties" type="file" />
	</condition>
	<condition property="associate.properties" value="${output.dir}/../associate.properties">
		<available file="${output.dir}/../associate.properties" type="file" />
	</condition>
	<property file="${associate.properties}" />
	<echo level="verbose">Loaded associate sites from ${associate.properties}</echo>
	<property name="web.content.files" value="index.html, web/*.css, README*, *directory.xml, site.xml, site.properties" />
	
	<property name="target.zip" value="${project.build.directory}/site_assembly.zip"/>

	<target name="init">
		<echo>
This script requires Ant 1.8+ and JDK 1.6+.
-------------------------------------------
$ant.version = ${ant.version}
$ant.home = ${ant.home}
$ant.java.version = ${ant.java.version}
$java.home = ${java.home}</echo>
		<available file="${COMMON_TOOLS}/ant-contrib.jar" type="file" property="ant-contrib.jar.exists" />
		<antcall target="get.ant-contrib" />
		<taskdef resource="net/sf/antcontrib/antlib.xml">
			<classpath>
				<pathelement location="${COMMON_TOOLS}/ant-contrib.jar" />
			</classpath>
		</taskdef>

		<available file="${COMMON_TOOLS}/saxon.jar" type="file" property="saxon.jar.exists" />
		<antcall target="get.saxon" />
	</target>

	<target name="basic.build" description="JBT aggregate update site extra processing steps" depends="init,check.target,add.repo.properties,unpack.content.jar,remove.references,add.associate.sites,remove.uncategorized.category,remove.uninstallable,add.web.content,pack.content.jar,pack.zip,cleanup" />
	<target name="custom.build" description="JBT aggregate update site extra processing steps" depends="basic.build,collect.zips,collect.metadata,create.summary.file,cleanup" />

	<target name="get.ant-contrib" unless="ant-contrib.jar.exists">
		<property name="ANTCONTRIB_MIRROR" value="http://sourceforge.net/projects/ant-contrib/files/ant-contrib/ant-contrib-1.0b2" />
		<get usetimestamp="true" dest="${COMMON_TOOLS}/ant-contrib-1.0b2-bin.zip" src="${ANTCONTRIB_MIRROR}/ant-contrib-1.0b2-bin.zip" />
		<touch file="${COMMON_TOOLS}/ant-contrib-1.0b2-bin.zip" />
		<mkdir dir="${tmpdir}/ant-contrib-1.0b2-bin.zip_" />
		<unzip src="${COMMON_TOOLS}/ant-contrib-1.0b2-bin.zip" dest="${tmpdir}/ant-contrib-1.0b2-bin.zip_" overwrite="true" />
		<copy file="${tmpdir}/ant-contrib-1.0b2-bin.zip_/ant-contrib/lib/ant-contrib.jar" tofile="${COMMON_TOOLS}/ant-contrib.jar" failonerror="true" />
		<delete dir="${tmpdir}/ant-contrib-1.0b2-bin.zip_" includeemptydirs="true" quiet="true" />
	</target>

	<target name="get.saxon" unless="saxon.jar.exists">
		<!-- or use http://downloads.sourceforge.net/saxon/saxonhe9-3-0-4j.zip ? -->
		<property name="SAXON_MIRROR" value="http://downloads.sourceforge.net/project/saxon/Saxon-HE/9.3/saxonhe9-3-0-4j.zip?r=http%3A%2F%2Fsaxon.sourceforge.net%2F&amp;ts=1297812383&amp;use_mirror=softlayer" />
		<get usetimestamp="true" dest="${COMMON_TOOLS}/saxonhe9-3-0-4j.zip" src="${SAXON_MIRROR}" />
		<mkdir dir="${tmpdir}/saxonhe9-3-0-4j.zip_" />
		<unzip src="${COMMON_TOOLS}/saxonhe9-3-0-4j.zip" dest="${tmpdir}/saxonhe9-3-0-4j.zip_" overwrite="true" />
		<copy file="${tmpdir}/saxonhe9-3-0-4j.zip_/saxon9he.jar" tofile="${COMMON_TOOLS}/saxon.jar" failonerror="true" />
		<delete dir="${tmpdir}/saxonhe9-3-0-4j.zip_" includeemptydirs="true" quiet="true" />
	</target>

	<!-- = = = = = = = = = = = = = = = = =
          macrodef: fetchZipsFromList - given a list of zips in zip.list.txt, fetch those zips           
         = = = = = = = = = = = = = = = = = -->
	<macrodef name="fetchZipsFromList">
		<attribute name="repo" default="" />
		<sequential>

			<var name="location.cleaned" value="@{repo}" />
			<propertyregex defaultvalue="${location.cleaned}" input="${location.cleaned}" regexp="/all/repo/*$" replace="" casesensitive="true" override="true" property="location.cleaned" />
			<propertyregex defaultvalue="${location.cleaned}" input="${location.cleaned}" regexp="/tools/*$" replace="" casesensitive="true" override="true" property="location.cleaned" />

			<echo level="verbose">repo = ${location.cleaned}</echo>
			<!-- fetch zip.list.txt file, if available -->
			<var unset="true" name="ALL_ZIPS" />
			<!-- <var unset="true" name="wget.return" /> -->
			<if>
				<contains string="${location.cleaned}" substring=":/" />
				<then>
					<!-- <exec executable="wget" dir="${aggregate.zips.dir}" failonerror="false" failifexecutionfails="false" resultproperty="wget.return" outputproperty="null">
						<arg line="${location.cleaned}/logs/zip.list.txt -q - -no-clobber - -tries=3" />
					</exec> -->
					<get src="${location.cleaned}/logs/zip.list.txt" dest="${aggregate.zips.dir}/zip.list.txt" retries="3" usetimestamp="true" ignoreerrors="true" />
				</then>
				<else>
					<copy todir="${aggregate.zips.dir}" failonerror="false" file="${location.cleaned}/logs/zip.list.txt" />
				</else>
			</if>

			<echo level="verbose">Fetch SVN_REVISION.txt if it exists (return 8 if not found)</echo>
			<var name="svnRevTXT" value="${aggregate.zips.dir}/SVN_REVISION.txt" />
			<if>
				<contains string="${location.cleaned}" substring=":/" />
				<then>
					<!-- <exec executable="wget" dir="${aggregate.zips.dir}" failonerror="false" failifexecutionfails="false" resultproperty="wget.return" outputproperty="null">
						<arg line="${location.cleaned}/logs/SVN_REVISION.txt -q - -no-clobber - -tries=3" />
					</exec> -->
					<get src="${location.cleaned}/logs/SVN_REVISION.txt" dest="${aggregate.zips.dir}/SVN_REVISION.txt" retries="3" usetimestamp="true" ignoreerrors="true" />
				</then>
				<else>
					<copy todir="${aggregate.zips.dir}" failonerror="false" file="${location.cleaned}/logs/SVN_REVISION.txt" />
				</else>
			</if>

			<echo level="verbose">Fetch SVN_REVISION.xml if it exists (return 8 if not found)</echo>
			<var name="svnRevXML" value="${aggregate.zips.dir}/SVN_REVISION.xml" />
			<if>
				<contains string="${location.cleaned}" substring=":/" />
				<then>
					<!-- <exec executable="wget" dir="${aggregate.zips.dir}" failonerror="false" failifexecutionfails="false" resultproperty="wget.return" outputproperty="null">
						<arg line="${location.cleaned}/logs/SVN_REVISION.xml -q - -no-clobber - -tries=3" />
					</exec> -->
					<get src="${location.cleaned}/logs/SVN_REVISION.xml" dest="${aggregate.zips.dir}/SVN_REVISION.xml" retries="3" usetimestamp="true" ignoreerrors="true" />
				</then>
				<else>
					<copy todir="${aggregate.zips.dir}" failonerror="false" file="${location.cleaned}/logs/SVN_REVISION.xml" />
				</else>
			</if>

			<echo level="verbose">Fetch build.properties if it exists (return 8 if not found)</echo>
			<var name="buildProperties" value="${aggregate.zips.dir}/build.properties" />
			<if>
				<contains string="${location.cleaned}" substring=":/" />
				<then>
					<!-- <exec executable="wget" dir="${aggregate.zips.dir}" failonerror="false" failifexecutionfails="false" resultproperty="wget.return" outputproperty="null">
						<arg line="${location.cleaned}/logs/build.properties -q - -no-clobber - -tries=3" />
					</exec> -->
					<get src="${location.cleaned}/logs/build.properties" dest="${aggregate.zips.dir}/build.properties" retries="3" usetimestamp="true" ignoreerrors="true" />
				</then>
				<else>
					<copy todir="${aggregate.zips.dir}" failonerror="false" file="${location.cleaned}/logs/build.properties" />
				</else>
			</if>

			<if>
				<or>
					<and>
						<contains string="${location.cleaned}" substring=":/" />
						<!-- <equals arg1="${wget.return}" arg2="0" /> -->
						<available file="${aggregate.zips.dir}/zip.list.txt" type="file" />
					</and>
					<and>
						<not>
							<contains string="${location.cleaned}" substring=":/" />
						</not>
						<available file="${aggregate.zips.dir}/zip.list.txt" type="file" />
					</and>
				</or>
				<then>
					<!-- load zip.list.txt file, get ALL_ZIPS list -->
					<var unset="true" name="ALL_ZIPS" />
					<property file="${aggregate.zips.dir}/zip.list.txt" />
					<if>
						<isset property="ALL_ZIPS" />
						<then>
							<var name="relativePath" unset="true" />
							<for list="${ALL_ZIPS}" delimiter=", " keepgoing="true" param="zipPath">
								<sequential>
									<propertyregex override="true" property="relativePath" defaultvalue="" input="@{zipPath}" regexp="(.+)/([^/]+\.zip)" replace="\1" />

									<propertyregex override="true" property="svnrevPath" defaultvalue="" input="@{zipPath}" regexp=".zip" replace=".SVN_REVISION" />
									<propertyregex override="true" property="svnrevPath" defaultvalue="${svnrevPath}" input="${svnrevPath}" regexp="-Sources-|-Update-" replace="-" />

									<propertyregex override="true" property="buildPropertiesPath" defaultvalue="" input="@{zipPath}" regexp=".zip" replace=".build.properties" />
									<propertyregex override="true" property="buildPropertiesPath" defaultvalue="${buildPropertiesPath}" input="${buildPropertiesPath}" regexp="-Sources-|-Update-" replace="-" />

									<propertyregex override="true" property="filePrefix" defaultvalue="@{zipPath}" input="@{zipPath}" regexp="(.+)/([^/]+)\.zip" replace="\2.build.properties" />

									<mkdir dir="${aggregate.zips.dir}/${relativePath}" />
									<!-- fetch zips to local dir -->
									<echo level="verbose">repoNum = @{repoNum}
relativePath = ${relativePath}
svnrevPath = ${svnrevPath}
buildPropertiesPath = ${buildPropertiesPath}
zipPath = @{zipPath}
DEST = ${aggregate.zips.dir}/@{zipPath}
</echo>
									<echo level="verbose"> Zip URL = ${location.cleaned}/@{zipPath}</echo>
									<if>
										<isset property="isTest" />
										<then>
											<!-- create a fake file of variable length (rather than using touch for zero-length one) -->
											<echo file="${aggregate.zips.dir}/@{zipPath}">${aggregate.zips.dir}/@{zipPath}</echo>
										</then>
										<else>
											<if>
												<contains string="${location.cleaned}" substring=":/" />
												<then>

													<!-- <var name="wget.return" unset="true" /> -->
													<!-- <exec executable="wget" dir="${aggregate.zips.dir}/${relativePath}" failonerror="false" failifexecutionfails="false" resultproperty="wget.return" outputproperty="null">
														<arg line="${location.cleaned}/@{zipPath} -q - -no-clobber - -tries=3" />
													</exec> -->
													<!-- <echo>&lt;get&gt; From: 
* $location.cleaned: ${location.cleaned}
* @zipPath: @{zipPath}
To:
* $aggregate.zips.dir: ${aggregate.zips.dir}
* $relativePath: ${relativePath}
* @zipPath: @{zipPath}
</echo> -->
													<!--
     [echo] <get> From: 
     [echo] * $location.cleaned: http://download.jboss.org/jbosstools/builds/staging/jbosstools-3.3_trunk.component- -archives
     [echo] * @zipPath: all/jbosstools-3.3_trunk.component- -archives-Update-SNAPSHOT.zip
     [echo] To:
     [echo] * $aggregate.zips.dir: /home/nboldt/eclipse/workspace-jboss/jbosstools_trunk/build/aggregate/site/zips
     [echo] * $relativePath: all
     [echo] * @zipPath: all/jbosstools-3.3_trunk.component- -archives-Update-SNAPSHOT.zip
													-->
													<get src="${location.cleaned}/@{zipPath}" dest="${aggregate.zips.dir}/@{zipPath}" retries="3" usetimestamp="true" ignoreerrors="true" />
													<if>
														<not>
															<!-- <equals arg1="${wget.return}" arg2="0" /> -->
															<available file="${aggregate.zips.dir}/@{zipPath}" type="file" />
														</not>
														<then>
															<!-- <echo> ** Error [${wget.return}] ** Could not wget ${location.cleaned}/@{zipPath}</echo> -->
															<echo> ** Error: could not get ${location.cleaned}/@{zipPath}</echo>
														</then>
													</if>
												</then>
												<else>
													<copy todir="${aggregate.zips.dir}/${relativePath}" failonerror="false" file="${location.cleaned}/@{zipPath}" />
												</else>
											</if>
										</else>
									</if>

									<if>
										<available file="${aggregate.zips.dir}/@{zipPath}" type="file" />
										<then>
											<!-- set variable for filename -->
											<echo file="${aggregate.zips.dir}/build.properties.file.txt" append="true">${filePrefix}.filename = @{zipPath}
</echo>
											<!-- set variable for filesize in Kb -->
											<length file="${aggregate.zips.dir}/@{zipPath}" property="fs.length.b" />
											<!-- <math operand2="${fs.length.b}" operation="/" operand1="1024" result="fs.length.kb" datatype="float" /> -->
											<!-- <math operand2="${fs.length.b}" operation="/" operand1="1048576" result="fs.length.mb" datatype="float"/> -->
											<!-- <echo level="verbose">${aggregate.zips.dir}/@{zipPath}: ${fs.length.kb} Kb, ${fs.length.mb} Mb</echo> -->
											<echo file="${aggregate.zips.dir}/build.properties.file.txt" append="true">${filePrefix}.filesize = ${fs.length.b}
</echo>
											<var name="fs.length.b" unset="true" />
											<var name="fs.length.kb" unset="true" />

											<!-- set variable for filemd5 -->
											<checksum file="${aggregate.zips.dir}/@{zipPath}" property="${filePrefix}.filemd5" />
											<propertycopy from="${filePrefix}.filemd5" property="tempmd5" />
											<echo file="${aggregate.zips.dir}/build.properties.file.txt" append="true">${filePrefix}.filemd5 = ${tempmd5}
</echo>
											<var name="${filePrefix}.filemd5" unset="true" />
											<var name="tempmd5" unset="true" />
										</then>
									</if>

									<!-- rename the svn and build properties files so they align with the zip names -->
									<if>
										<available file="${svnRevTXT}" type="file" />
										<then>
											<copy file="${svnRevTXT}" tofile="${aggregate.zips.dir}/${svnrevPath}.txt" />
										</then>
									</if>
									<if>
										<available file="${svnRevXML}" type="file" />
										<then>
											<copy file="${svnRevXML}" tofile="${aggregate.zips.dir}/${svnrevPath}.xml" />
										</then>
									</if>
									<if>
										<available file="${buildProperties}" type="file" />
										<then>
											<copy file="${buildProperties}" tofile="${aggregate.zips.dir}/${buildPropertiesPath}.txt" />
										</then>
									</if>
								</sequential>
							</for>
							<var name="relativePath" unset="true" />
							<var name="svnrevPath" unset="true" />
							<var name="buildPropertiesPath" unset="true" />
						</then>
					</if>
					<var unset="true" name="ALL_ZIPS" />
				</then>
				<else>
					<!-- <echo> ** Error [${wget.return}] ** Could not wget ${location.cleaned}/logs/zip.list.txt</echo> -->
					<echo> ** Error: could not get ${location.cleaned}/logs/zip.list.txt</echo>
				</else>
			</if>
			<var name="location.cleaned" unset="true" />
			<delete quiet="true">
				<fileset dir="${aggregate.zips.dir}" includes="zip.list.txt, SVN_REVISION.txt, SVN_REVISION.xml, build.properties" />
			</delete>
			<var name="svnRevFile" unset="true" />
		</sequential>
	</macrodef>

	<!-- = = = = = = = = = = = = = = = = =
          macrodef: fetchZipsFromMetadata - look for compositeArtifacts.xml and parse results
         = = = = = = = = = = = = = = = = = -->
	<macrodef name="fetchZipsFromMetadata">
		<attribute name="repo" default="" />
		<sequential>
			<var name="location.cleaned" value="@{repo}" />
			<echo level="verbose">repo = ${location.cleaned}</echo>
			<!-- if no zip.list.txt from the inputRepo, then fetch from ${location.cleaned}/compositeArtifacts.xml instead -->
			<!-- <var name="wget.return" unset="true" /> -->
			<!-- <exec executable="wget" dir="${aggregate.zips.dir}" failonerror="false" failifexecutionfails="false" resultproperty="wget.return" outputproperty="null">
				<arg line="${location.cleaned}/compositeArtifacts.xml -q - -no-clobber - -tries=3" />
			</exec> -->
			<get src="${location.cleaned}/compositeArtifacts.xml" dest="${aggregate.zips.dir}/compositeArtifacts.xml" retries="3" usetimestamp="true" ignoreerrors="true" />
			<if>
				<and>
					<!-- <equals arg1="${wget.return}" arg2="0" /> -->
					<available file="${aggregate.zips.dir}/compositeArtifacts.xml" type="file" />
				</and>
				<then>
					<echo level="verbose">Got ${aggregate.zips.dir}/compositeArtifacts.xml</echo>
					<xmlproperty file="${aggregate.zips.dir}/compositeArtifacts.xml" validate="false" collapseAttributes="true" />
					<echo level="verbose">Found ${repository.children.size} contained repos to search</echo>

					<!-- counter variable -->
					<var name="counter" value="" />
					<!-- foreach entry repository.children.child.location -->
					<for param="location" list="${repository.children.child.location}">
						<sequential>
							<var name="counter" value="${counter}0" />
							<var name="i" unset="true" />
							<length property="i" string="${counter}" />
							<if>
								<not>
									<contains string="@{location}" substring="/staging.previous/" />
								</not>
								<then>
									<if>
										<available file="/home/hudson/static_build_env/jbds/builds/staging" type="dir" />
										<then>
											<propertyregex override="true" property="location.cleaned" defaultvalue="@{location}" input="@{location}" regexp="../../../../staging/" replace="/home/hudson/static_build_env/jbds/builds/staging/" />
											<if>
												<not>
													<available file="${location.cleaned}" />
												</not>
												<then>
													<propertyregex override="true" property="location.cleaned" defaultvalue="@{location}" input="@{location}" regexp="../../../../staging/" replace="http://download.jboss.org/jbosstools/builds/staging/" />
												</then>
											</if>
										</then>
										<else>
											<propertyregex override="true" property="location.cleaned" defaultvalue="@{location}" input="@{location}" regexp="../../../../staging/" replace="http://download.jboss.org/jbosstools/builds/staging/" />
										</else>
									</if>
									<echo level="error">[${i}/${repository.children.size}] Site URL = ${location.cleaned} (@{location})</echo>
									<fetchZipsFromList repo="${location.cleaned}" />
								</then>
								<else>
									<echo level="error">[${i}/${repository.children.size}] Skip @{location}</echo>
								</else>
							</if>
						</sequential>
					</for>
					<var name="counter" unset="true" />
					<var name="i" unset="true" />
					<delete file="${aggregate.zips.dir}/compositeArtifacts.xml" quiet="true" />
				</then>
				<else>
					<!-- <echo> ** Error [${wget.return}] ** Could not wget ${location.cleaned}/compositeArtifacts.xml</echo> -->
					<echo> ** Error: could not get ${location.cleaned}/compositeArtifacts.xml</echo>
				</else>
			</if>
		</sequential>
	</macrodef>

	<target name="add.associate.sites" if="associate.sites">
		<if>
			<and>
				<!-- Defined in associate.sites -->
				<isset property="associate.sites" />
				<not>
					<equals arg1="${associate.sites}" arg2="" />
				</not>
			</and>
			<then>
				<!-- counter variable -->
				<var name="associate.sites.0" value="" />
				<for param="associate.site" list="${associate.sites}" delimiter=", 
	">
					<sequential>
						<var name="associate.sites.0" value="${associate.sites.0}00" />
					</sequential>
				</for>
				<length property="associate.sites.length" string="${associate.sites.0}" />

				<loadfile srcfile="${update.site.source.dir}/content.xml" property="content.xml">
					<filterchain>
						<tailfilter lines="-1" skip="1" />
					</filterchain>
				</loadfile>
				<echo file="${update.site.source.dir}/content.xml" message="${content.xml}" />
				<echo file="${update.site.source.dir}/content.xml" append="true">  &lt;references size='${associate.sites.length}'>
</echo>
				<for param="associate.site" list="${associate.sites}" delimiter=", 
	">
					<sequential>
						<!-- insert into content.xml -->
						<echo file="${update.site.source.dir}/content.xml" append="true">    &lt;repository uri='@{associate.site}' url='@{associate.site}' type='0' options='1'/>
    &lt;repository uri='@{associate.site}' url='@{associate.site}' type='1' options='1'/>
</echo>
					</sequential>
				</for>
				<echo file="${update.site.source.dir}/content.xml" append="true">  &lt;/references>
&lt;/repository>
</echo>
			</then>
		</if>
	</target>

	<target name="remove.references">
		<copy file="${update.site.source.dir}/content.xml" tofile="${update.site.source.dir}/content.old.xml" overwrite="true" />
		<xslt style="remove-references.xsl" in="${update.site.source.dir}/content.old.xml" out="${update.site.source.dir}/content.xml" />
	</target>

	<target name="remove.uncategorized.category">
		<copy file="${update.site.source.dir}/content.xml" tofile="${update.site.source.dir}/content.old.xml" overwrite="true" />
		<xslt style="remove-uncategorized.xsl" in="${update.site.source.dir}/content.old.xml" out="${update.site.source.dir}/content.xml" />
	</target>

	<target name="remove.uninstallable">
		<copy file="${update.site.source.dir}/content.xml" tofile="${update.site.source.dir}/content.old.xml" overwrite="true" />
		<xslt style="remove-uninstallable.xsl" in="${update.site.source.dir}/content.old.xml" out="${update.site.source.dir}/content.xml" />
	</target>

	<target name="unpack.content.jar">
		<if>
			<available file="${update.site.source.dir}/content.jar" type="file" />
			<then>
				<unzip src="${update.site.source.dir}/content.jar" dest="${update.site.source.dir}" />
				<delete file="${update.site.source.dir}/content.jar" />
			</then>
		</if>
	</target>

	<target name="pack.content.jar">
		<zip destfile="${update.site.source.dir}/content.jar" basedir="${update.site.source.dir}" includes="content.xml" />
		<delete file="${update.site.source.dir}/content.xml" />
		<delete file="${update.site.source.dir}/content.old.xml" />
	</target>

	<target name="unpack.zip">
		<unzip src="${target.zip}" dest="${update.site.source.dir}" />
	</target>

	<target name="pack.zip">
		<zip destfile="${target.zip}" update="true" basedir="${update.site.source.dir}" includes="content.*, ${web.content.files}" />
	</target>

	<target name="check.target">

		<!-- support eclipse-repository (new) and eclipse-update-site (old): put category.xml in correct folder -->
		<if>
			<available file="${project.build.directory}/category.xml" type="file"/>
			<then>
				<move file="${project.build.directory}/category.xml" tofile="${update.site.source.dir}/category.xml" />
			</then>
		</if>
		<!-- support eclipse-repository (new) and eclipse-update-site (old): rename central.site-1.1.0-SNAPSHOT.zip to site_assembly.zip to be compatible with publish.sh script -->
		<if>
			<not><available file="${project.build.directory}/site_assembly.zip" type="file"/></not>
			<then>
				<move tofile="${project.build.directory}/site_assembly.zip">
					<fileset dir="${project.build.directory}" includes="*.zip" excludes="site.zip, site_assembly.zip"/>
				</move>
			</then>
		</if>

		<if>
			<not>
				<and>
					<available file="${update.site.source.dir}" type="dir" />
					<available file="${project.build.directory}/site_assembly.zip" type="file" />
				</and>
			</not>
			<then>
				<fail>
--
Could not find ${update.site.source.dir} and one of ${project.build.directory}/site_assembly.zip
Cannot adjust an update site w/o first building it!
--
Using maven: mvn3 clean install -U -B -fae -q -e
OR
Using ant:   ant basic.build -f ../build.xml -Doutput.dir=`pwd`
Using ant:   ant custom.build -f ../build.xml -Doutput.dir=`pwd` -DinputRepo=http://download.jboss.org/jbosstools/builds/staging/_composite_/core/trunk/
</fail>
			</then>
		</if>
	</target>

	<target name="install.releng.tools" depends="get.eclipse">
		<!-- install releng tools; want more verbose output? use -consolelog -debug -console -->
		<exec executable="${eclipseDir}/eclipse" failonerror="true" dir="${eclipseDir}" timeout="300000" taskname="p2">
			<arg line=" -application org.eclipse.equinox.p2.director -nosplash -installIUs org.eclipse.wtp.releng.tools.feature.feature.group" />
			<arg line=" -repository http://download.eclipse.org/webtools/releng/repository/" />
		</exec>		
	</target>

	<!-- adds download.stats properties to specified features and 
		 <property name='p2.statsURI' value='https://devstudio.jboss.com/usage/juno/4.0.0.Beta1/'/>
	-->
	<target name="add.repo.properties" depends="install.releng.tools" description="use org.eclipse.wtp.releng.tools.addRepoProperties to add p2.statsURI and download.stats properties for a list of features">
		<var name="SOURCE_REPO" value="${update.site.source.dir}"/>

		<!-- TODO: externalize these to maven vars / Jenkins vars -->
		<var name="TARGET_PLATFORM" value="juno"/>
		<var name="TARGET_FOLDER" value="4.0.0.Beta1"/>

		<var name="install" value=""/>
		<for param="featureJar">
			<path>
				<fileset dir="${SOURCE_REPO}/features" includes="*.jar" />
			</path>
			<sequential>
				<var name="feature.jarfile" unset="true" />
				<var name="feature.id" unset="true" />
				<propertyregex property="feature.jarfile" defaultvalue="@{featureJar}" input="@{featureJar}" regexp=".+/features/([^/]+\.jar)" replace="\1" override="true" />
				<propertyregex property="feature.id" defaultvalue="${feature.jarfile}" input="${feature.jarfile}" regexp="([^_]+)_(\d+\.\d+\.\d+\..+)\.jar" replace="\1" override="true" />
				<propertyregex property="feature.id" defaultvalue="${feature.id}" input="${feature.id}" regexp="([^_]+)_(\d+\.\d+\.\d+)\.jar" replace="\1" override="true" />
				<var name="install" value="${install},${feature.id}" />
				<var name="feature.jarfile" unset="true" />
				<var name="feature.id" unset="true" />
			</sequential>
		</for>
		<!-- trim prefix "," -->
		<propertyregex property="install" input="${install}" defaultvalue="${install}" regexp=",(.+)" replace="\1" override="true" />
		<echo level="debug">Features to track: ${install}</echo>
		<var name="vmargs" value=" -DartifactRepoDirectory=${SOURCE_REPO} -DmetadataRepoDirectory=${SOURCE_REPO} -Dp2StatsURI=https://devstudio.jboss.com/usage/${TARGET_PLATFORM}/${TARGET_FOLDER}/ -DstatsArtifactsSuffix= -DstatsTrackedArtifacts=${install}"/>
		<!-- run releng tools; want more verbose output? use -consolelog -debug -console -->
		<exec executable="${eclipseDir}/eclipse" failonerror="true" dir="${eclipseDir}" timeout="300000" taskname="add">
			<arg line=" -application org.eclipse.wtp.releng.tools.addRepoProperties -nosplash -data ${tmpdir}/workspace -consolelog --launcher.suppressErrors -vmargs ${vmargs}" />
		</exec>
	</target>

	<target name="add.web.content">
		<!-- 
		Properties calculated here
			from ${JOB_NAME} = jbosstools-3.2.0.M1.aggregate get 3.2.0.M1  
			from ${BUILD_ID} and ${BUILD_NUMBER}, get .${BUILD_ID}-B${BUILD_NUMBER}
			default update.site.description=Nightly Build
			default update.site.version=(null)
		-->
		<property name="update.site.name" value="JBoss Tools" />
		<property name="update.site.description" value="Nightly Build" />
		<if>
			<and>
				<not>
					<isset property="update.site.version" />
				</not>
				<isset property="JOB_NAME" />
				<isset property="BUILD_ID" />
				<isset property="BUILD_NUMBER" />
			</and>
			<then>
				<!-- from 2011-09-21_01-11-04 to 20110921-0111 -->
				<propertyregex override="true" property="BUILD_TS" defaultvalue="${BUILD_ID}" input="${BUILD_ID}" regexp="([0-9]+)-([0-9]+)-([0-9]+)_([0-9]+)-([0-9]+)-([0-9]+)" replace="v\1\2\3-\4\5" />
				<if>
					<and>
						<isset property="JBT_VERSION" />
						<isset property="BUILD_ALIAS" />
					</and>
					<then>
						<propertyregex override="true" property="update.site.version" defaultvalue="${JOB_NAME}" input="${JOB_NAME}" regexp="(jboss|soa)tools-([0-9x.]+)(_.*?)\.(.*?)\.*aggregate" replace=": ${JBT_VERSION}.${BUILD_ALIAS}-${BUILD_TS}-B${BUILD_NUMBER}.\4" />
					</then>
					<else>
						<propertyregex override="true" property="update.site.version" defaultvalue="${JOB_NAME}" input="${JOB_NAME}" regexp="(jboss|soa)tools-([0-9x.]+)(.*).aggregate" replace=": \2.${BUILD_TS}-B${BUILD_NUMBER}.\3" />
					</else>
				</if>
			</then>
			<else>
				<property name="update.site.version" value="" />
			</else>
		</if>

		<!-- get site.xml as HTML, then load into ${site.contents} in order to merge into index.html -->
		<antcallback target="transform.site.xml" return="site.contents" />

		<antcallback target="generate.site.properties" return="site.properties.html"/>
		
		<antcallback target="generate.directory.xml" return="directory.xml.html"/>
		
	        <condition property="index-template.html" value="${output.dir}/index-template.html" else="${basedir}/index-template.html">
        	        <available file="${output.dir}/index-template.html" />
	        </condition>
		<copy todir="${output.dir}" overwrite="true">
			<fileset file="${index-template.html}" />
			<mapper type="merge" to="index.html" />
			<filterchain>
				<expandproperties />
				<replacetokens>
					<token key="DIRECTORY.XML" value="${directory.xml.html}"/>
					<token key="SITE.PROPERTIES" value="${site.properties.html}"/>
				</replacetokens>
			</filterchain>
		</copy>

		<copy todir="${update.site.source.dir}" overwrite="true">
			<fileset dir="${basedir}" includes="${web.content.files}" />
		</copy>
		<copy todir="${update.site.source.dir}" overwrite="true">
			<fileset dir="${output.dir}" includes="${web.content.files}" />
		</copy>

		<!-- use updated site.xml instead of version with 0.0.0 -->
		<move file="${update.site.source.dir}/site.out.xml" tofile="${update.site.source.dir}/site.xml" overwrite="true"/>

	</target>

	<target name="generate.site.properties">
		<!-- turn site.xml into site.properties -->
		<delete quiet="true" file="${update.site.source.dir}/site.properties" />
		<xslt style="site.properties.xsl" in="${update.site.source.dir}/site.xml" out="${update.site.source.dir}/site.properties" force="true">
			<classpath location="${COMMON_TOOLS}/saxon.jar" />
		</xslt>
		<var name="site.properties.html" value=":: &lt;a href=&quot;site.properties&quot; style=&quot;font-size:x-small&quot;&gt;site.properties&lt;/a&gt;"/>
	</target>

	<target name="generate.directory.xml">
	<!-- get filename matching org.jboss.tools.central.discovery_1.0.0.v20111013-0511-M4.jar, then generate replacement directory.xml file -->
	<path id="central.discovery.jar.id">
		<fileset dir="${update.site.source.dir}/plugins">
			<include name="org.jboss.tools.central.discovery_*.jar" />
			<include name="org.jboss.tools.central.discovery.soa-tooling_*.jar" />
		</fileset>
	</path>
	<property name="central.discovery.path" refid="central.discovery.jar.id" />
	<basename property="central.discovery.jar" file="${central.discovery.path}" />
	<var name="directory.xml.html" value=""/>
	<if>
		<not>
			<equals arg1="${central.discovery.path}" arg2="" trim="true" />
		</not>
		<then>
			<echo level="verbose">Generate ${output.dir}/jbosstools-directory.xml pointing at discovery jar: plugins/${central.discovery.jar}</echo>
			<echo file="${output.dir}/jbosstools-directory.xml">&lt;?xml version='1.0' encoding='UTF-8'?>
&lt;directory xmlns="http://www.eclipse.org/mylyn/discovery/directory/">
&lt;entry url="plugins/${central.discovery.jar}" permitCategories="true"/>
&lt;/directory>
</echo>
		<var name="directory.xml.html" value=":: &lt;a href=&quot;jbosstools-directory.xml&quot; style=&quot;font-size:x-small&quot;&gt;jbosstools-directory.xml&lt;/a&gt;"/>
		</then>
	</if>
	</target>

	<target name="transform.site.xml">
		<!-- turn site.xml into site.html via site.xsl -->
		<delete quiet="true" file="${update.site.source.dir}/site.html" />
		<xslt style="site.xsl" in="${update.site.source.dir}/site.xml" out="${update.site.source.dir}/site.html" force="true">
			<classpath location="${COMMON_TOOLS}/saxon.jar" />
		</xslt>
		<!-- merge contents of site.html into index.html, then remove site.html -->
		<loadfile property="site.contents" srcfile="${update.site.source.dir}/site.html" failonerror="false" />
		<property name="site.contents" value="" />
		<delete file="${update.site.source.dir}/site.html" quiet="true" />

		<!-- update site.xml to replace 0.0.0 with actual versions -->
		<xslt style="site.xml.xsl" in="${update.site.source.dir}/site.xml" out="${update.site.source.dir}/site.out.xml" force="true">
			<classpath location="${COMMON_TOOLS}/saxon.jar" />
		</xslt>
	</target>

	<!-- look for http://download.jboss.org/jbosstools/builds/staging/jbosstools-3.*/logs/zip.list.txt; 
	if found, load file and use ${ALL_ZIPS} to get list of relative path zips to fetch -->
	<target name="collect.zips" description="collect zips from the sites we aggregated" unless="collect.zips.skip">
		<property name="aggregate.zips.dir" value="${output.dir}/zips" />
		<delete dir="${aggregate.zips.dir}" quiet="true" />
		<mkdir dir="${aggregate.zips.dir}" />
		<if>
			<isset property="inputRepo" />
			<then>
				<var name="inputRepos" value="1" />
				<var name="inputRepo1" value="${inputRepo}" />
			</then>
		</if>
		<for list="${inputRepos}" delimiter=", " keepgoing="true" param="repoNum">
			<sequential>
				<var name="repo" value="${inputRepo@{repoNum}}" />
				<if>
					<contains string="${repo}" substring="composite" />
					<then>
						<fetchZipsFromMetadata repo="${repo}" />
					</then>
					<else>
						<fetchZipsFromList repo="${repo}" />
					</else>
				</if>
			</sequential>
		</for>
	</target>

	<target name="test.collect.zips.from.metadata" depends="init">
		<property name="isTest" value="true" />
		<antcall target="collect.zips">
			<param name="inputRepos" value="1" />
			<param name="inputRepo1" value="http://download.jboss.org/jbosstools/builds/staging/_composite_/trunk" />
		</antcall>
	</target>

	<target name="test.collect.zips.from.metadata.with.errors" depends="init">
		<property name="isTest" value="true" />
		<antcall target="collect.zips">
			<param name="inputRepos" value="1,2" />
			<param name="inputRepo1" value="http://download.jboss.org/jbosstools/builds/staging/_composite_/NO_SUCH_BRANCH" />
		</antcall>
	</target>

	<target name="test.collect.zips.from.list.xml" depends="init">
		<property name="isTest" value="true" />
		<antcall target="collect.zips">
			<param name="inputRepos" value="1,2,3,4" />
			<param name="inputRepo1" value="http://download.jboss.org/jbosstools/builds/staging/jbosstools-3.2_trunk.component--smooks" />
			<param name="inputRepo2" value="http://download.jboss.org/jbosstools/builds/staging/jbosstools-3.2_trunk.component--modeshape" />
			<param name="inputRepo3" value="http://download.jboss.org/jbosstools/builds/staging/jbosstools-3.2_trunk.component--deltacloud" />
			<param name="inputRepo4" value="http://download.jboss.org/jbosstools/builds/staging/xulrunner-1.9.1.2" />
		</antcall>
	</target>

	<target name="test.collect.zips.from.list.txt" depends="init">
		<property name="isTest" value="true" />
		<antcall target="collect.zips">
			<param name="inputRepos" value="1,2,3,4,5" />
			<param name="inputRepo1" value="http://download.jboss.org/jbosstools/builds/staging/jbosstools-3.2_trunk.component--tests/" />
			<param name="inputRepo2" value="http://download.jboss.org/jbosstools/builds/staging/jbosstools-3.2_trunk.component--common/all/repo" />
			<param name="inputRepo3" value="http://download.jboss.org/jbosstools/builds/staging/jbosstools-3.2_trunk.component--jmx/all/repo/" />
			<param name="inputRepo4" value="http://download.jboss.org/jbosstools/builds/staging/jbosstools-savara-1.1_trunk/tools/" />
			<param name="inputRepo5" value="http://download.jboss.org/jbosstools/builds/staging/jbosstools-savara-1.1_trunk/tools" />
		</antcall>
	</target>

	<target name="test.collect.zips.from.list.with.errors" depends="init">
		<property name="isTest" value="true" />
		<antcall target="collect.zips">
			<param name="inputRepos" value="1,2" />
			<param name="inputRepo2" value="http://download.jboss.org/jbosstools/builds/staging/jbosstools-3.2_trunk.component--NO_SUCH_COMPONENT" />
		</antcall>
	</target>

	<target name="test.collect.zips" depends="test.collect.zips.from.metadata,test.collect.zips.from.list.txt,test.collect.zips.from.list.xml">
		<delete dir="${aggregate.zips.dir}" quiet="true" />
	</target>

	<target name="test.collect.zips.with.error" depends="test.collect.zips.from.metadata.with.errors,test.collect.zips.from.list.with.errors">
		<delete dir="${aggregate.zips.dir}" quiet="true" />
	</target>

	<target name="collect.metadata" description="collect svn revision info + other metadata (JOB_NAME, BUILD_ID, BUILD_NUMBER, WORKSPACE, HUDSON_SLAVE), zip file names+sizes+md5sums">
		<property name="aggregate.zips.dir" value="${output.dir}/zips" />
		<mkdir dir="${aggregate.zips.dir}" />
		<!-- load file properties (name, size, md5sum) -->
		<if>
			<available file="${aggregate.zips.dir}/build.properties.file.txt" type="file" />
			<then>
				<property file="${aggregate.zips.dir}/build.properties.file.txt" />
			</then>
		</if>

		<!-- for all build.properties.txt files in zips/ folder -->
		<for param="propsfile">
			<path>
				<fileset dir="${aggregate.zips.dir}" includes="*.build.properties.txt, **/*.build.properties.txt" />
			</path>
			<sequential>
				<!-- load properties file using a prefix which relates to the associated prop file -->
				<propertyregex override="true" property="prefix" defaultvalue="" input="@{propsfile}" regexp=".+/([^/]+\.build\.properties)\.txt" replace="\1" />
				<echo level="verbose">Read ${prefix} from @{propsfile}</echo>

				<property file="@{propsfile}" prefix="${prefix}" />

				<!-- now load SVN revs -->
				<propertyregex override="true" property="svnrevTXT" defaultvalue="" input="@{propsfile}" regexp="\.build\.properties\.txt" replace=".SVN_REVISION.txt" />
				<propertyregex override="true" property="svnrevXML" defaultvalue="" input="@{propsfile}" regexp="\.build\.properties\.txt" replace=".SVN_REVISION.xml" />
				<if>
					<available file="${svnrevXML}" type="file" />
					<then>
						<!-- XML way: load into .revision.module and .revision.revision -->
						<xmlproperty file="${svnrevXML}" collapseAttributes="true" prefix="${prefix}" keeproot="false" />
						<!-- purge the "<changeSet><kind>" entry if present -->
						<if>
							<isset property="${prefix}.kind" />
							<then>
								<var name="${prefix}.kind" unset="true" />
							</then>
						</if>

						<!-- TXT way: load into .SVN_REVISION -->
						<if>
							<and>
								<isset property="${prefix}.revision.module" />
								<isset property="${prefix}.revision.revision" />
							</and>
							<then>
								<propertycopy from="${prefix}.revision.module" property="temprm.all" override="true" />
								<propertycopy from="${prefix}.revision.revision" property="temprr.all" override="true" />
								<var name="i" value="0" />
								<for list="${temprm.all}" delimiter=", " param="module">
									<sequential>
										<math result="i" operand1="1" operation="+" operand2="${i}" datatype="int" />
										<var name="j" value="0" />
										<for list="${temprr.all}" delimiter=", " param="revision">
											<sequential>
												<math result="j" operand1="1" operation="+" operand2="${j}" datatype="int" />
												<if>
													<equals arg1="${i}" arg2="${j}" />
													<then>
														<var name="temprr" value="@{revision}" />
														<if>
															<isset property="${prefix}.SVN_REVISION" />
															<then>
																<propertycopy from="${prefix}.SVN_REVISION" property="temp.all" override="true" />
																<var name="${prefix}.SVN_REVISION" value="${temp.all},@{module}@${temprr}" />
																<var name="temp.all" unset="true" />
															</then>
															<else>
																<var name="${prefix}.SVN_REVISION" value="@{module}@${temprr}" />
															</else>
														</if>
														<var name="temprr" unset="true" />
													</then>
												</if>
											</sequential>
										</for>
										<var name="j" unset="true" />
									</sequential>
								</for>
								<var name="i" unset="true" />
								<var name="temprm.all" unset="true" />
								<var name="temprr.all" unset="true" />
							</then>
						</if>
					</then>
					<elseif>
						<available file="${svnrevTXT}" type="file" />
						<then>
							<!-- TXT way: load into .SVN_REVISION -->
							<loadfile property="${prefix}.SVN_REVISION" srcFile="${svnrevTXT}" />
							<propertycopy from="${prefix}.SVN_REVISION" property="temp" />
							<propertyregex override="true" property="temp" defaultvalue="${temp}" input="${temp}" regexp="[ \n\t]+" replace="," />
							<propertyregex override="true" property="${prefix}.SVN_REVISION" defaultvalue="${temp}" input="${temp}" regexp=",$" replace="" />

							<!-- XML way: load into .revision.module and .revision.revision -->
							<for list="${temp}" delimiter="," param="pair">
								<sequential>
									<propertyregex override="true" property="temprm" defaultvalue="@{pair}" input="@{pair}" regexp="(.+)@(.+)" replace="\1" />
									<propertyregex override="true" property="temprr" defaultvalue="@{pair}" input="@{pair}" regexp="(.+)@(.+)" replace="\2" />
									<if>
										<isset property="${prefix}.revision.module" />
										<then>
											<propertycopy from="${prefix}.revision.module" property="temprm.all" override="true" />
											<propertycopy from="${prefix}.revision.revision" property="temprr.all" override="true" />
											<var name="${prefix}.revision.module" value="${temprm.all},${temprm}" />
											<var name="${prefix}.revision.revision" value="${temprr.all},${temprr}" />
											<var name="temprm.all" unset="true" />
											<var name="temprr.all" unset="true" />
										</then>
										<else>
											<var name="${prefix}.revision.module" value="${temprm}" />
											<var name="${prefix}.revision.revision" value="${temprr}" />
										</else>
									</if>
									<var name="temprm" unset="true" />
									<var name="temprr" unset="true" />
								</sequential>
							</for>
							<var name="temp" unset="true" />
						</then>
					</elseif>
				</if>

				<var name="prefix" unset="true" />
			</sequential>

		</for>
		<for param="svnrevfile">
			<path>
				<fileset dir="${aggregate.zips.dir}" includes="*.SVN_REVISION.txt, **/*.SVN_REVISION.txt" />
			</path>
			<sequential>
				<!-- load properties file using a prefix which relates to the associated prop file -->
				<propertyregex override="true" property="prefix" defaultvalue="" input="@{propsfile}" regexp=".+/([^/]+\.build\.properties)\.txt" replace="\1" />
				<echo level="verbose">Read ${prefix} from @{propsfile}</echo>

				<property file="@{propsfile}" prefix="${prefix}" />

				<var name="prefix" unset="true" />
			</sequential>

		</for>
		<!-- dump properties to an XML file, filtering for only those properties we care about -->
		<echoproperties format="xml" destfile="${aggregate.zips.dir}/build.properties.all.xml">
			<propertyset>
				<propertyref regex=".*\.build\.properties" />
			</propertyset>
		</echoproperties>

	</target>

	<target name="test.collect.metadata" depends="init">
		<property name="isTest" value="true" />
		<antcall target="collect.metadata">
		</antcall>
	</target>

	<!-- TODO: write this method -->
	<target name="create.summary.file" description="create summary file with list of generated files, sizes, and SVN revisions all linked and ordered by source build job">
	</target>

	<target name="test.create.summary.file" depends="test.collect.zips,test.collect.metadata">
		<property name="isTest" value="true" />
		<antcall target="create.summary.file">
		</antcall>
	</target>

	<target name="get.arch">
		<condition property="ext" value="tar.gz" else="zip">
			<os family="unix" />
		</condition>
		<condition property="os1" value="linux-gtk" else="win32">
			<os family="unix" />
		</condition>
		<condition property="os" value="macosx-cocoa" else="${os1}">
			<os family="mac" />
		</condition>
		<if>
			<os family="unix" />
			<then>
			   <available file="getArch.sh"  property="getArchInSamePath"/>
				<if>
					<isset property="getArchInSamePath"/>
					<then>
						<property name="getArch" value="getArch.sh"/>
					</then>
					<else>
						<property name="getArch" value="${output.dir}/../getArch.sh"/>
					</else>
				</if>

				<!-- Ant thinks that ${os.arch} == i386 for x86_64, so use `uname` instead -->
				<exec executable="bash" outputproperty="arch">
					<arg line="${getArch}" />
				</exec>
			</then>
			<else>
				<condition property="arch" value="x86_64" else="">
					<os arch="amd64" />
				</condition>
			</else>
		</if>
	</target>

	<!-- TODO: replace this cruft with something less crufty - mojo? -->
	<target name="get.eclipse" depends="get.arch">
		<!-- NOTE: must use same platform (50M) or SDK (103M - 168M) version as feature version on target platform, or will get install/update conflicts -->
		<property name="eclipse.version" value="4.2.1" />
		<property name="eclipse.type" value="platform" />
		<property name="eclipse.URL" value="http://www.eclipse.org/downloads/download.php?r=1&amp;file=/eclipse/downloads/drops4/R-4.2.1-201209141800"/>
		<property name="downloadDir" value="${WORKINGDIR}"/>
		<property name="unpackDir" value="${tmpdir}"/>
		<property name="eclipseDir" value="${tmpdir}/eclipse"/>
		<!-- <property name="eclipse.version" value="M20120829-1000" />
		<property name="eclipse.type" value="platform" />
		<property name="eclipse.URL" value="http://www.eclipse.org/downloads/download.php?r=1&amp;file=/eclipse/downloads/drops4/M20120829-1000"/> -->
		<if>
			<equals arg1="${arch}" arg2="x86" />
			<then>
				<property name="eclipse.file" value="eclipse-${eclipse.type}-${eclipse.version}-${os}.${ext}" />
			</then>
			<else>
				<property name="eclipse.file" value="eclipse-${eclipse.type}-${eclipse.version}-${os}-${arch}.${ext}" />
			</else>
		</if>

		<if>
			<not>
				<available file="${downloadDir}/${eclipse.file}" type="file" />
			</not>
			<then>
				<get src="${eclipse.URL}/${eclipse.file}" dest="${downloadDir}/${eclipse.file}" ignoreerrors="false"/>
			</then>
		</if>

		<!-- purge previous eclipse install to avoid conflicts w/ Eclipse feature versions -->
		<delete dir="${unpackDir}" includeemptydirs="true" quiet="true" />

		<untar compression="gzip" dest="${unpackDir}" src="${downloadDir}/${eclipse.file}" overwrite="true" />

		<!-- make eclipse executable -->
		<chmod perm="+x" file="${unpackDir}/eclipse/eclipse" />
	</target>

	<target name="cleanup">
		<delete dir="${tmpdir}" quiet="true" includeemptydirs="true" />
	</target>

</project>
