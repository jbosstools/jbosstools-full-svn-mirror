<project default="custom.build" name="jbosstools aggregate site build.xml">

	<!-- pass in properties to Maven/Ant via Hudson job:
		-DJOB_NAME=${JOB_NAME} 
		-DBUILD_ID=${BUILD_ID} 
		-DBUILD_NUMBER=${BUILD_NUMBER}
	-->

	<!-- if ${WORKSPACE}/site folder exists, target that folder; else generate here. -->
	<condition property="output.dir" value="${WORKSPACE}/results" else="${basedir}">
		<available file="${WORKSPACE}/results" />
	</condition>

	<condition property="COMMON_TOOLS" value="/home/hudson/static_build_env/jbds/tools" else="${java.io.tmpdir}">
		<available file="/home/hudson/static_build_env/jbds" type="dir" />
	</condition>
	<mkdir dir="${COMMON_TOOLS}" />

	<condition property="build.xml" value="/home/hudson/static_build_env/jbds/tools/sources/build/build.xml">
		<available file="/home/hudson/static_build_env/jbds/tools/sources/build/build.xml" type="file" />
	</condition>
	<condition property="build.xml" value="${basedir}/../../build/build.xml">
		<available file="${basedir}/../../build/build.xml" type="file" />
	</condition>
	<condition property="build.xml" value="${basedir}/../../build.xml">
		<available file="${basedir}/../../build.xml" type="file" />
	</condition>
	<!-- if can't calculate where build/build.xml is located, must pass in path from parent when calling this script -->

	<property name="update.site.source.dir" value="${output.dir}/target/site" />

	<!-- load properties from default (or alternate) properties file -->
	<property name="aggregateSite.properties" value="aggregateSite.jbosstools.properties" />
	<property file="${aggregateSite.properties}" />

	<target name="init">
		<ant antfile="${build.xml}" target="init" />
		<taskdef resource="net/sf/antcontrib/antlib.xml">
			<classpath>
				<pathelement location="${COMMON_TOOLS}/ant-contrib.jar" />
			</classpath>
		</taskdef>
	</target>

	<!-- = = = = = = = = = = = = = = = = =
          macrodef: fetchZipsFromList - given a list of zips in zip.list.txt, fetch those zips           
         = = = = = = = = = = = = = = = = = -->
	<macrodef name="fetchZipsFromList">
		<attribute name="repo" default="" />
		<sequential>

			<var name="location.cleaned" value="@{repo}" />
			<propertyregex defaultvalue="${location.cleaned}" input="${location.cleaned}" regexp="/all/repo/*$" replace="" casesensitive="true" override="true" property="location.cleaned" />
			<propertyregex defaultvalue="${location.cleaned}" input="${location.cleaned}" regexp="/tools/*$" replace="" casesensitive="true" override="true" property="location.cleaned" />

			<echo level="verbose">repo = ${location.cleaned}</echo>
			<!-- fetch zip.list.txt file, if available -->
			<var unset="true" name="ALL_ZIPS" />
			<var unset="true" name="wget.return" />
			<!-- quieter output and return code check w/ wget instead of <get> -->
			<exec executable="wget" dir="${aggegate.zips.dir}" failonerror="false" failifexecutionfails="true" resultproperty="wget.return" outputproperty="null">
				<arg line="${location.cleaned}/logs/zip.list.txt -q --no-clobber" />
			</exec>
			<!--get src="${location.cleaned}/logs/zip.list.txt" dest="${aggegate.zips.dir}/zip.list.txt" ignoreerrors="true" /-->
			<if>
				<and>
					<equals arg1="${wget.return}" arg2="0" />
					<available file="${aggegate.zips.dir}/zip.list.txt" type="file" />
				</and>
				<then>
					<!-- load zip.list.txt file, get ALL_ZIPS list -->
					<var unset="true" name="ALL_ZIPS" />
					<property file="${aggegate.zips.dir}/zip.list.txt" />
					<if>
						<isset property="ALL_ZIPS" />
						<then>
							<var name="relativePath" unset="true" />
							<for list="${ALL_ZIPS}" delimiter=", " keepgoing="true" param="zipPath">
								<sequential>
									<propertyregex override="true" property="relativePath" defaultvalue="" input="@{zipPath}" regexp="(.+)/([^/]+.zip)" replace="\1" />
									<mkdir dir="${aggegate.zips.dir}/${relativePath}" />
									<!-- fetch zips to local dir -->
									<echo level="verbose">repoNum = @{repoNum}
relativePath = ${relativePath}
zipPath = @{zipPath}
DEST = ${aggegate.zips.dir}/@{zipPath}
</echo>
									<echo> Zip URL = ${location.cleaned}/@{zipPath}</echo>
									<if>
										<isset property="isTest" />
										<then>
											<touch file="${aggegate.zips.dir}/@{zipPath}" />
										</then>
										<else>
											<var name="wget.return" unset="true" />
											<exec executable="wget" dir="${aggegate.zips.dir}" failonerror="false" failifexecutionfails="false" resultproperty="wget.return" outputproperty="null">
												<arg line="${location.cleaned}/@{zipPath} -q --no-clobber" />
											</exec>
											<!--get src="${location.cleaned}/@{zipPath}" dest="${aggegate.zips.dir}/@{zipPath}" /-->
											<if>
												<not>
													<equals arg1="${wget.return}" arg2="0" />
												</not>
												<then>
													<echo> ** Error [${wget.return}] ** Could not wget ${location.cleaned}/@{zipPath}</echo>
												</then>
											</if>
										</else>
									</if>
								</sequential>
							</for>
							<var name="relativePath" unset="true" />
						</then>
					</if>
					<var unset="true" name="ALL_ZIPS" />
					<delete file="${aggegate.zips.dir}/zip.list.txt" quiet="true" />
				</then>
				<else>
					<echo> ** Error [${wget.return}] ** Could not wget ${location.cleaned}/logs/zip.list.txt</echo>
				</else>
			</if>
			<var name="location.cleaned" unset="true" />
		</sequential>
	</macrodef>

	<!-- = = = = = = = = = = = = = = = = =
          macrodef: fetchZipsFromMetadata - look for compositeArtifacts.xml and parse results
         = = = = = = = = = = = = = = = = = -->
	<macrodef name="fetchZipsFromMetadata">
		<attribute name="repo" default="" />
		<sequential>
			<echo level="verbose">repo = @{repo}</echo>
			<!-- if no zip.list.txt from the inputRepo, then fetch from @{repo}/compositeArtifacts.xml instead -->
			<var name="wget.return" unset="true" />
			<exec executable="wget" dir="${aggegate.zips.dir}" failonerror="false" failifexecutionfails="true" resultproperty="wget.return" outputproperty="null">
				<arg line="@{repo}/compositeArtifacts.xml -q --no-clobber" />
			</exec>
			<if>
				<and>
					<equals arg1="${wget.return}" arg2="0" />
					<available file="${aggegate.zips.dir}/compositeArtifacts.xml" type="file" />
				</and>
				<then>
					<echo level="verbose">Got ${aggegate.zips.dir}/compositeArtifacts.xml</echo>
					<xmlproperty file="${aggegate.zips.dir}/compositeArtifacts.xml" validate="false" collapseAttributes="true" />
					<echo level="verbose">Found ${repository.children.size} contained repos to search</echo>
					<!-- foreach entry repository.children.child.location -->
					<for param="location" list="${repository.children.child.location}">
						<sequential>
							<echo level="error">Site URL = @{location}</echo>
							<fetchZipsFromList repo="@{location}" />
						</sequential>
					</for>
					<delete file="${aggegate.zips.dir}/compositeArtifacts.xml" quiet="true" />
				</then>
				<else>
					<echo> ** Error [${wget.return}] ** Could not wget @{repo}/compositeArtifacts.xml</echo>
				</else>
			</if>
		</sequential>
	</macrodef>

	<target name="add.associate.sites" if="associate.sites">
		<if>
			<and>
				<!-- Defined in aggregateSite.properties -->
				<isset property="associate.sites" />
				<not>
					<equals arg1="${associate.sites}" arg2="" />
				</not>
			</and>
			<then>
				<if>
					<available file="${update.site.source.dir}/content.jar" type="file" />
					<then>
						<unzip src="${update.site.source.dir}/content.jar" dest="${update.site.source.dir}" />
						<delete file="${update.site.source.dir}/content.jar" />
					</then>
				</if>
				<!-- counter variable -->
				<var name="associate.sites.0" value="" />
				<for param="associate.site" list="${associate.sites}" delimiter=", 
	">
					<sequential>
						<var name="associate.sites.0" value="${associate.sites.0}00" />
					</sequential>
				</for>
				<length property="associate.sites.length" string="${associate.sites.0}" />

				<loadfile srcfile="${update.site.source.dir}/content.xml" property="content.xml">
					<filterchain>
						<tailfilter lines="-1" skip="1" />
					</filterchain>
				</loadfile>
				<echo file="${update.site.source.dir}/content.xml" message="${content.xml}" />
				<echo file="${update.site.source.dir}/content.xml" append="true">  &lt;references size='${associate.sites.length}'>
</echo>
				<for param="associate.site" list="${associate.sites}" delimiter=", 
	">
					<sequential>
						<!-- insert into content.xml -->
						<echo file="${update.site.source.dir}/content.xml" append="true">    &lt;repository uri='@{associate.site}' url='@{associate.site}' type='0' options='1'/>
    &lt;repository uri='@{associate.site}' url='@{associate.site}' type='1' options='1'/>
</echo>
					</sequential>
				</for>
				<echo file="${update.site.source.dir}/content.xml" append="true">  &lt;/references>
&lt;/repository>
</echo>
				<copy file="${update.site.source.dir}/content.xml" tofile="${update.site.source.dir}/content.old.xml" overwrite="true" />
				<xslt style="remove-uncategorized.xsl" in="${update.site.source.dir}/content.old.xml" out="${update.site.source.dir}/content.xml" />
				<zip destfile="${update.site.source.dir}/content.jar" basedir="${update.site.source.dir}" includes="content.xml" />
				<delete file="${update.site.source.dir}/content.xml" />
				<delete file="${update.site.source.dir}/content.old.xml" />
			</then>
		</if>
	</target>

	<target name="unpack.zip">
		<unzip src="${output.dir}/target/site_assembly.zip" dest="${update.site.source.dir}" />
	</target>

	<target name="pack.zip">
		<zip destfile="${output.dir}/target/site_assembly.zip" update="true" basedir="${update.site.source.dir}" includes="content.* index.html, web/*.css" />
	</target>

	<target name="check.target">
		<if>
			<or>
				<not>
					<available file="${output.dir}/target/site" type="dir" />
				</not>
				<not>
					<available file="${output.dir}/target/site_assembly.zip" type="file" />
				</not>
			</or>
			<then>
				<fail>
--
This script must ONLY be called via the pom.xml in this directory, not run directly. 
Cannot adjust an update site w/o first building it!
--
To run this build, use Tycho. Try `mvn3 clean install -U -B -fae -q -e`
</fail>
			</then>
		</if>
	</target>

	<target name="add.web.content">
		<!-- 
		Properties needed for index.html are defined in aggregateSite.properties
			update.site.description=Nightly Build
			update.site.version=3.2.0.M2.2010-07-16_13-26-18-H21
			
		or calculated here
			from ${JOB_NAME} = jbosstools-3.2.0.M1.aggregate get 3.2.0.M1  
			from ${BUILD_ID} and ${BUILD_NUMBER}, get .${BUILD_ID}-H${BUILD_NUMBER}
			default update.site.description=Nightly Build
			default update.site.version=(null)
		-->
		<property name="update.site.description" value="Nightly Build" />
		<if>
			<and>
				<not>
					<isset property="update.site.version" />
				</not>
				<isset property="JOB_NAME" />
				<isset property="BUILD_ID" />
				<isset property="BUILD_NUMBER" />
			</and>
			<then>
				<propertyregex override="true" property="update.site.version" defaultvalue="${JOB_NAME}" input="${JOB_NAME}" regexp="jbosstools-([0-9.]+.*).aggregate" replace=": \1.${BUILD_ID}-H${BUILD_NUMBER}" />
			</then>
			<else>
				<property name="update.site.version" value="" />
			</else>
		</if>

		<copy todir="${output.dir}" overwrite="true">
			<fileset file="index-template.html" />
			<mapper type="merge" to="index.html" />
			<filterchain>
				<expandproperties />
			</filterchain>
		</copy>

		<copy todir="${update.site.source.dir}">
			<fileset dir="${output.dir}" includes="index.html, **/*.css" />
		</copy>
	</target>

	<!-- look for http://download.jboss.org/jbosstools/builds/staging/jbosstools-3.2.0.M2.continuous/logs/zip.list.txt; 
	if found, load file and use ${ALL_ZIPS} to get list of relative path zips to fetch -->
	<target name="collect.zips" description="collect zips from the sites we aggregated">
		<property name="aggegate.zips.dir" value="${output.dir}/zips" />
		<delete dir="${aggegate.zips.dir}" quiet="true" />
		<mkdir dir="${aggegate.zips.dir}" />
		<for list="${inputRepos}" delimiter=", " keepgoing="true" param="repoNum">
			<sequential>
				<var name="repo" value="${inputRepo@{repoNum}}" />
				<if>
					<contains string="${repo}" substring="composite" />
					<then>
						<fetchZipsFromMetadata repo="${repo}" />
					</then>
					<else>
						<fetchZipsFromList repo="${repo}" />
					</else>
				</if>
			</sequential>
		</for>
	</target>

	<target name="custom.build" description="aggregate update site extras" depends="init,check.target,add.associate.sites,add.web.content,pack.zip,collect.zips" />

	<target name="test.collect.zips.from.metadata" depends="init">
		<property name="isTest" value="true" />
		<antcall target="collect.zips">
			<param name="inputRepos" value="1" />
			<param name="inputRepo1" value="http://download.jboss.org/jbosstools/builds/staging/_composite_/3.2_stable_branch" />
		</antcall>
	</target>

	<target name="test.collect.zips.from.metadata.with.errors" depends="init">
		<property name="isTest" value="true" />
		<antcall target="collect.zips">
			<param name="inputRepos" value="1,2" />
			<param name="inputRepo1" value="http://download.jboss.org/jbosstools/builds/staging/_composite_/NO_SUCH_BRANCH" />
		</antcall>
	</target>

	<target name="test.collect.zips.from.list" depends="init">
		<property name="isTest" value="true" />
		<antcall target="collect.zips">
			<param name="inputRepos" value="1,2,3,4,5" />
			<param name="inputRepo1" value="http://download.jboss.org/jbosstools/builds/staging/jbosstools-3.2_stable_branch.component--tests" />
			<param name="inputRepo2" value="http://download.jboss.org/jbosstools/builds/staging/jbosstools-3.2_stable_branch.component--common/all/repo" />
			<param name="inputRepo3" value="http://download.jboss.org/jbosstools/builds/staging/jbosstools-3.2_stable_branch.component--jmx/all/repo/" />
			<param name="inputRepo4" value="http://download.jboss.org/jbosstools/builds/staging/jbosstools-savara-1.1_stable_branch/tools/" />
			<param name="inputRepo5" value="http://download.jboss.org/jbosstools/builds/staging/jbosstools-savara-1.1_stable_branch/tools" />
		</antcall>
	</target>

	<target name="test.collect.zips.from.list.with.errors" depends="init">
		<property name="isTest" value="true" />
		<antcall target="collect.zips">
			<param name="inputRepos" value="1,2" />
			<param name="inputRepo2" value="http://download.jboss.org/jbosstools/builds/staging/jbosstools-3.2_stable_branch.component--NO_SUCH_COMPONENT" />
		</antcall>
	</target>

	<target name="test.collect.zips" depends="test.collect.zips.from.metadata,test.collect.zips.from.list">
		<delete dir="${aggegate.zips.dir}" quiet="true" />
	</target>

	<target name="test.collect.zips.with.error" depends="test.collect.zips.from.metadata.with.errors,test.collect.zips.from.list.with.errors">
		<delete dir="${aggegate.zips.dir}" quiet="true" />
	</target>

</project>
