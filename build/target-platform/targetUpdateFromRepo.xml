<project default="custom.build" name="jbosstools target platform updater">

	<property name="outputDir" value="${basedir}" />
	<!-- Instead of overwriting, can also create a new .target file in a different outputDir
		<property name="outputDir" value="${tmpDir}" /> 
	-->

	<!-- must set these commandline if not using defaults -->
	<property name="targetFile" value="multiple.target" />
	<property name="repoDir" value="${outputDir}/REPO/" />

	<!-- create a second .target file which replaces all URLs with a single unified (published) one
		(eg., for jbosstools target platform site), set these properties too -->
	<property name="unified.targetFile" value="unified.target" />
	<property name="unified.URL" value="http://download.jboss.org/jbosstools/updates/target-platform_4.0.juno.SR0a/latest/" />
	<property name="local.targetFile" value="local.target" />
	<property name="local.URL" value="file://${repoDir}" />

	<property name="tmpDir" value="${java.io.tmpdir}/targetUpdateFromRepo" />

	<target name="help">
		<echo>Must set these properties (or use defaults shown):
			
	ant -f targetUpdateFromRepo.xml -DrepoDir=${repoDir} \
		-DtargetFile=${targetFile} \
		-Dunified.targetFile=${unified.targetFile} \
		-Dunified.URL=${unified.URL} \
		-Dlocal.targetFile=${local.targetFile} \
		-Dlocal.URL=${local.URL}

To simply generate a local.target file from the multiple.target file, use:

	ant -f targetUpdateFromRepo.xml local.target</echo>
	</target>

	<target name="custom.build" depends="check.content.xml, get.content.xml, copy.content.xml, contentXml2artifactVersions.xsl, multiple.target, unified.target, local.target, cleanup" />

	<target name="check.content.xml" description="if content.jar, unpack to get content.xml">
		<condition property="content.xml.exists" value="true">
			<available file="${repoDir}/content.xml" />
		</condition>
	</target>
	<target name="get.content.xml" unless="content.xml.exists">
		<echo level="verbose">Unzip ${tmpDir}/content.xml</echo>
		<unzip src="${repoDir}/content.jar" dest="${tmpDir}" />
	</target>
	<target name="copy.content.xml" if="content.xml.exists">
		<echo level="verbose">Copy ${tmpDir}/content.xml</echo>
		<copy file="${repoDir}/content.xml" todir="${tmpDir}" />
	</target>

	<target name="contentXml2artifactVersions.xsl">
		<echo level="verbose">Generate ${tmpDir}/artifactVersions.properties</echo>
		<xslt style="contentXml2artifactVersions.xsl" in="${tmpDir}/content.xml" out="${tmpDir}/artifactVersions.properties" processor="trax" />
	</target>

	<target name="target2targetTemplate" description="run target2targetTemplate.xsl to templatize .target file">
		<property name="outputFile" value="${tmpDir}/${targetFile}.template" />
		<property name="replacement.URL" value="" />
		<echo level="verbose">Generate ${outputFile}</echo>
		<xslt style="target2targetTemplate.xsl" in="${targetFile}" out="${outputFile}" processor="trax">
			<param name="replacement.URL" expression="${replacement.URL}" />
			<!-- if replace.versions is set, will update from versions in repo; if not set, will only update URLs, not IU versions -->
			<param name="replace.versions" expression="1" />
		</xslt>
	</target>

	<target name="multiple.target" description="update the multiple.target file based on new content in the local repo">
		<antcall target="target2targetTemplate" />
		<antcall target="updateTargetFile" />
	</target>

	<target name="unified.target" description="update the unified.target file based on new content in the local repo and replace URLs w/ single unified one">
		<antcall target="target2targetTemplate">
			<param name="outputFile" value="${tmpDir}/${unified.targetFile}.template" />
			<param name="replacement.URL" value="${unified.URL}" />
		</antcall>
		<antcall target="updateTargetFile">
			<param name="targetFile" value="${unified.targetFile}" />
		</antcall>
	</target>

	<target name="local.target" description="create a local.target file (based on new content in the local repo if available) and replace URLs w/ single local one">
		<antcall target="target2targetTemplate">
			<param name="outputFile" value="${tmpDir}/${local.targetFile}.template" />
			<param name="replacement.URL" value="${local.URL}" />
		</antcall>
		<antcall target="updateTargetFile">
			<param name="targetFile" value="${local.targetFile}" />
		</antcall>
	</target>

	<target name="updateTargetFile" description="load generated properties and resolve them in the template to create a new .target file">
		<property file="${tmpDir}/artifactVersions.properties" />
		<copy todir="${outputDir}" overwrite="true">
			<fileset file="${tmpDir}/${targetFile}.template" />
			<mapper type="merge" to="${targetFile}" />
			<filterchain>
				<expandproperties />
			</filterchain>
		</copy>
	</target>

	<target name="cleanup" description="purge temporary dir">
		<delete dir="${tmpDir}" includeemptydirs="true" quiet="true" />
	</target>

	<!-- test examples:
	     	cd ~/32x/build/target-platform
		ant -f targetUpdateFromRepo.xml test.updateTargetFile -Dtest.pattern=swtbot
		ant -f targetUpdateFromRepo.xml test.updateTargetFile -Dtest.pattern=js -DtargetFile=jbds.target -DrepoDir=`pwd`/JBDS_REPO/
	-->
	<target name="test.updateTargetFile" depends="check.content.xml, get.content.xml, copy.content.xml, contentXml2artifactVersions.xsl">
		<!-- properties to set commandline: -->
		<property name="test.pattern" value="swtbot"/>
		<property name="test.targetFile" value="${targetFile}"/>

		<property name="tmpfile" value="${tmpDir}/test.updateTargetFile.tmp"/>
		<property name="tmpfile2" value="${tmpDir}/test.updateTargetFile.tmpsed"/>
		<echo level="info">Load /${test.pattern}/ properties from ${tmpDir}/artifactVersions.properties</echo>
		<loadfile srcfile="${tmpDir}/artifactVersions.properties" property="artifactVersionsPropertiesContents">
			<filterchain>
				<linecontains>
					<contains value="${test.pattern}" />
					<contains value="feature.group" />
				</linecontains>
			</filterchain>
		</loadfile>
		<echo file="${tmpfile}">${artifactVersionsPropertiesContents}</echo>

		<antcall target="target2targetTemplate">
			<param name="outputFile" value="${tmpDir}/${test.targetFile}.template" />
			<param name="replacement.URL" value="${unified.URL}" />
		</antcall>
		<!-- <echo level="info">Generated ${tmpDir}/${unified.targetFile}.template: </echo>
	<exec executable="egrep">
			<arg line="&quot;${test.pattern}&quot; ${tmpDir}/${test.targetFile}.template" />
		</exec> -->

		<antcall target="updateTargetFile">
			<param name="targetFile" value="${test.targetFile}" />
		</antcall>
		<echo level="info">--
If loaded version values (in artifactVersions.properties) do not match  
output below (values from repo), an error has occurred or replace.versions is undefined.
It is also possible that the complete list of features in the repo is greater than those 
in the target. If so, clean the repo and regenerate to remove extraneous content.
--</echo>
		<!-- $ sed -n -e '/swtbot.*feature.group/ p' unified.target | sed -e 's/\t\t\t<unit id="\|"\/>//g' -->
		<exec executable="sed" output="${tmpfile2}">
			<arg line=" -n -e '/${test.pattern}.*feature.group/ p' ${test.targetFile}" />
		</exec>
		<exec executable="sed" output="${tmpfile}.2">
			<arg line=" -e 's/\t\t\t&lt;unit id=&quot;\|&quot;\/&gt;//g' ${tmpfile2} -e 's/&quot; version=&quot;/.version=/g'" />
		</exec>
		<exec executable="sort" output="${tmpfile}.sorted"><arg line="${tmpfile}"/></exec>
		<exec executable="sort" output="${tmpfile}.2.sorted"><arg line="${tmpfile}.2"/></exec>
		<exec executable="diff" outputproperty="diffout">
			<arg line="${tmpfile}.sorted ${tmpfile}.2.sorted"/>
		</exec>
		<echo>${diffout}</echo>
		<antcall target="cleanup"/>
	</target>
</project>
