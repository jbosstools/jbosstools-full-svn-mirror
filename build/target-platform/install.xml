<project default="run" basedir="." name="Install a target platform into local Eclipse">
	<!-- To fetch a number of features remote repo(s) and mirror them locally, run this in target/platform dir:
	
		~/eclipse/36clean/eclipse/eclipse -vm /opt/sun-java2-6.0/bin/java -nosplash \
		    -data /tmp/workspace -consolelog -application org.eclipse.ant.core.antRunner \
		    -f ./install.xml \
			  -Dtarget.to.install=e36-wtp32.target \
			  -Drepo.dir=/tmp/p2.mirror \
			  -Dinstall.dir=/home/nboldt/eclipse/36clean2/eclipse \
			| tee log.txt
			
			ALTERNATIVE PLAN:
			
			generate metadata (content.xml) for file:/home/nboldt/eclipse/workspace-clean36/.metadata/.plugins/org.eclipse.pde.core/.bundle_pool/
			install from there (already on disk)
	-->

	<!-- what target file to be installed -->
	<property name="target.to.install" value="e36-wtp32.target" />

	<!-- where to download and create mirror repo -->
	<property name="repo.dir" value="${java.io.tmpdir}/p2.mirror" />

	<!-- where to install target: into ${eclipse.home} or /path/to/eclipse -->
	<!-- <property name="install.dir" value="${eclipse.home}" /> -->
	<!-- <property name="install.dir" value="/home/nboldt/eclipse/36clean2/eclipse" /> -->

	<target name="init" unless="install.dir">
		<fail>Must set these properties:
  -Dtarget.to.install=e36-wtp32.target
  -Drepo.dir=${java.io.tmpdir}/p2.mirror
  -Dinstall.dir=/home/nboldt/eclipse/36clean2/eclipse
</fail>
	</target>

	<target name="run" depends="init" if="install.dir">
		<mkdir dir="${repo.dir}" />

		<!-- create p2.mirror ant script -->
		<property name="mirror" value="${java.io.tmpdir}/p2.mirror.xml" />
		<xslt style="target2ant.xsl" in="${target.to.install}" out="${mirror}" force="true" />

		<!-- run generated p2.mirror ant script -->
		<ant antfile="p2.mirror.xml">
			<property name="repo.dir" value="${repo.dir}" />
		</ant>

		<!-- generate a site.xml for all the features available -->
		<antcall target="buildSiteXml" />

		<!-- TODO: delete existing metadata in ${repo.dir} before regenerating it? -->
		<delete dir="${repo.dir}" includes="artifacts.xml, artifacts.jar, content.xml, content.jar" />

		<!-- generate metadata -->
		<!-- TODO: switch to use Publisher: http://wiki.eclipse.org/Equinox/p2/Publisher#Features_and_Bundles_Publisher_Task
		<p2.publish.featuresAndBundles
    metadataRepository="file:/repository/location"
    artifactRepository="file:/repository/location"
    publishArtifacts="true"
    compress="true"
    source="/bundles/and/features/location/">
    	-->
		<java classname="org.eclipse.equinox.launcher.Main"
		      fork="true"
		      timeout="10800000"
		      jvm="${java.home}/bin/java"
		      failonerror="false"
		      maxmemory="512m"
		      taskname="p2"
		>
			<classpath>
				<fileset dir="${eclipse.home}/plugins"
				         includes="org.eclipse.equinox.launcher_*.jar, org.eclipse.equinox.p2.metadata.generator_*.jar"
				/>
				<pathelement location="${eclipse.home}/plugins" />
			</classpath>
			<arg line="-application org.eclipse.equinox.p2.metadata.generator.EclipseGenerator" />
			<arg line=" -updateSite ${repo.dir}/ -site file:${repo.dir}/site.xml" />
			<arg line="-metadataRepository file://${repo.dir} -metadataRepositoryName &quot;Local Mirror Repo&quot;" />
			<arg line="-artifactRepository file://${repo.dir} -artifactRepositoryName &quot;Local Mirror Artifacts&quot;"
			/>
			<arg line="-compress -noDefaultIUs -reusePack200Files" />
		</java>

		<!-- cleanup -->
		<delete file="${mirror}" quiet="true" />

		<!-- run p2.director to install from repo.dir into install.dir -->
		<chmod perm="+x" file="${eclipse.home}/eclipse" />
		<exec executable="${eclipse.home}/eclipse"
		      failonerror="true"
		      dir="${eclipse.home}"
		      timeout="900000"
		      taskname="p2.dir"
		>
			<arg line=" -vm ${java.home}/bin/java" />
			<arg line=" -application org.eclipse.equinox.p2.director" />
			<arg line=" -nosplash --launcher.suppressErrors -consoleLog -flavor tooling -roaming -profile SDKProfile" />
			<!-- <arg line=" -installIU ... -installIU ... " /> -->
			<arg line=" -destination ${install.dir} -bundlepool ${install.dir}" />
			<arg line=" -metadataRepository file://${repo.dir} -artifactRepository file://${repo.dir}" />
			<arg line=" -profileProperties org.eclipse.update.install.features=true" />
			<arg line=" -vmargs -Declipse.p2.data.area=${install.dir}/p2 -Declipse.p2.MD5Check=false" />
		</exec>
	</target>

	<target name="buildSiteXml" description="Generate a site.xml to contain the features in a category">
		<echo level="info">Generating site.xml for use with p2 repo / update site categories...</echo>
		<echo file="${repo.dir}/site.xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</echo>
		<if>
			<equals arg1="${pack200Files}" arg2="-reusePack200Files" />
			<then>
				<echo append="true" file="${repo.dir}/site.xml">&lt;site pack200="true"&gt;</echo>
			</then>
			<else>
				<echo append="true" file="${repo.dir}/site.xml">&lt;site&gt;</echo>
			</else>
		</if>

		<property name="category.name" value="Subversive Repo" />

		<echo append="true" file="${repo.dir}/site.xml">	&lt;description&gt;To install these features, point Eclipse at this site.&lt;/description&gt;

		&lt;!-- ${category.name} --&gt;
		&lt;category-def label="${category.name}" name="${category.name}"&gt;
			&lt;description&gt;${category.name}: contains all features in this build.&lt;/description&gt;
		&lt;/category-def&gt;
	</echo>

		<for param="featureJar">
			<path>
				<fileset dir="${repo.dir}/features" includes="*.jar" />
			</path>
			<sequential>
				<var name="feature.jarfile" unset="true" />
				<var name="feature.id" unset="true" />
				<var name="feature.version" unset="true" />
				<propertyregex property="feature.jarfile"
				               defaultvalue="@{featureJar}"
				               input="@{featureJar}"
				               regexp=".+/features/([^/]+\.jar)"
				               replace="\1"
				               override="true"
				/>
				<propertyregex property="feature.id"
				               defaultvalue="${feature.jarfile}"
				               input="${feature.jarfile}"
				               regexp="([^_]+)_(\d+\.\d+\.\d+\..+)\.jar"
				               replace="\1"
				               override="true"
				/>
				<propertyregex property="feature.version"
				               defaultvalue="${feature.jarfile}"
				               input="${feature.jarfile}"
				               regexp="([^_]+)_(\d+\.\d+\.\d+\..+)\.jar"
				               replace="\2"
				               override="true"
				/>
				<echo append="true" file="${repo.dir}/site.xml">	&lt;feature id="${feature.id}" version="${feature.version}" url="features/${feature.jarfile}" patch="false"&gt;
			&lt;category name="${category.name}"/&gt;
		&lt;/feature&gt;
	</echo>
				<var name="feature.jarfile" unset="true" />
				<var name="feature.id" unset="true" />
				<var name="feature.version" unset="true" />
			</sequential>
		</for>
		<echo append="true" file="${repo.dir}/site.xml">
	&lt;/site&gt;
	</echo>
	</target>
</project>
