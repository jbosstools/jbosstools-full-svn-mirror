<project default="run" basedir="." name="jbosstools build.xml">
	<!-- Build a given list of ${COMPONENTS} -->

	<!-- ****************************** Configuration ****************************** -->

	<!-- set name of component(s) to build+test, IN ORDER -->
	<property name="COMPONENTS"
	          value="tests,common;
    flow,jbpm;
    jmx,archives,as;
    drools,bpel,smooks,freemarker,profiler,portlet;
    xulrunner,jst,vpe,jsf;
        esb,tptp,ws;
        cdi,struts,hibernatetools,seam;
            examples,birt;
            maven;
site"
	/>
	<!-- TODO: add modeshape, which reqs JDK6 -->

	<!-- svn root, including trunk or branch path -->
	<property name="svn.root" value="http://anonsvn.jboss.org/repos/jbosstools/branches/modular_build" />

	<!-- default maven version -->
	<property name="maven.version" value="3.0-beta-1" />

	<!-- name/version we're building -->
	<property name="product.name" value="JBoss Tools" />
	<property name="product.id" value="JBossTools" />
	<property name="product.version" value="3.2.0-beta-1" />
	<!--
	<property name="product.name" value="JBoss Developer Studio"/>
	<property name="product.id" value="JBDS"/>
	<property name="product.version" value="3.1.0-beta-1"/>
	-->

	<!-- ****************************** Usage Instructions ****************************** -->
	<target name="help" description="Usage Instructions" depends="init">
		<echo>
To run this script in Eclipse:
    Run As > Ant Build

To run this script via commandline (build default modules + run tests):
    cd /home/nboldt/workspace36/jbosstools-modular_build; ant

or, to build everything but not *run* the tests:
    cd /home/nboldt/workspace36/jbosstools-modular_build; \
    ant -DMAVEN_FLAGS="clean install -Dmaven.test.skip"

or, to build specific module(s): 
    cd /home/nboldt/workspace36/jbosstools-modular_build; \
    ant -DCOMPONENTS=tests,common,flow,jbpm

or, to rebuild even if sources have not changed:
    cd /home/nboldt/workspace36/jbosstools-modular_build; \
    ant -DCOMPONENTS=tests,common -Dbuild.if.sources.unchanged=true

or, to (re-)run tests w/o (re-)building first:
    cd /home/nboldt/workspace36/jbosstools-modular_build; \
    ant -DCOMPONENTS=tests,common,jmx -DMAVEN_FLAGS="osgi-test:test -B -fn"

Note: if tests stall on Linux, install Xvfb and this script will use that to run Maven.

Here is the order in which components must be built:
</echo>
		<for param="COMPONENT" list="${COMPONENTS}" delimiter=";">
			<sequential>
				<echo message="    @{COMPONENT}," />
			</sequential>
		</for>
	</target>

	<target name="run"
	        depends="init, get.bootstrap.scripts, get.sources, get.components.to.build, run.build, collect.all.test.results, create.overall.update.site"
	/>

	<target name="test"
	        description="run tests w/o first getting sources + list of components to build; assumes an upstream build job was already run"
	        depends="init, get.bootstrap.scripts, get.components.to.test, run.build, collect.all.test.results"
	/>

	<!-- override for local build -->
	<condition property="isInHudson" value="true">
		<or>
			<contains string="${user.dir}" substring="hudson" />
			<contains string="${user.name}" substring="hudson" />
			<contains string="${user.home}" substring="hudson" />
		</or>
	</condition>
	<target name="local" unless="isInHudson">
		<property name="WORKINGDIR" value="${basedir}" />
		<property name="COMMON_TOOLS" value="${java.io.tmpdir}" />
	</target>

	<target name="get.ant-contrib" unless="ant-contrib.jar.exists">
		<property name="ANTCONTRIB_MIRROR" value="http://downloads.sourceforge.net/ant-contrib/" />
		<get usetimestamp="true"
		     dest="${COMMON_TOOLS}/ant-contrib-1.0b2-bin.zip"
		     src="${ANTCONTRIB_MIRROR}/ant-contrib-1.0b2-bin.zip"
		/>
		<touch file="${COMMON_TOOLS}/ant-contrib-1.0b2-bin.zip" />
		<mkdir dir="${java.io.tmpdir}/ant-contrib-1.0b2-bin.zip_" />
		<unzip src="${COMMON_TOOLS}/ant-contrib-1.0b2-bin.zip"
		       dest="${java.io.tmpdir}/ant-contrib-1.0b2-bin.zip_"
		       overwrite="true"
		/>
		<copy file="${java.io.tmpdir}/ant-contrib-1.0b2-bin.zip_/ant-contrib/lib/ant-contrib.jar"
		      tofile="${COMMON_TOOLS}/ant-contrib.jar"
		      failonerror="true"
		/>
		<delete dir="${java.io.tmpdir}/ant-contrib-1.0b2-bin.zip_" includeemptydirs="true" quiet="true" />
	</target>

	<target name="get.svnant" unless="svnant.jar.exists">
		<property name="SVNANT_MIRROR" value="http://www.tigris.org/files/documents/906/46267" />
		<!-- ant <get> does not work due to redirection; on Windows just download this file manually -->
		<exec executable="wget" dir="${COMMON_TOOLS}">
			<arg line="${SVNANT_MIRROR}/svnant-1.3.0.zip --no-clobber" />
		</exec>
		<touch file="${COMMON_TOOLS}/svnant-1.3.0.zip" />
		<mkdir dir="${java.io.tmpdir}/svnant-1.3.0.zip_" />
		<unzip src="${COMMON_TOOLS}/svnant-1.3.0.zip" dest="${java.io.tmpdir}/svnant-1.3.0.zip_" overwrite="true" />
		<copy todir="${COMMON_TOOLS}" failonerror="true">
			<fileset dir="${java.io.tmpdir}/svnant-1.3.0.zip_/svnant-1.3.0/lib/" includes="*.jar" />
		</copy>
		<delete dir="${java.io.tmpdir}/svnant-1.3.0.zip_" includeemptydirs="true" quiet="true" />
	</target>

	<target name="get.maven" unless="maven.exists">
		<property name="MAVEN_MIRROR" value="http://mirror.csclub.uwaterloo.ca/apache/maven/binaries" />
		<get usetimestamp="true"
		     dest="${COMMON_TOOLS}/apache-maven-${maven.version}-bin.tar.gz"
		     src="${MAVEN_MIRROR}/apache-maven-${maven.version}-bin.tar.gz"
		/>
		<untar compression="gzip"
		       overwrite="false"
		       dest="${COMMON_TOOLS}"
		       src="${COMMON_TOOLS}/apache-maven-${maven.version}-bin.tar.gz"
		/>
		<chmod perm="755" file="${COMMON_TOOLS}/apache-maven-${maven.version}/bin/mvn" />
	</target>

	<target name="init" depends="local">
		<macrodef name="now">
			<attribute name="level" default="warning" />
			<text name="info" optional="true" />
			<sequential>
				<var name="now" unset="true" />
				<tstamp>
					<format property="now" pattern="hh:mm:ss" />
				</tstamp>
				<echo level="@{level}">${now} @{info}</echo>
			</sequential>
		</macrodef>

		<!-- https://jira.jboss.org/jira/browse/JBQA-3313 Use static, shared space outside workspace, instead of working directly in the workspace -->
		<condition property="WORKINGDIR" value="/home/hudson/static_build_env/jbds/tools/sources" else="${basedir}">
			<available file="/home/hudson/static_build_env/jbds" type="dir" />
		</condition>
		<mkdir dir="${WORKINGDIR}" />
		<echo level="info">WORKINGDIR = ${WORKINGDIR}</echo>

		<condition property="COMMON_TOOLS"
		           value="/home/hudson/static_build_env/jbds/tools"
		           else="${WORKINGDIR}/../tools"
		>
			<available file="/home/hudson/static_build_env/jbds" type="dir" />
		</condition>
		<mkdir dir="${COMMON_TOOLS}" />
		<echo level="info">COMMON_TOOLS = ${COMMON_TOOLS}</echo>

		<available file="${COMMON_TOOLS}/ant-contrib.jar" type="file" property="ant-contrib.jar.exists" />
		<antcall target="get.ant-contrib" />
		<taskdef resource="net/sf/antcontrib/antlib.xml">
			<classpath>
				<pathelement location="${COMMON_TOOLS}/ant-contrib.jar" />
			</classpath>
		</taskdef>

		<available file="${COMMON_TOOLS}/svnant.jar" type="file" property="svnant.jar.exists" />
		<antcall target="get.svnant" />
		<taskdef resource="org/tigris/subversion/svnant/svnantlib.xml">
			<classpath>
				<pathelement location="${COMMON_TOOLS}/svnant.jar" />
				<pathelement location="${COMMON_TOOLS}/svnkit.jar" />
				<pathelement location="${COMMON_TOOLS}/svnClientAdapter.jar" />
			</classpath>
		</taskdef>

		<available file="${COMMON_TOOLS}/apache-maven-${maven.version}/bin/mvn" type="file" property="maven.exists" />
		<antcall target="get.maven" />
	</target>

	<target name="get.sources" description="if sources not already on disk, fetch them">
		<property name="clean.sources" value="false" />
		<property name="svn.recurse" value="true" />

		<!-- = = = = = = = = = = = = = = = = =
          COMPONENT: component to fetch or update
          op: up (update) or co (checkout)
         = = = = = = = = = = = = = = = = = -->
		<macrodef name="svn.fetch">
			<attribute name="component" />
			<attribute name="op" />
			<sequential>
				<!-- check out or update -->
				<if>
					<equals arg1="@{op}" arg2="up" />
					<then>
						<now level="info">Update @{COMPONENT}</now>
						<svn javahl="false" svnkit="true" failonerror="false">
							<update recurse="${svn.recurse}" dir="@{component}" />
						</svn>
					</then>
					<else>
						<now level="info">Fetch sources from ${svn.root}/@{component} into ${WORKINGDIR}/@{component}</now>
						<svn javahl="false" svnkit="true" failonerror="true">
							<checkout recurse="${svn.recurse}"
							          url="${svn.root}/@{component}"
							          destpath="${WORKINGDIR}/@{component}"
							/>
						</svn>
					</else>
				</if>

				<!-- Store svn info so we can compare it later and thus not need to update or checkout every time -->
				<svn javahl="false" svnkit="true" failonerror="false">
					<info target="${WORKINGDIR}/@{component}" propprefix="svn.info.@{component}" verbose="false" />
				</svn>
				<if>
					<isset property="svn.info.@{component}.rev" />
					<then>
						<echo file="${WORKINGDIR}/svn.info-@{component}.txt">svn.info.@{component}.rev = ${svn.info.@{component}.rev}
</echo>
					</then>
				</if>
				<echo file="build.cfg" message="@{component}," append="true" />
			</sequential>
		</macrodef>

		<!-- check for each component dir in ${WORKINGDIR}; if not found, fetch -->
		<echo file="build.cfg" message="COMPONENTS.to.build = " />
		<if>
			<and>
				<isset property="COMPONENT" />
				<not>
					<equals arg1="${COMPONENT}" arg2="" />
				</not>
			</and>
			<then>
				<var name="COMPONENTS" unset="true" />
				<var name="COMPONENTS" value="${COMPONENT}" />
			</then>
		</if>
		<for param="COMPONENT" list="${COMPONENTS}" delimiter=",; 
	">
			<sequential>
				<if>
					<equals arg1="${clean.sources}" arg2="true" />
					<then>
						<delete dir="${WORKINGDIR}/@{COMPONENT}" includeemptydirs="true" quiet="true" />
					</then>
				</if>
				<if>
					<not>
						<available file="${WORKINGDIR}/@{COMPONENT}" type="dir" />
					</not>
					<then>
						<svn.fetch component="@{COMPONENT}" op="co" />
					</then>
					<else>
						<if>
							<available file="${WORKINGDIR}/svn.info-@{COMPONENT}.txt" type="file" />
							<then>
								<property file="${WORKINGDIR}/svn.info-@{COMPONENT}.txt" />
								<!-- check svn info; if new version found, svn up -->
								<svn javahl="false" svnkit="true" failonerror="false">
									<info target="${WORKINGDIR}/@{COMPONENT}"
									      propprefix="svn.info.@{COMPONENT}.check"
									      verbose="false"
									/>
								</svn>
								<if>
									<or>
										<not>
											<isset property="svn.info.@{COMPONENT}.rev" />
										</not>
										<not>
											<isset property="svn.info.@{COMPONENT}.check.rev" />
										</not>
										<not>
											<equals arg1="${svn.info.@{COMPONENT}.rev}"
											        arg2="${svn.info.@{COMPONENT}.check.rev}"
											/>
										</not>
									</or>
									<then>
										<svn.fetch component="@{COMPONENT}" op="up" />
									</then>
									<else>
										<if>
											<and>
												<isset property="build.if.sources.unchanged" />
												<istrue value="${build.if.sources.unchanged}" />
											</and>
											<then>
												<echo file="build.cfg" message="@{COMPONENT}," append="true" />
											</then>
										</if>
									</else>
								</if>
							</then>
							<else>
								<svn.fetch component="@{COMPONENT}" op="up" />
							</else>
						</if>
					</else>
				</if>
			</sequential>
		</for>

	</target>

	<target name="get.bootstrap.scripts">
		<!-- also get files required to bootstrap the build -->
		<get src="${svn.root}/parent-pom.xml" dest="${WORKINGDIR}/parent-pom.xml" usetimestamp="true" />
		<get src="${svn.root}/genpom.xml" dest="${WORKINGDIR}/genpom.xml" usetimestamp="true" />
	</target>

	<target name="get.components.to.test">
		<var name="COMPONENTS.to.build" unset="true" />
		<var name="COMPONENTS.to.build" value="" />
		<for param="COMPONENT" list="${COMPONENTS}" delimiter="; ">
			<sequential>
				<var name="COMPONENTS.to.build" value="${COMPONENTS.to.build}@{COMPONENT}," />
			</sequential>
		</for>
	</target>

	<target name="get.components.to.build">
		<property file="build.cfg" />
		<if>
			<equals arg1="${COMPONENTS.to.build}" arg2="" />
			<then>
				<echo level="warning">All components up to date: nothing to do!
To force a build of unchanged components, use -Dbuild.if.sources.unchanged=true</echo>

				<!-- create fake test result file to avoid Hudson failure -->
				<delete dir="${basedir}/surefire-reports/NoTestsRun" includeemptydirs="true" />
				<mkdir dir="${basedir}/surefire-reports/NoTestsRun" />
				<echo file="${basedir}/surefire-reports/NoTestsRun/TEST-org.jboss.tools.NoTestsRun.xml">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;
&lt;testsuite failures="0" time="0.001" errors="0" skipped="0" tests="1" name="org.jboss.tools.NoTestsRun"&gt;
  &lt;testcase time="0.001" classname="org.jboss.tools.NoTestsRun" name="NoTestsRun"/&gt;
&lt;/testsuite&gt;
</echo>
				<property name="no.tests.run" value="true" />
			</then>
			<else>
				<echo level="warning">The following components' sources have changed and will be built:
	COMPONENTS.to.build = ${COMPONENTS.to.build}
</echo>
			</else>
		</if>
	</target>

	<target name="run.build">
		<!-- could set -Dmaven.test.skip to skip tests, or use osgi-test:test to just (re-)run tests w/o first building -->
		<property name="MAVEN_FLAGS" value="install -B -fn -q" />
		<for param="COMPONENT" list="${COMPONENTS.to.build}" delimiter=", 
	">
			<sequential>
				<now level="warning">Build @{COMPONENT}</now>
				<!-- If poms already exist, DO NOT OVERWRITE unless overwrite.existing.pom.xml=true -->
				<ant antfile="genpom.xml" target="run" dir="${WORKINGDIR}">
					<property name="COMPONENT" value="@{COMPONENT}" />
				</ant>

				<var name="mvnExe" value="mvn" />
				<antcallback target="getMvnExe" return="mvnExe" />

				<echo level="verbose">Exe: ${COMMON_TOOLS}/apache-maven-${maven.version}/bin/${mvnExe}</echo>
				<echo level="verbose">Pom: ${WORKINGDIR}/@{COMPONENT}/pom.xml</echo>
				<!-- 3 hr timeout = 10800000ms -->
				<exec executable="${COMMON_TOOLS}/apache-maven-${maven.version}/bin/${mvnExe}"
				      dir="${WORKINGDIR}/@{COMPONENT}"
				      failifexecutionfails="true"
				      failonerror="true"
				      timeout="10800000"
				>
					<env key="M2_HOME" value="${COMMON_TOOLS}/apache-maven-${maven.version}" />
					<env key="MAVEN_OPTS" value="-Xms512m -Xmx1024m -XX:PermSize=128m -XX:MaxPermSize=256m" />
					<!-- more debug output with <env key="MAVEN_OPTS" value="-Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000"/> -->
					<!-- <arg line="-o -Dmaven.test.skip" /> -->
					<arg line="${MAVEN_FLAGS} -Dmaven.repo.local=${COMMON_TOOLS}/m2-repository" />
				</exec>
				<!-- don't collect test results if there are no test results to collect! -->
				<if>
					<not>
						<contains string="${MAVEN_FLAGS}" substring="-Dmaven.test.skip" />
					</not>
					<then>
						<antcall target="collect.test.results">
							<param name="COMPONENT" value="@{COMPONENT}" />
						</antcall>
					</then>
					<else>
						<property name="no.tests.run" value="true" />
					</else>
				</if>
			</sequential>
		</for>
		<now level="info">Builds done</now>
	</target>

	<!-- Use Xvfb wrapper for maven when invoking UI tests -->
	<target name="getMvnExe" unless="noXvfb">
		<if>
			<available file="/usr/bin/Xvfb" type="file" />
			<then>
				<if>
					<not>
						<available file="${COMMON_TOOLS}/apache-maven-${maven.version}/bin/mvnWithXvfb" type="file" />
					</not>
					<then>
						<echo file="${COMMON_TOOLS}/apache-maven-${maven.version}/bin/mvnWithXvfb">#!/bin/bash
if [[ -f /tmp/.X3-lock ]]; then 
kill -9 `cat /tmp/.X3-lock`
rm -fr /tmp/.X3-lock
fi
/usr/bin/Xvfb :3 -ac 2&gt;&amp;1 1&gt;/dev/null &amp; 
DISPLAY=:3 /opt/maven3/bin/mvn $* 
kill -9 `cat /tmp/.X3-lock`
rm -fr /tmp/.X3-lock
</echo>
						<chmod perm="755" file="${COMMON_TOOLS}/apache-maven-${maven.version}/bin/mvnWithXvfb" />
					</then>
				</if>
				<var name="mvnExe" value="mvnWithXvfb" />
			</then>
		</if>
	</target>

	<target name="collect.test.results">
		<delete dir="${basedir}/surefire-reports/NoTestsRun" includeemptydirs="true" />
		<property name="COMPONENT" value="" />
		<!-- collect test results by copying ${WORKINGDIR}/${COMPONENT}/**/target/surefire-reports/*.xml into ${basedir}/surefire-reports/${COMPONENT} -->
		<delete dir="${basedir}/surefire-reports/${COMPONENT}" includeemptydirs="true" />
		<mkdir dir="${basedir}/surefire-reports/${COMPONENT}" />
		<copy todir="${basedir}/surefire-reports/${COMPONENT}"
		      flatten="true"
		      preservelastmodified="true"
		      overwrite="true"
		>
			<fileset dir="${WORKINGDIR}/${COMPONENT}" includes="**/target/surefire-reports/*.xml" />
		</copy>
	</target>

	<target name="collect.all.test.results" unless="no.tests.run">
		<var name="test.results.all" value="" />
		<var name="test.results.errors.failures.skipped" value="" />

		<!-- Parse this: <testsuite errors="0" skipped="0" tests="10" time="0.042" failures="0" name="org.jboss.tools.jmx.ui.JMXUIAllTests"> -->
		<for param="testresultfile" delimiter=", 
		">
			<path>
				<fileset dir="${basedir}/surefire-reports/" includes="**/*.xml" />
			</path>
			<sequential>
				<var name="testsuite.name" unset="true" />
				<var name="testsuite.tests" unset="true" />
				<var name="testsuite.time" unset="true" />
				<var name="testsuite.skipped" unset="true" />
				<var name="testsuite.errors" unset="true" />
				<var name="testsuite.failures" unset="true" />
				<xmlproperty file="@{testresultfile}" keepRoot="true" collapseAttributes="true" />
				<for param="ts" list="testsuite.skipped, testsuite.errors, testsuite.failures" delimiter=", ">
					<sequential>
						<propertyregex override="true"
						               property="ts.label"
						               defaultvalue="@{ts}"
						               input="@{ts}"
						               regexp="testsuite\.(.+)"
						               replace="\1"
						/>
						<if>
							<isset property="@{ts}" />
							<then>
								<if>
									<equals arg1="${@{ts}}" arg2="0" />
									<then>
										<var name="@{ts}" value="" />
									</then>
									<else>
										<var name="@{ts}" value="; ${@{ts}} ${ts.label}" />
									</else>
								</if>
							</then>
						</if>

					</sequential>
				</for>
				<if>
					<or>
						<not>
							<equals arg1="${testsuite.skipped}" arg2="" />
						</not>
						<not>
							<equals arg1="${testsuite.errors}" arg2="" />
						</not>
						<not>
							<equals arg1="${testsuite.failures}" arg2="" />
						</not>
					</or>
					<then>
						<var name="test.results.errors.failures.skipped"
						     value="${test.results.errors.failures.skipped}${testsuite.name} ran ${testsuite.tests} tests in ${testsuite.time}s${testsuite.skipped}${testsuite.errors}${testsuite.failures}${line.separator}"
						/>
					</then>
				</if>
				<var name="test.results.all"
				     value="${test.results.all}${testsuite.name} ran ${testsuite.tests} tests in ${testsuite.time}s${testsuite.skipped}${testsuite.errors}${testsuite.failures}${line.separator}"
				/>
				<var name="testsuite.name" unset="true" />
				<var name="testsuite.tests" unset="true" />
				<var name="testsuite.time" unset="true" />
				<var name="testsuite.skipped" unset="true" />
				<var name="testsuite.errors" unset="true" />
				<var name="testsuite.failures" unset="true" />
			</sequential>
		</for>
		<echo level="verbose">-------------------------------------------------------
 A L L   T E S T   R E S U L T S 
-------------------------------------------------------
${test.results.all}
-------------------------------------------------------

</echo>
		<if>
			<and>
				<isset property="test.results.errors.failures.skipped" />
				<not>
					<equals arg1="${test.results.errors.failures.skipped}" arg2="" />
				</not>
			</and>
			<then>
				<echo level="error">-------------------------------------------------------
 T E S T   R E S U L T S 
-------------------------------------------------------
${test.results.errors.failures.skipped}
-------------------------------------------------------

</echo>
			</then>
		</if>
	</target>

	<!-- TODO: generate site.xml files for each component from generated site.xml -->
	<target name="create.update.site">
	</target>

	<target name="create.overall.update.site" depends="init">
		<property name="update.site.description" value="Nightly Build" />

		<!-- Clean up from last time, then fetch fresh sources (checkout or update) -->
		<delete dir="${WORKINGDIR}/site/target" quiet="true" />
		<antcall target="get.sources">
			<param name="COMPONENT" value="site" />
		</antcall>

		<!-- Get correct version of site.xml + resolve variables -->
		<loadfile property="site.xml.transformed" srcfile="${WORKINGDIR}/site/category.${product.id}.xml">
			<filterchain>
				<expandproperties />
			</filterchain>
		</loadfile>
		<echo file="${WORKINGDIR}/site/site.xml" message="${site.xml.transformed}" />
		<var name="site.xml.transformed" unset="true" />

		<!-- Call maven to generate pom.xml, then build site from site.xml -->
		<antcall target="run.build">
			<param name="COMPONENTS.to.build" value="site" />
			<param name="MAVEN_FLAGS" value="verify -B -fae -Dmaven.test.skip" />
			<param name="noXvfb" value="true" />
		</antcall>

		<!-- Delete pointless site.zip -->
		<delete file="${WORKINGDIR}/site/target/site.zip" />

		<!-- Create real update site zip, including web UI -->
		<copy todir="${WORKINGDIR}/site/target/site">
			<fileset dir="${WORKINGDIR}/site" includes="web/*, index.html" />
		</copy>
		<zip destfile="${WORKINGDIR}/site/target/JBossTools-Update-SNAPSHOT.zip"
		     basedir="${WORKINGDIR}/site/target/site"
		     update="false"
		/>
	</target>

	<!-- TODO: figure out why this fails with error: 
			insecure -e option not allowed.
			This account is restricted by rssh.
			Allowed commands: scp sftp rsync
	-->
	<target name="deploy" if="isInHudson" depends="init, get.bootstrap.scripts">
		<!-- default destinations -->
		<property name="DESTINATION.jbosstools" value="tools@filemgmt.jboss.org:/downloads_htdocs/tools/repository" />
		<property name="DESTINATION.jbds" value="/qa/services/http/binaries/RHDS/repository" />

		<!-- values for this deployment -->
		<property name="deployDir" value="${DESTINATION.jbosstools}/SNAPSHOT" />
		<property name="sourceDir" value="${WORKINGDIR}" />
		<property name="synchMethodParam" value=" --delete" />

		<echo level="debug">Promote build in ${sourceDir} ...</echo>
		<!-- rsync or scp build dir ${sourceDir} into ${deployDir}/ -->
		<if>
			<available file="/usr/bin/rsync" type="file" />
			<then>
				<var name="deployCmd"
				     value="/usr/bin/rsync -arz --delete --include=*/*/*/target/ --include=*.xml --include=svn.info*.txt --include=build.cfg --exclude=eclipse/ ${sourceDir} ${deployDir}/"
				/>
			</then>
			<elseif>
				<available file="/usr/bin/scp" type="file" />
				<then>
					<var name="deployCmd" value="/usr/bin/scp -r ${sourceDir} ${deployDir}/" />
				</then>
			</elseif>
			<else>
				<fail>ERROR!
Cannot deploy - please install scp or rsync on this server and try again.
</fail>
			</else>
		</if>
		<if>
			<available file="${sourceDir}" type="dir" />
			<then>
				<echo message="${deployCmd}" />
				<exec executable="bash">
					<arg line=" -c &quot;${deployCmd}&quot;" />
				</exec>
			</then>
			<else>
				<fail>ERROR!
Cannot deploy - sourceDir not found in 
	${sourceDir}
</fail>
			</else>
		</if>
	</target>

	<!-- ************************************ TESTS ************************************ -->

	<target name="test.expected.values">
		<property name="ant.enable.asserts" value="true" />

		<!-- expected values for get.sources.* tests -->
		<property name="get.sources.expected.dirs" value="tests,common,xulrunner," />
		<property name="get.sources.expected.files" value="build.cfg" />

		<!-- expected values for test.get.sources.build.updated.only tests -->
		<property name="get.components.to.build.expected.2" value="tests,common,xulrunner," />
		<property name="get.components.to.build.expected.4" value="tests,xulrunner," />
		<property name="get.components.to.build.expected.6" value="" />

		<!-- expected values for test.get.sources.build.all tests -->
		<property name="get.components.to.build.expected.2.all" value="tests,common,xulrunner," />
		<property name="get.components.to.build.expected.4.all" value="tests,common,xulrunner," />
		<property name="get.components.to.build.expected.6.all" value="tests,common,xulrunner," />

		<!-- expected values for test.get.components.to.test -->
		<property name="get.components.to.test.expected"
		          value="tests,common,flow,jbpm,jmx,archives,as,drools,bpel,smooks,freemarker,profiler,portlet,xulrunner,jst,vpe,jsf,esb,tptp,ws,cdi,struts,hibernatetools,seam,examples,birt,maven,"
		/>
	</target>

	<target name="test.all">
		<antcall target="test.get.sources.build.all" />
		<antcall target="test.get.sources" />
	</target>

	<target name="test.get.sources.build.all"
	        depends="init, test.expected.values"
	        description="verify get.sources works to fetch, then update; verify all components will be built"
	>
		<var name="build.if.sources.unchanged" value="true" />
		<var name="get.components.to.build.expected.2" unset="true" />
		<var name="get.components.to.build.expected.4" unset="true" />
		<var name="get.components.to.build.expected.6" unset="true" />
		<var name="get.components.to.build.expected.2" value="${get.components.to.build.expected.2.all}" />
		<var name="get.components.to.build.expected.4" value="${get.components.to.build.expected.4.all}" />
		<var name="get.components.to.build.expected.6" value="${get.components.to.build.expected.6.all}" />
		<antcall target="test.get.sources" />
	</target>

	<target name="test.get.sources"
	        depends="init, test.expected.values"
	        description="verify get.sources works to fetch, then update; verify if components are not updated, they will not be built"
	>
		<var name="COMPONENTS" unset="true" />
		<var name="COMPONENTS" value="${get.sources.expected.dirs}" />

		<!-- for testing purposes, do not recurse (otherwise will have to download 100s of Mb of data -->
		<var name="svn.recurse" unset="true" />
		<var name="svn.recurse" value="false" />

		<!-- cleanup before test -->
		<for param="expected.dir" list="${get.sources.expected.dirs}" delimiter=", 
	">
			<sequential>
				<delete dir="@{expected.dir}" includeemptydirs="true" />
				<delete file="${WORKINGDIR}/svn.info-@{expected.dir}.txt" />
			</sequential>
		</for>
		<for param="expected.file" list="${get.sources.expected.files}" delimiter=", 
	">
			<sequential>
				<delete file="${WORKINGDIR}/@{expected.file}" />
			</sequential>
		</for>

		<echo level="info">----------------------------------</echo>
		<echo level="info">
1/6: Test checkout</echo>
		<antcall target="get.sources" />
		<for param="expected.dir" list="${get.sources.expected.dirs}" delimiter=", 
	">
			<sequential>
				<assert failonerror="true" message="Dir @{expected.dir} not found!">
					<bool>
						<available file="@{expected.dir}" type="dir" />
					</bool>
				</assert>
			</sequential>
		</for>
		<for param="expected.file" list="${get.sources.expected.files}" delimiter=", 
	">
			<sequential>
				<assert failonerror="true" message="Dir @{expected.file} not found!">
					<bool>
						<available file="@{expected.file}" type="file" />
					</bool>
				</assert>
			</sequential>
		</for>
		<echo level="info">----------------------------------</echo>

		<echo level="info">
2/6: Test build.cfg</echo>
		<var name="COMPONENTS.to.build" unset="true" />
		<antcallback target="get.components.to.build" return="COMPONENTS.to.build" />
		<assert failonerror="true"
		        message="expected: [${get.components.to.build.expected.2}] but got: [${COMPONENTS.to.build}]"
		>
			<bool>
				<equals arg1="${get.components.to.build.expected.2}" arg2="${COMPONENTS.to.build}" />
			</bool>
		</assert>
		<echo level="info">----------------------------------</echo>

		<echo level="info">
3/6: Test update</echo>
		<delete file="${WORKINGDIR}/svn.info-tests.txt" />
		<delete file="${WORKINGDIR}/svn.info-xulrunner.txt" />
		<touch file="${WORKINGDIR}/common/pom.xml" />
		<antcall target="get.sources" />
		<for param="expected.dir" list="${get.sources.expected.dirs}" delimiter=", 
	">
			<sequential>
				<assert failonerror="true" message="Dir @{expected.dir} not found!">
					<bool>
						<available file="@{expected.dir}" type="dir" />
					</bool>
				</assert>
			</sequential>
		</for>
		<for param="expected.file" list="${get.sources.expected.files}" delimiter=", 
	">
			<sequential>
				<assert failonerror="true" message="Dir @{expected.file} not found!">
					<bool>
						<available file="@{expected.file}" type="file" />
					</bool>
				</assert>
			</sequential>
		</for>
		<echo level="info">----------------------------------</echo>

		<echo level="info">
4/6: Test build.cfg</echo>
		<var name="COMPONENTS.to.build" unset="true" />
		<antcallback target="get.components.to.build" return="COMPONENTS.to.build" />
		<assert failonerror="true"
		        message="expected: [${get.components.to.build.expected.4}] but got: [${COMPONENTS.to.build}]"
		>
			<bool>
				<equals arg1="${get.components.to.build.expected.4}" arg2="${COMPONENTS.to.build}" />
			</bool>
		</assert>
		<echo level="info">----------------------------------</echo>

		<echo level="info">
5/6: Test info w/o update</echo>
		<antcall target="get.sources" />
		<for param="expected.dir" list="${get.sources.expected.dirs}" delimiter=", 
	">
			<sequential>
				<assert failonerror="true" message="Dir @{expected.dir} not found!">
					<bool>
						<available file="@{expected.dir}" type="dir" />
					</bool>
				</assert>
			</sequential>
		</for>
		<for param="expected.file" list="${get.sources.expected.files}" delimiter=", 
	">
			<sequential>
				<assert failonerror="true" message="Dir @{expected.file} not found!">
					<bool>
						<available file="@{expected.file}" type="file" />
					</bool>
				</assert>
			</sequential>
		</for>
		<echo level="info">----------------------------------</echo>

		<echo level="info">
6/6: Test build.cfg</echo>
		<var name="COMPONENTS.to.build" unset="true" />
		<antcallback target="get.components.to.build" return="COMPONENTS.to.build" />
		<assert failonerror="true"
		        message="expected: [${get.components.to.build.expected.6}] but got: [${COMPONENTS.to.build}]"
		>
			<bool>
				<equals arg1="${get.components.to.build.expected.6}" arg2="${COMPONENTS.to.build}" />
			</bool>
		</assert>
		<echo level="info">----------------------------------</echo>
	</target>

	<!-- TODO: fixme: manual test; lacks something we can assert... maybe that deployDir exists? -->
	<target name="test.deploy" depends="init">
		<antcall target="deploy">
			<param name="deployDir" value="tools@filemgmt.jboss.org:/downloads_htdocs/tools/repository/SNAPSHOT" />
			<param name="sourceDir" value="${WORKINGDIR}/surefire-reports" />
		</antcall>
	</target>

	<target name="test.now" depends="init">
		<now>foobar!</now>
		<now />
		<now level="error">error!</now>
		<now level="info">info!</now>
	</target>

	<target name="test.get.components.to.test" depends="init, test.expected.values">
		<var name="COMPONENTS" unset="true" />
		<var name="COMPONENTS"
		     value="tests,common;
	    flow,jbpm;
	    jmx,archives,as;
	    drools,bpel,smooks,freemarker,profiler,portlet;
	    xulrunner,jst,vpe,jsf;
	        esb,tptp,ws;
	        cdi,struts,hibernatetools,seam;
	            examples,birt;
	            maven"
		/>
		<antcallback target="get.components.to.test" return="COMPONENTS.to.build" />
		<assert failonerror="true"
		        message="expected: [${get.components.to.test.expected}] but got: [${COMPONENTS.to.build}]"
		>
			<bool>
				<equals arg1="${get.components.to.test.expected}" arg2="${COMPONENTS.to.build}" />
			</bool>
		</assert>
	</target>

</project>
