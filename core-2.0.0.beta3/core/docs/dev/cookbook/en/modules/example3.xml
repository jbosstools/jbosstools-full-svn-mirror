<chapter id="Example3">
	<title>Dependencies</title>
	<section><title>Introduction</title>
		<para>
		Your plug-in project can have two types of dependencies.
		One is to depend on another project.
		The other is to depend on a .jar file or library.
		</para>
	</section>
	
	<section>
		<title>Jar Dependencies</title>
		<para>
			There are a few things to remember when depending on a library jar file.
			The first is that these .jar files must be in your plug-in's directory
			structure, so that they can be included in the OSGi bundle of your plugin, 
			and then accessed by your classes. They must then be added to your 
			classpath, and designated as jars to search through. 
		</para>
		
		<para>This is all done very quickly and easily. So to begin, we first
		make a new plugin and name it Example3Dependencies. We then put our .jar file
		into the top level directory of our plugin. (Just copy it in or paste it in.)
		</para>
		<informaltable frame="none">
			<tgroup cols="2" align="left" colsep="0" rowsep="0">
				<tbody>
					<row>
						<entry valign="top">
		<para>The next step is to add the jar to our runtime tab in our manifest
		editor. So we open the editor, click to the runtime tab and look at the 
		classpath box. Here, we click "add", and select the jars we want to 
		include. Then we save the editor.</para>

		</entry>
		<entry><mediaobject><imageobject>
				<imagedata align="center" fileref="images/lab3_jar_selection.gif"/>
		</imageobject></mediaobject></entry>
</row></tbody></tgroup></informaltable>
		
		<para>If we add the following code to the plugin class file, we'll
		notice it didn't work.</para>
		
		<programlisting>	public void neverCalled() {
		JavaDocBuilder builder = new JavaDocBuilder();
	}</programlisting>

<imageobject>
				<imagedata align="center" fileref="images/lab3_jar_def_not_found.gif"/>
		</imageobject>

<para>Our classpath was NOT updated. It added the jar to the manifest file, or the 
plugin.xml, but it did not update the classpath. To do that, right click on your project
and select <literal>PDE Tools&gt;Update Classpath</literal>.  This usually fixes
most problems regarding packaging jars with your plugin.</para>
		<para>And in this case, it did just that. (If your error 
		didn't go away right away, try focussing on the 
		editor of your plugin and pressing <literal>ctrl+shift+o</literal>,
		which organizes your import statements and 
		should import this item. Then save the file) We won't run this 
		application, as it doesn't actually do anything.
		This exercise was just demonstrative.</para>
	</section>
	
	
	
	
	<section>
		<title>Project Dependencies</title>
		<para>Most .ui plug-ins depend on a corresponding .core plugin. 
		How do we fascilitate this?</para>
		
		<para>First, make a new plug-in project, and call it Example3Z.</para>
		
		<para>Next, let's try to get a reference to that plug-in's singleton
		object in a new method. Put the following method in the 
		<literal>example3Dependencies.Example3Dependencies.java</literal> .java file,
		right after our <literal>neverCalled()</literal> method.</para>

		<programlisting>public void neverCalled2() {
		Example3ZPlugin plugin = Example3ZPlugin.getDefault();
}</programlisting>

		<para>Next, we have to add it to our dependencies, in the manifest gui
		editor for the <literal>Example3Dependencies</literal> project, 
		on the <literal>Dependencies</literal> tab. Click <literal>add</literal>
		and select <literal>Example3Z</literal>. Then save the file.</para>
		
		<para>If we go back and look at our plugin .java file, 
		<literal>example3Dependencies.Example3Dependencies.java</literal>, 
		we'll see a new error.</para>
		
		<imageobject>
				<imagedata align="center" fileref="images/lab3_access_restriction.gif"/>
		</imageobject>
		
		<para>What we must do now to complete the dependency is have <literal>Example3Z</literal>
		open up its packages for extending or referencing plug-ins to have access.
		To do this, open up the <literal>Example3Z</literal>'s manifest gui editor,
		select the <literal>runtime</literal> tab, and click <literal>Add...</literal> 
		next to the Exported Packages list. Finally, select the 
		<literal>example3Z</literal> package and save the file.</para>
		
	</section>
	
	<section>
		<title>Conclusion</title>
		<para>And that's how you depend on jars and other plug-in projects
			in eclipse plug-in development.</para>
	</section>
	
</chapter>