<?xml version="1.0" encoding="ISO-8859-1"?>

<taglib xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-jsptaglibrary_2_1.xsd"
   xmlns="http://java.sun.com/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="2.1">

 <display-name>RichFaces</display-name>
<tlib-version>3.3.1</tlib-version>
 <short-name>rich</short-name>
 <uri>http://richfaces.org/rich</uri>

<tag>
	  	  <description>The &amp;lt;rich:ajaxValidator&amp;gt; is a component designed to provide ajax validation inside for JSF inputs.</description>
	  	  	  		  <name>ajaxValidator</name>
	  	  <tag-class>org.richfaces.taglib.AjaxValidatorTag</tag-class>
	  <body-content>JSP</body-content>
	  
	    		  <attribute>
	   <description>MethodExpression representing an action listener method that will be notified when this component is activated by the ajax Request and handle it. The expression must evaluate to a public method that takes an AjaxEvent parameter, with a return type of void. Default value is "null"</description>
	   <name>ajaxListener</name>
	   	   	   						<deferred-method>
					<method-signature>void ajaxListener(org.ajax4jsf.event.AjaxEvent)</method-signature>
				</deferred-method>
				   	  </attribute>
		  	  	  		  <attribute>
	   <description>The attribute takes a value-binding expression for a component property of
a backing bean</description>
	   <name>binding</name>
	   	   	   					   	<deferred-value>
					<type>javax.faces.component.UIComponent</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>Serialized (on default with JSON) data passed on the client by a developer on AJAX request. It's accessible via "data.foo" syntax</description>
	   <name>data</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Disables default action for target event ( append "return false;" to JavaScript ). Default value is "false"</description>
	   <name>disableDefault</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Name of JavaScript event property ( onclick, onchange, etc.) of parent component by 
			which validation will be triggered. Default value is "onblur"</description>
	   <name>event</name>
	   	   	   		<rtexprvalue>false</rtexprvalue>
	   		<type>java.lang.String</type>
	   	  </attribute>
		  	  		  <attribute>
	   <description>Name of requests queue to avoid send next request before complete other from same event. Can be used to reduce number of requests of frequently events (key press, mouse move etc.)</description>
	   <name>eventsQueue</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>id of element to set focus after request completed on client side</description>
	   <name>focus</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Every component may have a unique id that is automatically created if omitted</description>
	   <name>id</name>
	   	   	   		<rtexprvalue>false</rtexprvalue>
	   		<type>java.lang.String</type>
	   	  </attribute>
		  		  <attribute>
	   <description>Attribute allows to ignore an Ajax Response produced by a request if the newest 'similar' request is
in a queue already. ignoreDupResponses="true" does not cancel the request while it is processed on the server,
but just allows to avoid unnecessary updates on the client side if the response isn't actual now</description>
	   <name>ignoreDupResponses</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>If "true", then of all AJAX-rendered on the page components only those will be updated, 
		which ID's are passed to the "reRender" attribute of the describable component. 
		"false"-the default value-means that all components with ajaxRendered="true" will be updated.</description>
	   <name>limitToList</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called before DOM is updated</description>
	   <name>onbeforedomupdate</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called after the request is completed</description>
	   <name>oncomplete</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>JavaScript code for call before submission of ajax
				event</description>
	   <name>onsubmit</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  	  		  <attribute>
	   <description>Id['s] (in format of call  UIComponent.findComponent()) of components, rendered in case of AjaxRequest  caused by this component. Can be single id, comma-separated list of Id's, or EL Expression  with array or Collection</description>
	   <name>reRender</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>If "false", this component is not rendered</description>
	   <name>rendered</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Attribute defines the time (in ms.) that the request will be wait in the queue before it is ready to send.
When the delay time is over, the request will be sent to the server or removed if the newest 'similar' request is in a queue already</description>
	   <name>requestDelay</name>
	   	   	   					   	<deferred-value>
					<type>int</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>If there are any component requests with identical IDs then these requests will be grouped.</description>
	   <name>similarityGroupingId</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>ID (in format of call UIComponent.findComponent()) of Request status component</description>
	   <name>status</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>Summary message for a validation errors.</description>
	   <name>summary</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Response waiting time on a particular request. If a response is not received during this time, the request is aborted</description>
	   <name>timeout</name>
	   	   	   					   	<deferred-value>
					<type>int</type>
				</deferred-value>
				   	  </attribute>
		  	  
	</tag>
<tag>
	  	  <description>Validate Input by the Bean/Hibernate validator annotations</description>
	  	  	  		  <name>beanValidator</name>
	  	  <tag-class>org.richfaces.taglib.BeanValidatorTag</tag-class>
	  <body-content>JSP</body-content>
	  
	    		  <attribute>
	   <description>A ValueExpression that evaluates to an instance of
                FacesBeanValidator.</description>
	   <name>binding</name>
	   	   	   					   	<deferred-value>
					<type>org.richfaces.validator.FacesBeanValidator</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Summary message for a validation errors.</description>
	   <name>summary</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  
	</tag>
<tag>
	  	  <description>The &amp;lt;rich:calendar&amp;gt; component is a UI control used for creating graphical monthly calendar on a page.</description>
	  	  	  		  <name>calendar</name>
	  	  <tag-class>org.richfaces.taglib.CalendarTag</tag-class>
	  <body-content>JSP</body-content>
	  
	    		  <attribute>
	   <description>boolean attribute which provides possibility to limit JSF tree processing(decoding, conversion/validation, value applying) to the component which send the request only.
				Default value is "true"</description>
	   <name>ajaxSingle</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The attribute takes a value-binding expression for a component property of
a backing bean</description>
	   <name>binding</name>
	   	   	   					   	<deferred-value>
					<type>javax.faces.component.UIComponent</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>This attribute is responsible for behaviour of dates 
				from the previous and next months which are displayed in the current month. Valid values
				are "inactive" (Default) dates inactive and
				gray colored, "scroll" boundaries work as
				month scrolling controls, and "select"
				boundaries work in the same way as "scroll"
				but with the date clicked selection. Default value is "inactive".</description>
	   <name>boundaryDatesMode</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Style Class attribute for the popup button</description>
	   <name>buttonClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Defines icon for the popup button element. The attribute
				is ignored if the "buttonLabel" is set</description>
	   <name>buttonIcon</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Defines disabled icon for the popup button element. The
				attribute is ignored if the "buttonLabel" is set</description>
	   <name>buttonIconDisabled</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Defines label for the popup button element. If the
				attribute is set "buttonIcon" and "buttonIconDisabled"
				are ignored</description>
	   <name>buttonLabel</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "true", after process validations phase it skips updates of model beans on a force render response. It can be used for validating components input</description>
	   <name>bypassUpdates</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>attribute to set fixed cells height</description>
	   <name>cellHeight</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>attribute to set fixed cells width</description>
	   <name>cellWidth</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Id of Converter to be used or reference to a Converter</description>
	   <name>converter</name>
	   	   	   					   	<deferred-value>
					<type>javax.faces.convert.Converter</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A ValueExpression enabled attribute that, if present,
			will be used as the text of the converter message,
			replacing any message that comes from the converter</description>
	   <name>converterMessage</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Defines current date</description>
	   <name>currentDate</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>MethodExpression representing an action listener method
				that will be notified after date selection</description>
	   <name>currentDateChangeListener</name>
	   	   	   						<deferred-method>
					<method-signature>void currentDateChangeListener(org.richfaces.event.CurrentDateChangeEvent)</method-signature>
				</deferred-method>
				   	  </attribute>
		  	  	  	  		  <attribute>
	   <description>Used to provide data for calendar elements. If data is
				not provided, all Data Model related functions are
				disabled</description>
	   <name>dataModel</name>
	   	   	   					   	<deferred-value>
					<type>org.richfaces.model.CalendarDataModel</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Defines date pattern. Default value is "MMM d, yyyy".</description>
	   <name>datePattern</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Should be binded to some JS function that will provide style classes
				for special sets of days highlighting.</description>
	   <name>dayStyleClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Defines time that will be used:
			1) to set time when the value is empty
			2) to set time when date changes and flag "resetTimeOnDateSelect" is true. Default value is "getDefaultValueOfDefaultTime()"</description>
	   <name>defaultTime</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Defines direction of the calendar popup ("top-left",
				"top-right", "bottom-left", "bottom-right" (Default), "auto"). Default value is "bottom-right".</description>
	   <name>direction</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "true", rendered is disabled. In
				"popup" mode both controls are disabled. Default value is "false".</description>
	   <name>disabled</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "true" calendar input will be editable and
				it will be possible to change the date manualy. If
				"false" value for this attribute makes a text
				field "read-only", so the value can be changed
				only from a handle. Default value is "false".</description>
	   <name>enableManualInput</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Name of requests queue to avoid send next request before complete other from same event. Can be used to reduce number of requests of frequently events (key press, mouse move etc.)</description>
	   <name>eventsQueue</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>Gets what the first day of the week is; e.g., SUNDAY in the U.S., MONDAY in France. Default value is "getDefaultFirstWeekDay()". Possible values should be integers from 0 to 6, 0 corresponds to Sunday</description>
	   <name>firstWeekDay</name>
	   	   	   					   	<deferred-value>
					<type>int</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>id of element to set focus after request completed on client side</description>
	   <name>focus</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>Sets the horizontal offset between button and calendar
				element conjunction point. Default value is "0".</description>
	   <name>horizontalOffset</name>
	   	   	   					   	<deferred-value>
					<type>int</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Every component may have a unique id that is automatically created if omitted</description>
	   <name>id</name>
	   	   	   		<rtexprvalue>false</rtexprvalue>
	   		<type>java.lang.String</type>
	   	  </attribute>
		  		  <attribute>
	   <description>Attribute allows to ignore an Ajax Response produced by a request if the newest 'similar' request is
in a queue already. ignoreDupResponses="true" does not cancel the request while it is processed on the server,
but just allows to avoid unnecessary updates on the client side if the response isn't actual now</description>
	   <name>ignoreDupResponses</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A flag indicating that this component value must be converted
            and validated immediately (that is, during Apply Request Values
            phase), rather than waiting until a Process Validations phase</description>
	   <name>immediate</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Style Class attribute for the text field</description>
	   <name>inputClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Defines the size of an input field. Similar to the "size" attribute of &amp;lt;h:inputText/&amp;gt;</description>
	   <name>inputSize</name>
	   	   	   					   	<deferred-value>
					<type>int</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Style attribute for text field</description>
	   <name>inputStyle</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Should be binded to some JS function that returns day state.</description>
	   <name>isDayEnabled</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Set the corner of the button for the popup to be
				connected with (top-left, top-right, bottom-left
				(Default), bottom-right, auto). Default value is "bottom-left".</description>
	   <name>jointPoint</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A localized user presentable name for this component.</description>
	   <name>label</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "true", then of all AJAX-rendered on the page components only those will be updated, 
		which ID's are passed to the "reRender" attribute of the describable component. 
		"false"-the default value-means that all components with ajaxRendered="true" will be updated.</description>
	   <name>limitToList</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  	  	  		  <attribute>
	   <description>Used for locale definition.   Default value is "getDefaultLocale()".</description>
	   <name>locale</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Gets what the minimal days required in the first week of the year 
			are; e.g., if the first week is defined as one that contains the first 
			day of the first month of a year, this method returns 1. If the 
			minimal days required must be a full week, this method returns 7. Default value is "getDefaultMinDaysInFirstWeek()".</description>
	   <name>minDaysInFirstWeek</name>
	   	   	   					   	<deferred-value>
					<type>int</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Valid values: ajax or client. Default value is "client".</description>
	   <name>mode</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Attribute that allows to customize names of the months.
				Should accept list with the month names</description>
	   <name>monthLabels</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Attribute that allows to customize short names of the
				months. Should accept list with the month names</description>
	   <name>monthLabelsShort</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called before DOM is updated</description>
	   <name>onbeforedomupdate</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when the date or time is changed and applied to input</description>
	   <name>onchanged</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called before the calendar popup is closed</description>
	   <name>oncollapse</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called after the request is completed</description>
	   <name>oncomplete</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when the current month or year is changed</description>
	   <name>oncurrentdateselect</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called after the current month or year is changed</description>
	   <name>oncurrentdateselected</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a pointer is moved away from the date cell</description>
	   <name>ondatemouseout</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a pointer is moved onto the date cell</description>
	   <name>ondatemouseover</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when some date cell is selected</description>
	   <name>ondateselect</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called after some date cell is selected</description>
	   <name>ondateselected</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called before the calendar popup is opened</description>
	   <name>onexpand</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when the input field loses the focus</description>
	   <name>oninputblur</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when the input field value is changed manually</description>
	   <name>oninputchange</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when the input field is clicked</description>
	   <name>oninputclick</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when the input field gets the focus</description>
	   <name>oninputfocus</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a key is pressed down in the input field</description>
	   <name>oninputkeydown</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a key is pressed and released in the input field</description>
	   <name>oninputkeypress</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a key is released in the input field</description>
	   <name>oninputkeyup</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a pointer is moved away from the input field</description>
	   <name>oninputmouseout</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a pointer is moved onto the input field</description>
	   <name>oninputmouseover</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when the input field value is selected</description>
	   <name>oninputselect</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called before new time is selected</description>
	   <name>ontimeselect</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called after time is selected</description>
	   <name>ontimeselected</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "true", the calendar will be rendered initially
				as hidden with additional elements for calling as popup. Default value is "true".</description>
	   <name>popup</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  	  	  		  <attribute>
	   <description>Define the initial range of date which will be loaded to
				client from dataModel under rendering. Default value is "getDefaultPreloadBegin(getCurrentDateOrDefault())".</description>
	   <name>preloadDateRangeBegin</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Defines the last range of date which will be loaded to
				client from dataModel under rendering. Default value is "getDefaultPreloadEnd(getCurrentDateOrDefault())".</description>
	   <name>preloadDateRangeEnd</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>Id['s] (in format of call  UIComponent.findComponent()) of components, processed at the phases 2-5 in case of AjaxRequest  caused by this component. Can be single id, comma-separated list of Id's, or EL Expression  with array or Collection</description>
	   <name>process</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Id['s] (in format of call  UIComponent.findComponent()) of components, rendered in case of AjaxRequest  caused by this component. Can be single id, comma-separated list of Id's, or EL Expression  with array or Collection</description>
	   <name>reRender</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "true". Date and time are not selectable.  In
				"popup" mode input is disabled and button is enabled. Default value is "false".</description>
	   <name>readonly</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "false", this component is not rendered</description>
	   <name>rendered</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Attribute defines the time (in ms.) that the request will be wait in the queue before it is ready to send.
When the delay time is over, the request will be sent to the server or removed if the newest 'similar' request is in a queue already</description>
	   <name>requestDelay</name>
	   	   	   					   	<deferred-value>
					<type>int</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "true", this component is checked for non-empty input</description>
	   <name>required</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A ValueExpression enabled attribute that, if present,
			will be used as the text of the validation message for
			the "required" facility, if the "required" facility is
			used</description>
	   <name>requiredMessage</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If value is true then calendar should change time to defaultTime for newly-selected dates. Default value is "false"</description>
	   <name>resetTimeOnDateSelect</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If false ApplyButton should not be shown. Default value is "false".</description>
	   <name>showApplyButton</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If false Calendar's footer should not be shown. Default value is "true".</description>
	   <name>showFooter</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If false Calendar's header should not be shown. Default value is "true".</description>
	   <name>showHeader</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>"false" value for this attribute makes text
				field invisible. It works only if popupMode="true"
				If showInput is "true" - input field will
				be shown. Default value is "true".</description>
	   <name>showInput</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If false this bar should not be shown. Default value is "true".</description>
	   <name>showWeekDaysBar</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If false this bar should not be shown. Default value is "true".</description>
	   <name>showWeeksBar</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If there are any component requests with identical IDs then these requests will be grouped.</description>
	   <name>similarityGroupingId</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>ID (in format of call UIComponent.findComponent()) of Request status component</description>
	   <name>status</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style(s) is/are to be applied when this component is
				rendered</description>
	   <name>style</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Corresponds to the HTML class attribute</description>
	   <name>styleClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>This attribute specifies the position of the current element in the tabbing order for the current document. This value must be a number between 0 and 32767. User agents should ignore leading zeros</description>
	   <name>tabindex</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Used for current date calculations. Default value is "getDefaultTimeZone()".</description>
	   <name>timeZone</name>
	   	   	   					   	<deferred-value>
					<type>java.util.TimeZone</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Response waiting time on a particular request. If a response is not received during this time, the request is aborted</description>
	   <name>timeout</name>
	   	   	   					   	<deferred-value>
					<type>int</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>This attribute defines the mode for "today" control. Possible values are "scroll", "select", "hidden". Default value is "select".</description>
	   <name>todayControlMode</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  	  		  <attribute>
	   <description>MethodBinding pointing at a method that is called during
            Process Validations phase of the request processing lifecycle,
            to validate the current value of this component</description>
	   <name>validator</name>
	   	   	   						<deferred-method>
					<method-signature>void validator(javax.faces.context.FacesContext, javax.faces.component.UIComponent, java.lang.Object)</method-signature>
				</deferred-method>
				   	  </attribute>
		  		  <attribute>
	   <description>A ValueExpression enabled attribute that, if present,
			will be used as the text of the validator message,
			replacing any message that comes from the validator</description>
	   <name>validatorMessage</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>The current value of this component</description>
	   <name>value</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Listener for value changes</description>
	   <name>valueChangeListener</name>
	   	   	   						<deferred-method>
					<method-signature>void valueChangeListener(javax.faces.event.ValueChangeEvent)</method-signature>
				</deferred-method>
				   	  </attribute>
		  	  		  <attribute>
	   <description>Sets the vertical offset between button and calendar
				element conjunction point. Default value is "0".</description>
	   <name>verticalOffset</name>
	   	   	   					   	<deferred-value>
					<type>int</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>List of the day names displays on the days bar in the
				following way "Sun, Mon, Tue, Wed, "</description>
	   <name>weekDayLabels</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Attribute that allows to customize short names of the
				weeks. Should accept list with the weeks names.</description>
	   <name>weekDayLabelsShort</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Attribute is similar to the standard HTML attribute and
				can specify window placement relative to the content. Default value is "3".</description>
	   <name>zindex</name>
	   	   	   					   	<deferred-value>
					<type>int</type>
				</deferred-value>
				   	  </attribute>
		  	  
	</tag>
<tag>
	  	  	  		  <name>changeExpandListener</name>
	  	  <tag-class>org.richfaces.taglib.ChangeExpandListenerTag</tag-class>
	  <body-content>JSP</body-content>
	  
	    		  <attribute>
	   <description>The attribute takes a value-binding expression for a component property of
				a backing bean</description>
	   <name>binding</name>
	   	   	   					   	<deferred-value>
					<type>org.richfaces.changeExpandListener</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The fully qualified Java class name for the listener</description>
	   <name>type</name>
	   	   	   		<rtexprvalue>false</rtexprvalue>
	   		<type>java.lang.String</type>
	   	  </attribute>
		  	  
	</tag>
<tag>
	  	  <description/>
	  	  	  		  <name>colorPicker</name>
	  	  <tag-class>org.richfaces.taglib.ColorPickerTag</tag-class>
	  <body-content>JSP</body-content>
	  
	    		  <attribute>
	   <description>The attribute takes a value-binding expression for a component property of
a backing bean</description>
	   <name>binding</name>
	   	   	   					   	<deferred-value>
					<type>javax.faces.component.UIComponent</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Defines a color mode for the component input. Possible values are hex, rgb.</description>
	   <name>colorMode</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Id of Converter to be used or reference to a Converter</description>
	   <name>converter</name>
	   	   	   					   	<deferred-value>
					<type>javax.faces.convert.Converter</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A ValueExpression enabled attribute that, if present,
			will be used as the text of the converter message,
			replacing any message that comes from the converter</description>
	   <name>converterMessage</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>Defines whether the component will be rendered flat.</description>
	   <name>flat</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Every component may have a unique id that is automatically created if omitted</description>
	   <name>id</name>
	   	   	   		<rtexprvalue>false</rtexprvalue>
	   		<type>java.lang.String</type>
	   	  </attribute>
		  		  <attribute>
	   <description>A flag indicating that this component value must be converted
            and validated immediately (that is, during Apply Request Values
            phase), rather than waiting until a Process Validations phase</description>
	   <name>immediate</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  	  	  		  <attribute>
	   <description>The client side script method to be called before the component widget is opened</description>
	   <name>onbeforeshow</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when the element value was changed</description>
	   <name>onchange</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The clientside script method to be called when the element is clicked</description>
	   <name>onclick</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when the element is double-clicked</description>
	   <name>ondblclick</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called before the component widget is hidden</description>
	   <name>onhide</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a key is pressed down over the element</description>
	   <name>onkeydown</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a key is pressed over the element and released</description>
	   <name>onkeypress</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a key is released</description>
	   <name>onkeyup</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a mouse button is pressed down over the element</description>
	   <name>onmousedown</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a pointer is moved within the element</description>
	   <name>onmousemove</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a pointer is moved away from the element</description>
	   <name>onmouseout</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a pointer is moved onto the element</description>
	   <name>onmouseover</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a mouse button is released</description>
	   <name>onmouseup</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when the color is selected</description>
	   <name>onselect</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when the component widget is displayed</description>
	   <name>onshow</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "false", this component is not rendered</description>
	   <name>rendered</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "true", this component is checked for non-empty input</description>
	   <name>required</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A ValueExpression enabled attribute that, if present,
			will be used as the text of the validation message for
			the "required" facility, if the "required" facility is
			used</description>
	   <name>requiredMessage</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Defines the event that triggers the colorPicker. 
		        Default value is "onclick".</description>
	   <name>showEvent</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>MethodBinding pointing at a method that is called during
            Process Validations phase of the request processing lifecycle,
            to validate the current value of this component</description>
	   <name>validator</name>
	   	   	   						<deferred-method>
					<method-signature>void validator(javax.faces.context.FacesContext, javax.faces.component.UIComponent, java.lang.Object)</method-signature>
				</deferred-method>
				   	  </attribute>
		  		  <attribute>
	   <description>A ValueExpression enabled attribute that, if present,
			will be used as the text of the validator message,
			replacing any message that comes from the validator</description>
	   <name>validatorMessage</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>The current value of this component</description>
	   <name>value</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Listener for value changes</description>
	   <name>valueChangeListener</name>
	   	   	   						<deferred-method>
					<method-signature>void valueChangeListener(javax.faces.event.ValueChangeEvent)</method-signature>
				</deferred-method>
				   	  </attribute>
		  	  	  
	</tag>
<tag>
	  	  <description>The &amp;lt;rich:column&amp;gt; component for row rendering for a UIData component.</description>
	  	  	  		  <name>column</name>
	  	  <tag-class>org.richfaces.taglib.ColumnTag</tag-class>
	  <body-content>JSP</body-content>
	  
	    		  <attribute>
	   <description>The attribute takes a value-binding expression for a component property of
a backing bean</description>
	   <name>binding</name>
	   	   	   					   	<deferred-value>
					<type>javax.faces.component.UIComponent</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>if "true" next column begins from the first row</description>
	   <name>breakBefore</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Corresponds to the HTML colspan attribute</description>
	   <name>colspan</name>
	   	   	   					   	<deferred-value>
					<type>int</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Defines value binding to the comparator that is used to compare the values</description>
	   <name>comparator</name>
	   	   	   					   	<deferred-value>
					<type>java.util.Comparator</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Direction indication for text that does not inherit
			directionality. Valid values are "LTR" (left-to-right)
			and "RTL" (right-to-left)</description>
	   <name>dir</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>Defines iterable object property which is used when filtering performed.</description>
	   <name>filterBy</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Event for filter input that forces the filtration (default value is "onchange")</description>
	   <name>filterEvent</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Attribute defines a bean property which is used for filtering of a column</description>
	   <name>filterExpression</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>This attribute is defined with method binding. This method accepts on Object parameter and return boolean value</description>
	   <name>filterMethod</name>
	   	   	   						<deferred-method>
					<method-signature>boolean filterMethod(java.lang.Object)</method-signature>
				</deferred-method>
				   	  </attribute>
		  		  <attribute>
	   <description>Defines current filtering value</description>
	   <name>filterValue</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>Space-separated list of CSS style class(es) that are be applied to any footer generated for this table</description>
	   <name>footerClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>Space-separated list of CSS style class(es) that are be applied to any header generated for this table</description>
	   <name>headerClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Every component may have a unique id that is automatically created if omitted</description>
	   <name>id</name>
	   	   	   		<rtexprvalue>false</rtexprvalue>
	   		<type>java.lang.String</type>
	   	  </attribute>
		  		  <attribute>
	   <description>Column label for drag indicator. Usable only for extendedDataTable component</description>
	   <name>label</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Code describing the language used in the generated markup for this component</description>
	   <name>lang</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "false", this component is not rendered</description>
	   <name>rendered</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Corresponds to the HTML rowspan attribute</description>
	   <name>rowspan</name>
	   	   	   					   	<deferred-value>
					<type>int</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Manages if the header of the column is clickable, icons rendered and sorting is fired after click on the header. You need to define this attribute inside &amp;lt;rich:dataTable&amp;gt; component.
	Default value is "true"</description>
	   <name>selfSorted</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Defines a bean property which is used for sorting of a column. This attribute used with &amp;lt;rich:dataTable&amp;gt;</description>
	   <name>sortBy</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Defines a bean property which is used for sorting of a column and used only with &amp;lt;rich:scrollableDataTable&amp;gt;.</description>
	   <name>sortExpression</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>Defines sort icon. The value for the attribute is context related.</description>
	   <name>sortIcon</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Defines sort icon for ascending order. The value for the attribute is context related.</description>
	   <name>sortIconAscending</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Defines sort icon for descending order. The value for the attribute is context related.</description>
	   <name>sortIconDescending</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>SortOrder is an enumeration of the possible sort orderings. Default value is "UNSORTED"</description>
	   <name>sortOrder</name>
	   	   	   					   	<deferred-value>
					<type>org.richfaces.model.Ordering</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Boolean attribute. If "true" it's possible to sort the column content after click on the header.
	Default value is "true"</description>
	   <name>sortable</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style(s) is/are to be applied when this component is rendered</description>
	   <name>style</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Corresponds to the HTML class attribute</description>
	   <name>styleClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Advisory title information about markup elements generated for this component</description>
	   <name>title</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The attribute is used to define whether the component is visible or not. The default value is "true".</description>
	   <name>visible</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Attribute defines width of column.</description>
	   <name>width</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  
	</tag>
<tag>
	  	  <description>The &amp;lt;rich:columnGroup&amp;gt; component combines columns in one row to organize complex subparts of a table.</description>
	  	  	  		  <name>columnGroup</name>
	  	  <tag-class>org.richfaces.taglib.ColumnGroupTag</tag-class>
	  <body-content>JSP</body-content>
	  
	    		  <attribute>
	   <description>The attribute takes a value-binding expression for a component property of
a backing bean</description>
	   <name>binding</name>
	   	   	   					   	<deferred-value>
					<type>javax.faces.component.UIComponent</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>Comma-delimited list of CSS style classes that are be applied to the columns of this table.
				A space separated list of classes may also be specified for any individual column.
				If the number of elements in this list is less than the number of columns specified in the "columns" attribute, no "class" attribute is output for each column greater than the number of elements in the list. If the number of elements in the list is greater than the number of columns specified in the "columns" attribute, the elements at the position in the list after the value of the "columns" attribute are ignored</description>
	   <name>columnClasses</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Direction indication for text that does not inherit
			directionality. Valid values are "LTR" (left-to-right)
			and "RTL" (right-to-left)</description>
	   <name>dir</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  	  	  		  <attribute>
	   <description>Every component may have a unique id that is automatically created if omitted</description>
	   <name>id</name>
	   	   	   		<rtexprvalue>false</rtexprvalue>
	   		<type>java.lang.String</type>
	   	  </attribute>
		  		  <attribute>
	   <description>Code describing the language used in the generated markup for this component</description>
	   <name>lang</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "false", this component is not rendered</description>
	   <name>rendered</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A comma-delimited list of CSS style classes that is applied to popup table rows. A space separated list of classes may also be specified for any individual row. The styles are applied, in turn, to each row in the table. For example, if the list has two elements, the first style class in the list is applied to the first row, the second to the second row, the first to the third row, the second to the fourth row, etc. In other words, we keep iterating through the list until we reach the end, and then we start at the beginning again</description>
	   <name>rowClasses</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  	  	  	  		  <attribute>
	   <description>CSS style(s) is/are to be applied when this component is rendered</description>
	   <name>style</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Corresponds to the HTML class attribute</description>
	   <name>styleClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Advisory title information about markup elements generated for this component</description>
	   <name>title</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  
	</tag>
<tag>
	  	  <description>The &amp;lt;rich:columns&amp;gt; is a component that allows to create a dynamic set of columns from your model.</description>
	  	  	  		  <name>columns</name>
	  	  <tag-class>org.richfaces.taglib.ColumnsTag</tag-class>
	  <body-content>JSP</body-content>
	  
	    		  <attribute>
	   <description>The first iteration item</description>
	   <name>begin</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>if "true" next column begins from the first row</description>
	   <name>breakBefore</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Corresponds to the HTML colspan attribute</description>
	   <name>colspan</name>
	   	   	   					   	<deferred-value>
					<type>int</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Number of columns to be rendered</description>
	   <name>columns</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Defines value binding to the comparator that is used to compare the values</description>
	   <name>comparator</name>
	   	   	   					   	<deferred-value>
					<type>java.util.Comparator</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Direction indication for text that does not inherit
			directionality. Valid values are "LTR" (left-to-right)
			and "RTL" (right-to-left)</description>
	   <name>dir</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The last iteration item</description>
	   <name>end</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Defines iterable object property which is used when filtering performed.</description>
	   <name>filterBy</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Event for filter input that forces the filtration (default value is "onchange")</description>
	   <name>filterEvent</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Attribute defines a bean property which is used for filtering of a column</description>
	   <name>filterExpression</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>This attribute is defined with method binding. This method accepts on Object parameter and return boolean value</description>
	   <name>filterMethod</name>
	   	   	   						<deferred-method>
					<method-signature>boolean filterMethod(java.lang.Object)</method-signature>
				</deferred-method>
				   	  </attribute>
		  		  <attribute>
	   <description>Defines current filtering value</description>
	   <name>filterValue</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  	  		  <attribute>
	   <description>Space-separated list of CSS style class(es) that are be applied to any footer generated for this table</description>
	   <name>footerClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>Space-separated list of CSS style class(es) that are be applied to any header generated for this table</description>
	   <name>headerClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Every component may have a unique id that is automatically created if omitted</description>
	   <name>id</name>
	   	   	   		<rtexprvalue>false</rtexprvalue>
	   		<type>java.lang.String</type>
	   	  </attribute>
		  		  <attribute>
	   <description>The current counter</description>
	   <name>index</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Column label for drag indicator. Usable only for extendedDataTable component</description>
	   <name>label</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Code describing the language used in the generated markup for this component</description>
	   <name>lang</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Attribute defines if component should be rendered. Default value is "true".</description>
	   <name>rendered</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  	  	  		  <attribute>
	   <description>Corresponds to the HTML rowspan attribute</description>
	   <name>rowspan</name>
	   	   	   					   	<deferred-value>
					<type>int</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Manages if the header of the column is clickable, icons rendered and sorting is fired after click on the header. You need to define this attribute inside &amp;lt;rich:dataTable&amp;gt; component.
	Default value is "true"</description>
	   <name>selfSorted</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Defines a bean property which is used for sorting of a column. This attribute used with &amp;lt;rich:dataTable&amp;gt;</description>
	   <name>sortBy</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Defines a bean property which is used for sorting of a column and used only with &amp;lt;rich:scrollableDataTable&amp;gt;.</description>
	   <name>sortExpression</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Defines sort icon. The value for the attribute is context related.</description>
	   <name>sortIcon</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Defines sort icon for ascending order. The value for the attribute is context related.</description>
	   <name>sortIconAscending</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Defines sort icon for descending order. The value for the attribute is context related.</description>
	   <name>sortIconDescending</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>SortOrder is an enumeration of the possible sort orderings. Default value is "UNSORTED"</description>
	   <name>sortOrder</name>
	   	   	   					   	<deferred-value>
					<type>org.richfaces.model.Ordering</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Boolean attribute. If "true" it's possible to sort the column content after click on the header.
	Default value is "true"</description>
	   <name>sortable</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style(s) is/are to be applied when this component is rendered</description>
	   <name>style</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Corresponds to the HTML class attribute</description>
	   <name>styleClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Advisory title information about markup elements generated for this component</description>
	   <name>title</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The current value for this component</description>
	   <name>value</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The current variable</description>
	   <name>var</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The attribute is used to define whether the component is visible or not. The default value is "true".</description>
	   <name>visible</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Attribute defines width of column.</description>
	   <name>width</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  
	</tag>
<tag>
	  	  <description>The &amp;lt;rich:comboBox&amp;gt; is a component, that provides editable combo box element on a page.</description>
	  	  	  		  <name>comboBox</name>
	  	  <tag-class>org.richfaces.taglib.ComboBoxTag</tag-class>
	  <body-content>JSP</body-content>
	  
	    	  	  	  		  <attribute>
	   <description>The attribute takes a value-binding expression for a component property of
a backing bean</description>
	   <name>binding</name>
	   	   	   					   	<deferred-value>
					<type>javax.faces.component.UIComponent</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Style Class attribute for the button</description>
	   <name>buttonClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Style Class attribute for the disabled button</description>
	   <name>buttonDisabledClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style rules to be applied to disabled button</description>
	   <name>buttonDisabledStyle</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Defines icon for the button element</description>
	   <name>buttonIcon</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Defines disabled icon for the button element</description>
	   <name>buttonIconDisabled</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Defines inactive icon for the button element</description>
	   <name>buttonIconInactive</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Style Class attribute for the inactive button</description>
	   <name>buttonInactiveClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style rules to be applied to inactive button</description>
	   <name>buttonInactiveStyle</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style rules to be applied to button</description>
	   <name>buttonStyle</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Id of Converter to be used or reference to a Converter</description>
	   <name>converter</name>
	   	   	   					   	<deferred-value>
					<type>javax.faces.convert.Converter</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A ValueExpression enabled attribute that, if present,
			will be used as the text of the converter message,
			replacing any message that comes from the converter</description>
	   <name>converterMessage</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Defines default label for the input field element</description>
	   <name>defaultLabel</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Defines the first value from the suggested in input field. Default value is "false".</description>
	   <name>directInputSuggestions</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>When set for a form control, this boolean attribute disables the control for your input</description>
	   <name>disabled</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Enables  keyboard input, if "false" keyboard input will be locked. Default value is "true"</description>
	   <name>enableManualInput</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>Defines the appearance of values in the list. Default value is "true".</description>
	   <name>filterNewValues</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Delay between losing focus and pop-up list closing. Default value is "0".</description>
	   <name>hideDelay</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Integer</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Every component may have a unique id that is automatically created if omitted</description>
	   <name>id</name>
	   	   	   		<rtexprvalue>false</rtexprvalue>
	   		<type>java.lang.String</type>
	   	  </attribute>
		  		  <attribute>
	   <description>A flag indicating that this component value must be converted
            and validated immediately (that is, during Apply Request Values
            phase), rather than waiting until a Process Validations phase</description>
	   <name>immediate</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Style Class attribute for the input field</description>
	   <name>inputClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Style Class attribute for the disabled input</description>
	   <name>inputDisabledClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style rules to be applied to disabled input</description>
	   <name>inputDisabledStyle</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Style Class attribute for the inactive input</description>
	   <name>inputInactiveClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style rules to be applied to inactive input</description>
	   <name>inputInactiveStyle</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style rules to be applied to input field</description>
	   <name>inputStyle</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Style Class attribute for the items</description>
	   <name>itemClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Style Class attribute for the selected item</description>
	   <name>itemSelectedClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A localized user presentable name for this component.</description>
	   <name>label</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Style Class attribute for the popup list</description>
	   <name>listClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Defines height of file pop-up list. Default value is "200px".</description>
	   <name>listHeight</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style rules to be applied to popup list</description>
	   <name>listStyle</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Defines width of file popup list</description>
	   <name>listWidth</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  	  	  		  <attribute>
	   <description>The client side script method to be called when the element loses the focus</description>
	   <name>onblur</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when the element value is changed</description>
	   <name>onchange</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The clientside script method to be called when the element is clicked</description>
	   <name>onclick</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when the element is double-clicked</description>
	   <name>ondblclick</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when the element gets the focus</description>
	   <name>onfocus</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a key is pressed down over the element</description>
	   <name>onkeydown</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a key is pressed over the element and released</description>
	   <name>onkeypress</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a key is released</description>
	   <name>onkeyup</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The clientside script method to be called when the list is called</description>
	   <name>onlistcall</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The clientside script method to be called when the list is closed</description>
	   <name>onlistclose</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a mouse button is pressed down over the element</description>
	   <name>onmousedown</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a pointer is moved within the element</description>
	   <name>onmousemove</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a pointer is moved away from the element</description>
	   <name>onmouseout</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a pointer is moved onto the element</description>
	   <name>onmouseover</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a mouse button is released</description>
	   <name>onmouseup</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when some text is selected in the text field. This attribute can be used with the INPUT and TEXTAREA elements.</description>
	   <name>onselect</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "false", this component is not rendered</description>
	   <name>rendered</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "true", this component is checked for non-empty input</description>
	   <name>required</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A ValueExpression enabled attribute that, if present,
			will be used as the text of the validation message for
			the "required" facility, if the "required" facility is
			used</description>
	   <name>requiredMessage</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Defines if the first value from suggested is selected in pop-up list. Default value is "true".</description>
	   <name>selectFirstOnUpdate</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Delay between event and pop-up list showing. Default value is "0".</description>
	   <name>showDelay</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Integer</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>CSS style(s) is/are to be applied when this component is rendered</description>
	   <name>style</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Corresponds to the HTML class attribute</description>
	   <name>styleClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Defines the suggestion collection</description>
	   <name>suggestionValues</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>This attribute specifies the position of the current element in the tabbing order for the current document. This value must be a number between 0 and 32767. User agents should ignore leading zeros</description>
	   <name>tabindex</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>MethodBinding pointing at a method that is called during
            Process Validations phase of the request processing lifecycle,
            to validate the current value of this component</description>
	   <name>validator</name>
	   	   	   						<deferred-method>
					<method-signature>void validator(javax.faces.context.FacesContext, javax.faces.component.UIComponent, java.lang.Object)</method-signature>
				</deferred-method>
				   	  </attribute>
		  		  <attribute>
	   <description>A ValueExpression enabled attribute that, if present,
			will be used as the text of the validator message,
			replacing any message that comes from the validator</description>
	   <name>validatorMessage</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>The current value of this component</description>
	   <name>value</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Listener for value changes</description>
	   <name>valueChangeListener</name>
	   	   	   						<deferred-method>
					<method-signature>void valueChangeListener(javax.faces.event.ValueChangeEvent)</method-signature>
				</deferred-method>
				   	  </attribute>
		  	  		  <attribute>
	   <description>Width of the component. Default value is "150".</description>
	   <name>width</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  
	</tag>
<tag>
	  	  <description>The &amp;lt;rich:componentControl&amp;gt; allows to call JavaScript API functions on components after some defined events.</description>
	  	  	  		  <name>componentControl</name>
	  	  <tag-class>org.richfaces.taglib.ComponentControlTag</tag-class>
	  <body-content>JSP</body-content>
	  
	    		  <attribute>
	   <description>Defines the page loading phase when componentControl is attached to another component. Default value is "onavailable"</description>
	   <name>attachTiming</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Client identifier of the component or id of the existing DOM element that is a source
				for given event. If attachTo is defined, the event is attached on the client according
				to the attachTiming attribute.
				If attachTo is not defined, the event is attached on the server to the closest in the
				component tree parent component.</description>
	   <name>attachTo</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The attribute takes a value-binding expression for a component property of
a backing bean</description>
	   <name>binding</name>
	   	   	   					   	<deferred-value>
					<type>javax.faces.component.UIComponent</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Disable default action for target event ( append "return false;" to JavaScript )</description>
	   <name>disableDefault</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>The Event that is used to trigger the operation on the target component</description>
	   <name>event</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  	  		  <attribute>
	   <description>Client identifier of the target component.</description>
	   <name>for</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Every component may have a unique id that is automatically created if omitted</description>
	   <name>id</name>
	   	   	   		<rtexprvalue>false</rtexprvalue>
	   		<type>java.lang.String</type>
	   	  </attribute>
		  		  <attribute>
	   <description>The optional name of the function that might be used to trigger the operation on the target component</description>
	   <name>name</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>The function of JavaScript API that will be invoked. The API method
				is attached to the 'component' property of the root DOM element that represents
				the target component. The function has two parameters - event and params. See: 'params'
				attribute for details.</description>
	   <name>operation</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The set of parameters passed to the function of Javascript API that will be invoked. 
				The JSON syntax is used to define the parameters, but without open and closed curve 
				bracket.
				As an alternative, the set of f:param can be used to define the parameters passed to the 
				API function. If both way are used to define the parameters, both set are concatenated.
				if names are equals, the f:param has a priority.</description>
	   <name>params</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>If "false", this component is not rendered</description>
	   <name>rendered</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  	  
	</tag>
<tag>
	  	  <description>The &amp;lt;rich:contextMenu&amp;gt; component is used for creating multileveled context menus that are activated after a user defines an event ( "onmouseover" , "onclick" , etc.) on any element on the page.</description>
	  	  	  		  <name>contextMenu</name>
	  	  <tag-class>org.richfaces.taglib.ContextMenuTag</tag-class>
	  <body-content>JSP</body-content>
	  
	    		  <attribute>
	   <description>Defines the timing when the menu is attached to the target element. Possible values "onload", "immediate", "onavailable" (default). Default value is "onavailable".</description>
	   <name>attachTiming</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Client identifier of the component or id of the existing DOM element that is a source
				for a given event. If attachTo is defined, the event is attached on the client according
				to the AttachTiming attribute.
				If both attached and attachTo attributes are defined, and attribute attached has value
				'false', it is considered to have higher priority.</description>
	   <name>attachTo</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If the value of the "attached" attribute is true, the component is attached to the component,
                specified in the "attachTo" attribute or to the parent component,
                if "attachTo" is not defined.  Default value is "true".</description>
	   <name>attached</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The attribute takes a value-binding expression for a component property of
a backing bean</description>
	   <name>binding</name>
	   	   	   					   	<deferred-value>
					<type>javax.faces.component.UIComponent</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Forbids default handling for adjusted event. Default value "false".</description>
	   <name>disableDefaultMenu</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Space-separated list of CSS style class(es) that are be applied to disabled item of this component</description>
	   <name>disabledItemClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style(s) is/are to be applied to disabled item when this component is rendered.</description>
	   <name>disabledItemStyle</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Defines an event on the parent element to display  the menu. Default value is  "oncontextmenu".</description>
	   <name>event</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>Delay between losing focus and menu closing. Default value is "800".</description>
	   <name>hideDelay</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Integer</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Every component may have a unique id that is automatically created if omitted</description>
	   <name>id</name>
	   	   	   		<rtexprvalue>false</rtexprvalue>
	   		<type>java.lang.String</type>
	   	  </attribute>
		  		  <attribute>
	   <description>Space-separated list of CSS style class(es) that are be applied to item of this component</description>
	   <name>itemClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style(s) is/are to be applied to item when this component is rendered.</description>
	   <name>itemStyle</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: script expression; a menu is collapsed.</description>
	   <name>oncollapse</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: script expression; a menu is expanded.</description>
	   <name>onexpand</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: script expression; some group was activated</description>
	   <name>ongroupactivate</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: script expression; some item was selected</description>
	   <name>onitemselect</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: script expression; a pointer was moved within</description>
	   <name>onmousemove</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: script expression; a pointer was moved away</description>
	   <name>onmouseout</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: script expression; a pointer was moved onto</description>
	   <name>onmouseover</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Set minimal width for the all of the lists that will appear</description>
	   <name>popupWidth</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "false", this component is not rendered</description>
	   <name>rendered</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Space-separated list of CSS style class(es) that are be applied to selected item of this component.</description>
	   <name>selectItemClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style(s) is/are to be applied to selected item when this component is rendered.</description>
	   <name>selectItemStyle</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Delay between event and menu showing. Default value is "50".</description>
	   <name>showDelay</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Integer</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style(s) is/are to be applied when this component is rendered</description>
	   <name>style</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Corresponds to the HTML class attribute</description>
	   <name>styleClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Sets the submission mode for all menu items of the menu except
                those where this attribute redefined. Possible value are "ajax","server", "none". Default value is "server".</description>
	   <name>submitMode</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  
	</tag>
<tag>
	  	  <description>The &amp;lt;rich:dataDefinitionList&amp;gt; component for definition lists rendering that allows choosing data from a model and obtains built-in support of Ajax updates.</description>
	  	  	  		  <name>dataDefinitionList</name>
	  	  <tag-class>org.richfaces.taglib.DataDefinitionListTag</tag-class>
	  <body-content>JSP</body-content>
	  
	    		  <attribute>
	   <description>This attribute defines row keys that are updated after an AJAX request</description>
	   <name>ajaxKeys</name>
	   	   	   					   	<deferred-value>
					<type>java.util.Set</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>The attribute takes a value-binding expression for a component property of
a backing bean</description>
	   <name>binding</name>
	   	   	   					   	<deferred-value>
					<type>javax.faces.component.UIComponent</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Comma-delimited list of CSS style classes that are be applied to the columns of this table. A space separated list of classes may also be specified for any individual column. If the number of elements in this list is less than the number of columns specified in the "columns" attribute, no "class" attribute is output for each column greater than the number of elements in the list. If the number of elements in the list is greater than the number of columns specified in the "columns" attribute, the elements at the position in the list after the value of the "columns" attribute are ignored</description>
	   <name>columnClasses</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>It defines EL-binding  for a component state for saving or redefinition</description>
	   <name>componentState</name>
	   	   	   					   	<deferred-value>
					<type>org.ajax4jsf.model.DataComponentState</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Direction indication for text that does not inherit
			directionality. Valid values are "LTR" (left-to-right)
			and "RTL" (right-to-left)</description>
	   <name>dir</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>A zero-relative row number of the first row to display</description>
	   <name>first</name>
	   	   	   					   	<deferred-value>
					<type>int</type>
				</deferred-value>
				   	  </attribute>
		  	  	  	  	  		  <attribute>
	   <description>Every component may have a unique id that is automatically created if omitted</description>
	   <name>id</name>
	   	   	   		<rtexprvalue>false</rtexprvalue>
	   		<type>java.lang.String</type>
	   	  </attribute>
		  		  <attribute>
	   <description>Code describing the language used in the generated markup for this component</description>
	   <name>lang</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "false", this component is not rendered</description>
	   <name>rendered</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>A comma-delimited list of CSS style classes that is applied to popup table rows. A space separated list of classes may also be specified for any individual row. The styles are applied, in turn, to each row in the table. For example, if the list has two elements, the first style class in the list is applied to the first row, the second to the second row, the first to the third row, the second to the fourth row, etc. In other words, we keep iterating through the list until we reach the end, and then we start at the beginning again</description>
	   <name>rowClasses</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  	  	  		  <attribute>
	   <description>RowKey is a representation of an identifier for a specific data row</description>
	   <name>rowKey</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Converter for a RowKey object.</description>
	   <name>rowKeyConverter</name>
	   	   	   					   	<deferred-value>
					<type>javax.faces.convert.Converter</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The attribute provides access to a row key in a Request scope</description>
	   <name>rowKeyVar</name>
	   	   	   		<rtexprvalue>false</rtexprvalue>
	   		<type>java.lang.String</type>
	   	  </attribute>
		  		  <attribute>
	   <description>A number of rows to display, or zero for all remaining
            rows in the table</description>
	   <name>rows</name>
	   	   	   					   	<deferred-value>
					<type>int</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>CSS style(s) is/are to be applied when this component is rendered</description>
	   <name>style</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Corresponds to the HTML class attribute</description>
	   <name>styleClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Advisory title information about markup elements generated for this component</description>
	   <name>title</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The current value for this component</description>
	   <name>value</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A request-scope attribute via which the data object for the
            current row will be used when iterating</description>
	   <name>var</name>
	   	   	   		<rtexprvalue>false</rtexprvalue>
	   		<type>java.lang.String</type>
	   	  </attribute>
		  	  
	</tag>
<tag>
	  	  <description>A slider-based action component used for filtering table data.</description>
	  	  	  		  <name>dataFilterSlider</name>
	  	  <tag-class>org.richfaces.taglib.DataFilterSliderTag</tag-class>
	  <body-content>JSP</body-content>
	  
	    	  		  <attribute>
	   <description>MethodBinding pointing at the application action to be invoked,
            if this UIComponent is activated by you, during the Apply
            Request Values or Invoke Application phase of the request
            processing lifecycle, depending on the value of the immediate
            property</description>
	   <name>action</name>
	   	   	   						<deferred-method>
					<method-signature>java.lang.Object action()</method-signature>
				</deferred-method>
				   	  </attribute>
		  	  		  <attribute>
	   <description>MethodBinding pointing at method accepting  an ActionEvent with return type void</description>
	   <name>actionListener</name>
	   	   	   						<deferred-method>
					<method-signature>void actionListener(javax.faces.event.ActionEvent)</method-signature>
				</deferred-method>
				   	  </attribute>
		  	  	  	  		  <attribute>
	   <description>boolean attribute which provides possibility to limit JSF tree processing(decoding, conversion/validation, value applying) 
to the component which send the request only</description>
	   <name>ajaxSingle</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The attribute takes a value-binding expression for a component property of
a backing bean</description>
	   <name>binding</name>
	   	   	   					   	<deferred-value>
					<type>javax.faces.component.UIComponent</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "true", after process validations phase it skips updates of model beans on a force render response. It can be used for validating components input</description>
	   <name>bypassUpdates</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>An error message to use in client side validation events</description>
	   <name>clientErrorMessage</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Serialized (on default with JSON) data passed on the client by a developer on AJAX request. It's accessible via "data.foo" syntax</description>
	   <name>data</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A slider end point</description>
	   <name>endRange</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Integer</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Name of requests queue to avoid send next request before complete other from same event. Can be used to reduce number of requests of frequently events (key press, mouse move etc.)</description>
	   <name>eventsQueue</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>The styleClass for input that displays the value : manualInput must
                be "true"</description>
	   <name>fieldStyleClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A getter of an object member required to compare a slider value to. This is a
                value that is used in results filtering</description>
	   <name>filterBy</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>id of element to set focus after request completed on client side</description>
	   <name>focus</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The component using UIData (datatable id)</description>
	   <name>for</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>This is a string which is used in a value attribute of the datatable. It is used for resetting
                the datatable back to the original list provided by a backing bean</description>
	   <name>forValRef</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The handleStyleClass for a handle</description>
	   <name>handleStyleClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Current handle value</description>
	   <name>handleValue</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Integer</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Every component may have a unique id that is automatically created if omitted</description>
	   <name>id</name>
	   	   	   		<rtexprvalue>false</rtexprvalue>
	   		<type>java.lang.String</type>
	   	  </attribute>
		  		  <attribute>
	   <description>Attribute allows to ignore an Ajax Response produced by a request if the newest 'similar' request is
in a queue already. ignoreDupResponses="true" does not cancel the request while it is processed on the server,
but just allows to avoid unnecessary updates on the client side if the response isn't actual now</description>
	   <name>ignoreDupResponses</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>True means, that the default ActionListener should be executed
            immediately (i.e. during Apply Request Values phase of the
            request processing lifecycle), rather than waiting until the
            Invoke Application phase</description>
	   <name>immediate</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Amount to which a handle on each slide/move should be incremented</description>
	   <name>increment</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Integer</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "true", then of all AJAX-rendered on the page components only those will be updated, 
		which ID's are passed to the "reRender" attribute of the describable component. 
		"false"-the default value-means that all components with ajaxRendered="true" will be updated.</description>
	   <name>limitToList</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>False value for this attribute makes text field "read-only" and "hidden".
                Hence, the value can be changed only from a handle.
                Default value is "true"</description>
	   <name>manualInput</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>DEPRECATED (use submitOnSlide). If the slider value changes must submit a form. Default value is "true".</description>
	   <name>onSlideSubmit</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called before DOM is updated</description>
	   <name>onbeforedomupdate</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: script expression; a handler's position is changed on sliding</description>
	   <name>onchange</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The clientside script method to be called when the element is clicked</description>
	   <name>onclick</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called after the request is completed</description>
	   <name>oncomplete</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when the element is double-clicked</description>
	   <name>ondblclick</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: a script expression; event fires whenever an
        		JavaScript error occurs</description>
	   <name>onerror</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: a script expression; a key is pressed down</description>
	   <name>oninputkeydown</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: a script expression; a key is pressed and released</description>
	   <name>oninputkeypress</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: a script expression; a key is released</description>
	   <name>oninputkeyup</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a key is pressed down over the element</description>
	   <name>onkeydown</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a key is pressed over the element and released</description>
	   <name>onkeypress</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a key is released</description>
	   <name>onkeyup</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a mouse button is pressed down over the element</description>
	   <name>onmousedown</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a pointer is moved within the element</description>
	   <name>onmousemove</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a pointer is moved away from the element</description>
	   <name>onmouseout</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a pointer is moved onto the element</description>
	   <name>onmouseover</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a mouse button is released</description>
	   <name>onmouseup</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: script expression; a handler is moved on sliding</description>
	   <name>onslide</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Id['s] (in format of call  UIComponent.findComponent()) of components, processed at the phases 2-5 in case of AjaxRequest  caused by this component. Can be single id, comma-separated list of Id's, or EL Expression  with array or Collection</description>
	   <name>process</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The rangeStyleClass for the background div showing a full range</description>
	   <name>rangeStyleClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Id['s] (in format of call  UIComponent.findComponent()) of components, rendered in case of AjaxRequest  caused by this component. Can be single id, comma-separated list of Id's, or EL Expression  with array or Collection</description>
	   <name>reRender</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "false", this component is not rendered</description>
	   <name>rendered</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Attribute defines the time (in ms.) that the request will be wait in the queue before it is ready to send.
When the delay time is over, the request will be sent to the server or removed if the newest 'similar' request is in a queue already</description>
	   <name>requestDelay</name>
	   	   	   					   	<deferred-value>
					<type>int</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If there are any component requests with identical IDs then these requests will be grouped.</description>
	   <name>similarityGroupingId</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>MethodBinding representing an action listener method that will be notified after changing of slider control position</description>
	   <name>sliderListener</name>
	   	   	   						<deferred-method>
					<method-signature>void sliderListener(org.richfaces.event.DataFilterSliderEvent)</method-signature>
				</deferred-method>
				   	  </attribute>
		  	  	  		  <attribute>
	   <description>A slider begin point</description>
	   <name>startRange</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Integer</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>ID (in format of call UIComponent.findComponent()) of Request status component</description>
	   <name>status</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Specifies if the component will store a UIData object (your table rows) in session</description>
	   <name>storeResults</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style(s) is/are to be applied when this component is rendered</description>
	   <name>style</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The styleClass for the container div surrounding the component</description>
	   <name>styleClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If the slider value changes must submit a form. Default value is "true".</description>
	   <name>submitOnSlide</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Response waiting time on a particular request. If a response is not received during this time, the request is aborted</description>
	   <name>timeout</name>
	   	   	   					   	<deferred-value>
					<type>int</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The trackStyleClass for a background div</description>
	   <name>trackStyleClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>It shows or hides a trailer following a handle</description>
	   <name>trailer</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The trailerStyleClass for a div following a handle</description>
	   <name>trailerStyleClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The current value for this component</description>
	   <name>value</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Width of the slider control. Default value is "200px".</description>
	   <name>width</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  
	</tag>
<tag>
	  	  <description>The &amp;lt;rich:dataGrid&amp;gt; component to render data as a grid that allows choosing data from a model and obtains built-in support of Ajax updates.</description>
	  	  	  		  <name>dataGrid</name>
	  	  <tag-class>org.richfaces.taglib.DataGridTag</tag-class>
	  <body-content>JSP</body-content>
	  
	    		  <attribute>
	   <description>This attribute defines row keys that are updated after an AJAX request</description>
	   <name>ajaxKeys</name>
	   	   	   					   	<deferred-value>
					<type>java.util.Set</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Deprecated. This attribute specifies the position of the table with respect to the document. 
            The possible values are "left", "center" and "right". The default value is "left".</description>
	   <name>align</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>Deprecated. This attribute sets the background color for the document body or table cells.
            
            This attribute sets the background color of the canvas for the document body (the BODY element) or for tables (the TABLE, TR, TH, and TD elements). Additional attributes for specifying text color can be used with the BODY element.
            
            This attribute has been deprecated in favor of style sheets for specifying background color information</description>
	   <name>bgcolor</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The attribute takes a value-binding expression for a component property of
a backing bean</description>
	   <name>binding</name>
	   	   	   					   	<deferred-value>
					<type>javax.faces.component.UIComponent</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>This attributes specifies the width of the frame around a component. Default value is "0".</description>
	   <name>border</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Space-separated list of CSS style class(es) that are be applied to caption for this component</description>
	   <name>captionClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style(s) is/are to be applied to caption when this component is rendered</description>
	   <name>captionStyle</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>This attribute specifies the amount of space between the border of the cell and its contents. Default value is "0".</description>
	   <name>cellpadding</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>This attribute specifies the amount of space between the border of the cell and its contents.  
				The attribute also specifies the amount of space to leave between cells. Default value is "0".</description>
	   <name>cellspacing</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Comma-delimited list of CSS style classes that are be applied to the columns of this table. A space separated list of classes may also be specified for any individual column. If the number of elements in this list is less than the number of columns specified in the "columns" attribute, no "class" attribute is output for each column greater than the number of elements in the list. If the number of elements in the list is greater than the number of columns specified in the "columns" attribute, the elements at the position in the list after the value of the "columns" attribute are ignored</description>
	   <name>columnClasses</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Number of columns</description>
	   <name>columns</name>
	   	   	   					   	<deferred-value>
					<type>int</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>It defines EL-binding  for a component state for saving or redefinition</description>
	   <name>componentState</name>
	   	   	   					   	<deferred-value>
					<type>org.ajax4jsf.model.DataComponentState</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Direction indication for text that does not inherit
			directionality. Valid values are "LTR" (left-to-right)
			and "RTL" (right-to-left)</description>
	   <name>dir</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Number of elements in grid</description>
	   <name>elements</name>
	   	   	   					   	<deferred-value>
					<type>int</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>A zero-relative row number of the first row to display</description>
	   <name>first</name>
	   	   	   					   	<deferred-value>
					<type>int</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>Space-separated list of CSS style class(es) that are be applied to footer for this component</description>
	   <name>footerClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>This attribute specifies which sides of the frame surrounding a table will be visible. Possible values:  "void", "above", "below", "hsides", "lhs", "rhs", "vsides", "box" and "border".
        The default value is "void".</description>
	   <name>frame</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>Space-separated list of CSS style class(es) that are be applied to header for this component</description>
	   <name>headerClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Every component may have a unique id that is automatically created if omitted</description>
	   <name>id</name>
	   	   	   		<rtexprvalue>false</rtexprvalue>
	   		<type>java.lang.String</type>
	   	  </attribute>
		  		  <attribute>
	   <description>Code describing the language used in the generated markup for this component</description>
	   <name>lang</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: a script expression; a pointer button is clicked on row</description>
	   <name>onRowClick</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: a script expression; a pointer button is double-clicked on row</description>
	   <name>onRowDblClick</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: script expression; a pointer button is pressed down on row</description>
	   <name>onRowMouseDown</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: a script expression; a pointer is moved within of row</description>
	   <name>onRowMouseMove</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: a script expression; a pointer is moved away of row</description>
	   <name>onRowMouseOut</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: a script expression; a pointer is moved onto of row</description>
	   <name>onRowMouseOver</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: script expression; a pointer button is released on row</description>
	   <name>onRowMouseUp</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The clientside script method to be called when the element is clicked</description>
	   <name>onclick</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when the element is double-clicked</description>
	   <name>ondblclick</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a key is pressed down over the element</description>
	   <name>onkeydown</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a key is pressed over the element and released</description>
	   <name>onkeypress</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a key is released</description>
	   <name>onkeyup</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a mouse button is pressed down over the element</description>
	   <name>onmousedown</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a pointer is moved within the element</description>
	   <name>onmousemove</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a pointer is moved away from the element</description>
	   <name>onmouseout</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a pointer is moved onto the element</description>
	   <name>onmouseover</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a mouse button is released</description>
	   <name>onmouseup</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "false", this component is not rendered</description>
	   <name>rendered</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>A comma-delimited list of CSS style classes that is applied to popup table rows. A space separated list of classes may also be specified for any individual row. The styles are applied, in turn, to each row in the table. For example, if the list has two elements, the first style class in the list is applied to the first row, the second to the second row, the first to the third row, the second to the fourth row, etc. In other words, we keep iterating through the list until we reach the end, and then we start at the beginning again</description>
	   <name>rowClasses</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  	  	  		  <attribute>
	   <description>RowKey is a representation of an identifier for a specific data row</description>
	   <name>rowKey</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Converter for a row key object</description>
	   <name>rowKeyConverter</name>
	   	   	   					   	<deferred-value>
					<type>javax.faces.convert.Converter</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Request scoped variable for client access to rowKey</description>
	   <name>rowKeyVar</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>This attribute specifies which rules will appear between cells within a table. The rendering of rules is user agent dependent. Possible values:
            
            * none: No rules. This is the default value.
            * groups: Rules will appear between row groups (see THEAD, TFOOT, and TBODY) and column groups (see COLGROUP and COL) only.
            * rows: Rules will appear between rows only.
            * cols: Rules will appear between columns only.
            * all: Rules will appear between all rows and columns</description>
	   <name>rules</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The attribute  provides access to a component state on the client side</description>
	   <name>stateVar</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style(s) is/are to be applied when this component is rendered</description>
	   <name>style</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Corresponds to the HTML class attribute</description>
	   <name>styleClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>This attribute provides a summary of the table's purpose and structure for user agents rendering to non-visual media such as speech and Braille</description>
	   <name>summary</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Advisory title information about markup elements generated for this component</description>
	   <name>title</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The current value for this component</description>
	   <name>value</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A request-scope attribute via which the data object for the
            current row will be used when iterating</description>
	   <name>var</name>
	   	   	   		<rtexprvalue>false</rtexprvalue>
	   		<type>java.lang.String</type>
	   	  </attribute>
		  		  <attribute>
	   <description>This attribute specifies the desired width of the entire table and is intended for visual user agents. When the value is percentage value, the value is relative to the user agent's available horizontal space. In the absence of any width specification, table width is determined by the user agent</description>
	   <name>width</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  
	</tag>
<tag>
	  	  <description>The &amp;lt;rich:dataList&amp;gt; component for unordered lists rendering that allows choosing data from a model and obtains built-in support of Ajax updates.</description>
	  	  	  		  <name>dataList</name>
	  	  <tag-class>org.richfaces.taglib.DataListTag</tag-class>
	  <body-content>JSP</body-content>
	  
	    		  <attribute>
	   <description>This attribute defines row keys that are updated after an AJAX request</description>
	   <name>ajaxKeys</name>
	   	   	   					   	<deferred-value>
					<type>java.util.Set</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>The attribute takes a value-binding expression for a component property of
a backing bean</description>
	   <name>binding</name>
	   	   	   					   	<deferred-value>
					<type>javax.faces.component.UIComponent</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>It defines EL-binding  for a component state for saving or redefinition</description>
	   <name>componentState</name>
	   	   	   					   	<deferred-value>
					<type>org.ajax4jsf.model.DataComponentState</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Direction indication for text that does not inherit
			directionality. Valid values are "LTR" (left-to-right)
			and "RTL" (right-to-left)</description>
	   <name>dir</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>A zero-relative row number of the first row to display</description>
	   <name>first</name>
	   	   	   					   	<deferred-value>
					<type>int</type>
				</deferred-value>
				   	  </attribute>
		  	  	  	  	  		  <attribute>
	   <description>Every component may have a unique id that is automatically created if omitted</description>
	   <name>id</name>
	   	   	   		<rtexprvalue>false</rtexprvalue>
	   		<type>java.lang.String</type>
	   	  </attribute>
		  		  <attribute>
	   <description>Code describing the language used in the generated markup for this component</description>
	   <name>lang</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "false", this component is not rendered</description>
	   <name>rendered</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>A comma-delimited list of CSS style classes that is applied to popup table rows. A space separated list of classes may also be specified for any individual row. The styles are applied, in turn, to each row in the table. For example, if the list has two elements, the first style class in the list is applied to the first row, the second to the second row, the first to the third row, the second to the fourth row, etc. In other words, we keep iterating through the list until we reach the end, and then we start at the beginning again</description>
	   <name>rowClasses</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  	  	  		  <attribute>
	   <description>RowKey is a representation of an identifier for a specific data row</description>
	   <name>rowKey</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Converter for a row key object</description>
	   <name>rowKeyConverter</name>
	   	   	   					   	<deferred-value>
					<type>javax.faces.convert.Converter</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The attribute provides access to a row key in a Request scope</description>
	   <name>rowKeyVar</name>
	   	   	   		<rtexprvalue>false</rtexprvalue>
	   		<type>java.lang.String</type>
	   	  </attribute>
		  		  <attribute>
	   <description>A number of rows to display, or zero for all remaining
            rows in the table</description>
	   <name>rows</name>
	   	   	   					   	<deferred-value>
					<type>int</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The attribute  provides access to a component state on the client side</description>
	   <name>stateVar</name>
	   	   	   		<rtexprvalue>false</rtexprvalue>
	   		<type>java.lang.String</type>
	   	  </attribute>
		  		  <attribute>
	   <description>CSS style(s) is/are to be applied when this component is rendered</description>
	   <name>style</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Corresponds to the HTML class attribute</description>
	   <name>styleClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Advisory title information about markup elements generated for this component</description>
	   <name>title</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Corresponds to the HTML DL type attribute</description>
	   <name>type</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The current value for this component</description>
	   <name>value</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A request-scope attribute via which the data object for the
            current row will be used when iterating</description>
	   <name>var</name>
	   	   	   		<rtexprvalue>false</rtexprvalue>
	   		<type>java.lang.String</type>
	   	  </attribute>
		  	  
	</tag>
<tag>
	  	  <description>The &amp;lt;rich:dataOrderedList&amp;gt; component for ordered lists rendering that allows choosing data from a model and obtains built-in support of Ajax updates.</description>
	  	  	  		  <name>dataOrderedList</name>
	  	  <tag-class>org.richfaces.taglib.DataOrderedListTag</tag-class>
	  <body-content>JSP</body-content>
	  
	    		  <attribute>
	   <description>This attribute defines row keys that are updated after an AJAX request</description>
	   <name>ajaxKeys</name>
	   	   	   					   	<deferred-value>
					<type>java.util.Set</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>The attribute takes a value-binding expression for a component property of
a backing bean</description>
	   <name>binding</name>
	   	   	   					   	<deferred-value>
					<type>javax.faces.component.UIComponent</type>
				</deferred-value>
				   	  </attribute>
		  	  	  		  <attribute>
	   <description>Direction indication for text that does not inherit
			directionality. Valid values are "LTR" (left-to-right)
			and "RTL" (right-to-left)</description>
	   <name>dir</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>A zero-relative row number of the first row to display</description>
	   <name>first</name>
	   	   	   					   	<deferred-value>
					<type>int</type>
				</deferred-value>
				   	  </attribute>
		  	  	  	  	  		  <attribute>
	   <description>Every component may have a unique id that is automatically created if omitted</description>
	   <name>id</name>
	   	   	   		<rtexprvalue>false</rtexprvalue>
	   		<type>java.lang.String</type>
	   	  </attribute>
		  		  <attribute>
	   <description>Code describing the language used in the generated markup for this component</description>
	   <name>lang</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "false", this component is not rendered</description>
	   <name>rendered</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>A comma-delimited list of CSS style classes that is applied to popup table rows. A space separated list of classes may also be specified for any individual row. The styles are applied, in turn, to each row in the table. For example, if the list has two elements, the first style class in the list is applied to the first row, the second to the second row, the first to the third row, the second to the fourth row, etc. In other words, we keep iterating through the list until we reach the end, and then we start at the beginning again</description>
	   <name>rowClasses</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  	  	  		  <attribute>
	   <description>RowKey is a representation of an identifier for a specific data row</description>
	   <name>rowKey</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Converter for a RowKey object.</description>
	   <name>rowKeyConverter</name>
	   	   	   					   	<deferred-value>
					<type>javax.faces.convert.Converter</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The attribute provides access to a row key in a Request scope</description>
	   <name>rowKeyVar</name>
	   	   	   		<rtexprvalue>false</rtexprvalue>
	   		<type>java.lang.String</type>
	   	  </attribute>
		  		  <attribute>
	   <description>A number of rows to display, or zero for all remaining
            rows in the table</description>
	   <name>rows</name>
	   	   	   					   	<deferred-value>
					<type>int</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>CSS style(s) is/are to be applied when this component is rendered</description>
	   <name>style</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Corresponds to the HTML class attribute</description>
	   <name>styleClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Advisory title information about markup elements generated for this component</description>
	   <name>title</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Corresponds to the HTML OL type attribute</description>
	   <name>type</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The current value for this component</description>
	   <name>value</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A request-scope attribute via which the data object for the
            current row will be used when iterating</description>
	   <name>var</name>
	   	   	   		<rtexprvalue>false</rtexprvalue>
	   		<type>java.lang.String</type>
	   	  </attribute>
		  	  
	</tag>
<tag>
	  	  <description>The &amp;lt;rich:dataTable&amp;gt; component for tables rendering that allows choosing data from a model and obtains built-in support of Ajax updates.</description>
	  	  	  		  <name>dataTable</name>
	  	  <tag-class>org.richfaces.taglib.DataTableTag</tag-class>
	  <body-content>JSP</body-content>
	  
	    		  <attribute>
	   <description>This attribute defines row keys that are updated after an AJAX request</description>
	   <name>ajaxKeys</name>
	   	   	   					   	<deferred-value>
					<type>java.util.Set</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Deprecated. This attribute specifies the position of the table with respect to the document. 
            The possible values are "left", "center" and "right". The default value is "left".</description>
	   <name>align</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>Deprecated. This attribute sets the background color for the document body or table cells.
            
            This attribute sets the background color of the canvas for the document body (the BODY element) or for tables (the TABLE, TR, TH, and TD elements). Additional attributes for specifying text color can be used with the BODY element.
            
            This attribute has been deprecated in favor of style sheets for specifying background color information</description>
	   <name>bgcolor</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The attribute takes a value-binding expression for a component property of
a backing bean</description>
	   <name>binding</name>
	   	   	   					   	<deferred-value>
					<type>javax.faces.component.UIComponent</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>This attributes specifies the width of the frame around a component. Default value is "0".</description>
	   <name>border</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Space-separated list of CSS style class(es) that are be applied to caption for this component</description>
	   <name>captionClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style(s) is/are to be applied to caption when this component is rendered</description>
	   <name>captionStyle</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>This attribute specifies the amount of space between the border of the cell and its contents. Default value is "0".</description>
	   <name>cellpadding</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>This attribute specifies the amount of space between the border of the cell and its contents.  The attribute also specifies the amount of space to leave between cells. Default value is "0".</description>
	   <name>cellspacing</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Comma-delimited list of CSS style classes that are be applied to the columns of this table. A space separated list of classes may also be specified for any individual column. If the number of elements in this list is less than the number of columns specified in the "columns" attribute, no "class" attribute is output for each column greater than the number of elements in the list. If the number of elements in the list is greater than the number of columns specified in the "columns" attribute, the elements at the position in the list after the value of the "columns" attribute are ignored</description>
	   <name>columnClasses</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Number of columns</description>
	   <name>columns</name>
	   	   	   					   	<deferred-value>
					<type>int</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Comma-separated list of width attribute for every column.
			Specifies a default width for each column in the table. 
			In addition to the standard pixel, percentage, and relative values, 
			this attribute allows the special form "0*" (zero asterisk) which 
			means that the width of the each column in the group should be the minimum width necessary 
			to hold the column's contents. This implies that a column's entire contents must be known before its width may be correctly computed. Authors should be aware that specifying "0*" will prevent visual user agents from rendering a table incrementally</description>
	   <name>columnsWidth</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>It defines EL-binding  for a component state for saving or redefinition</description>
	   <name>componentState</name>
	   	   	   					   	<deferred-value>
					<type>org.ajax4jsf.model.DataComponentState</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Direction indication for text that does not inherit
			directionality. Valid values are "LTR" (left-to-right)
			and "RTL" (right-to-left)</description>
	   <name>dir</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>A zero-relative row number of the first row to display</description>
	   <name>first</name>
	   	   	   					   	<deferred-value>
					<type>int</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>Space-separated list of CSS style class(es) that are be applied to footer for this component</description>
	   <name>footerClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>This attribute specifies which sides of the frame surrounding a table will be visible. Possible values:  "void", "above", "below", "hsides", "lhs", "rhs", "vsides", "box" and "border".
        The default value is "void".</description>
	   <name>frame</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>Space-separated list of CSS style class(es) that are be applied to header for this component</description>
	   <name>headerClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Every component may have a unique id that is automatically created if omitted</description>
	   <name>id</name>
	   	   	   		<rtexprvalue>false</rtexprvalue>
	   		<type>java.lang.String</type>
	   	  </attribute>
		  		  <attribute>
	   <description>Code describing the language used in the generated markup for this component</description>
	   <name>lang</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: a script expression; a pointer button is clicked on row</description>
	   <name>onRowClick</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>JavaScript handler to be called on right click.
		   Returning false prevents default browser context menu from being displayed</description>
	   <name>onRowContextMenu</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: a script expression; a pointer button is double-clicked on row</description>
	   <name>onRowDblClick</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: script expression; a pointer button is pressed down on row</description>
	   <name>onRowMouseDown</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: a script expression; a pointer is moved within of row</description>
	   <name>onRowMouseMove</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: a script expression; a pointer is moved away of row</description>
	   <name>onRowMouseOut</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: a script expression; a pointer is moved onto of row</description>
	   <name>onRowMouseOver</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: script expression; a pointer button is released on row</description>
	   <name>onRowMouseUp</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The clientside script method to be called when the element is clicked</description>
	   <name>onclick</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when the element is double-clicked</description>
	   <name>ondblclick</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a key is pressed down over the element</description>
	   <name>onkeydown</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a key is pressed over the element and released</description>
	   <name>onkeypress</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a key is released</description>
	   <name>onkeyup</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a mouse button is pressed down over the element</description>
	   <name>onmousedown</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a pointer is moved within the element</description>
	   <name>onmousemove</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a pointer is moved away from the element</description>
	   <name>onmouseout</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a pointer is moved onto the element</description>
	   <name>onmouseover</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a mouse button is released</description>
	   <name>onmouseup</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Id['s] (in format of call  UIComponent.findComponent()) of components, rendered in case of AjaxRequest caused by this component. Can be single id, comma-separated list of Id's, or EL Expression  with array or Collection</description>
	   <name>reRender</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "false", this component is not rendered</description>
	   <name>rendered</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>A comma-delimited list of CSS style classes that is applied to popup table rows. A space separated list of classes may also be specified for any individual row. The styles are applied, in turn, to each row in the table. For example, if the list has two elements, the first style class in the list is applied to the first row, the second to the second row, the first to the third row, the second to the fourth row, etc. In other words, we keep iterating through the list until we reach the end, and then we start at the beginning again</description>
	   <name>rowClasses</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  	  	  	  		  <attribute>
	   <description>Converter for a RowKey object.</description>
	   <name>rowKeyConverter</name>
	   	   	   					   	<deferred-value>
					<type>javax.faces.convert.Converter</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The attribute provides access to a row key in a Request scope</description>
	   <name>rowKeyVar</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A number of rows to display, or zero for all remaining
            rows in the table</description>
	   <name>rows</name>
	   	   	   					   	<deferred-value>
					<type>int</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>This attribute specifies which rules will appear between cells within a table. The rendering of rules is user agent dependent. Possible values:
            
            * none: No rules. This is the default value.
            * groups: Rules will appear between row groups (see THEAD, TFOOT, and TBODY) and column groups (see COLGROUP and COL) only.
            * rows: Rules will appear between rows only.
            * cols: Rules will appear between columns only.
            * all: Rules will appear between all rows and columns</description>
	   <name>rules</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Defines mode of sorting. Possible values are 'single' for sorting of one column and 'multi' for some.</description>
	   <name>sortMode</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Defines a set of columns ids in the sorting order</description>
	   <name>sortPriority</name>
	   	   	   					   	<deferred-value>
					<type>java.util.Collection</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The attribute  provides access to a component state on the client side</description>
	   <name>stateVar</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style(s) is/are to be applied when this component is rendered</description>
	   <name>style</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Corresponds to the HTML class attribute</description>
	   <name>styleClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>Advisory title information about markup elements generated for this component</description>
	   <name>title</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The current value for this component</description>
	   <name>value</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A request-scope attribute via which the data object for the
            current row will be used when iterating</description>
	   <name>var</name>
	   	   	   		<rtexprvalue>false</rtexprvalue>
	   		<type>java.lang.String</type>
	   	  </attribute>
		  		  <attribute>
	   <description>This attribute specifies the desired width of the entire table and is intended for visual user agents. When the value is percentage value, the value is relative to the user agent's available horizontal space. In the absence of any width specification, table width is determined by the user agent</description>
	   <name>width</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  
	</tag>
<tag>
	  	  <description>The &amp;lt;rich:datascroller&amp;gt; component is designed for providing the functionality of tables scrolling using Ajax requests.</description>
	  	  	  		  <name>datascroller</name>
	  	  <tag-class>org.richfaces.taglib.DatascrollerTag</tag-class>
	  <body-content>JSP</body-content>
	  
	    		  <attribute>
	   <description>MethodBinding pointing at the application action to be invoked,
            if this UIComponent is activated by you, during the Apply
            Request Values or Invoke Application phase of the request
            processing lifecycle, depending on the value of the immediate
            property</description>
	   <name>action</name>
	   	   	   						<deferred-method>
					<method-signature>java.lang.Object action()</method-signature>
				</deferred-method>
				   	  </attribute>
		  	  		  <attribute>
	   <description>MethodBinding pointing at method accepting  an ActionEvent with return type void</description>
	   <name>actionListener</name>
	   	   	   						<deferred-method>
					<method-signature>void actionListener(javax.faces.event.ActionEvent)</method-signature>
				</deferred-method>
				   	  </attribute>
		  	  	  		  <attribute>
	   <description>Boolean attribute which provides possibility to limit JSF tree processing(decoding, conversion/validation, value applying) to the component which send the request only.
				Default value is "true"</description>
	   <name>ajaxSingle</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>This attribute specifies the position of the table with relatively to  the document.
			Possible values are "left","center","right ". Default value is "center".</description>
	   <name>align</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The attribute takes a value-binding expression for a component property of
a backing bean</description>
	   <name>binding</name>
	   	   	   					   	<deferred-value>
					<type>javax.faces.component.UIComponent</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The attribute specifies the visibility of boundaryControls. 
				Possible values are: "show"  (controls are always visible ). "hide" (controls are hidden. 
				"auto" (unnecessary controls are hidden). Default value is "show".</description>
	   <name>boundaryControls</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "true", after process validations phase it skips updates of model beans on a force render response. It can be used for validating components input</description>
	   <name>bypassUpdates</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Serialized (on default with JSON) data passed on the client by a developer on AJAX request. It's accessible via "data.foo" syntax</description>
	   <name>data</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>Name of requests queue to avoid send next request before complete other from same event. Can be used to reduce number of requests of frequently events (key press, mouse move etc.)</description>
	   <name>eventsQueue</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>The attribute specifies the visibility of fastControls.
				Possible values are: "show"  (controls are always visible ). "hide" (controls are hidden. 
				"auto" (unnecessary controls are hidden). Default value is "show".</description>
	   <name>fastControls</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  	  		  <attribute>
	   <description>The attribute indicates pages quantity to switch onto when fast scrolling is used. Default value is "0".</description>
	   <name>fastStep</name>
	   	   	   					   	<deferred-value>
					<type>int</type>
				</deferred-value>
				   	  </attribute>
		  	  	  		  <attribute>
	   <description>id of element to set focus after request completed on client side</description>
	   <name>focus</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>ID of the table component whose data is scrollled</description>
	   <name>for</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Current handle value</description>
	   <name>handleValue</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Every component may have a unique id that is automatically created if omitted</description>
	   <name>id</name>
	   	   	   		<rtexprvalue>false</rtexprvalue>
	   		<type>java.lang.String</type>
	   	  </attribute>
		  		  <attribute>
	   <description>Attribute allows to ignore an Ajax Response produced by a request if the newest 'similar' request is
in a queue already. ignoreDupResponses="true" does not cancel the request while it is processed on the server,
but just allows to avoid unnecessary updates on the client side if the response isn't actual now. Default value is "true".</description>
	   <name>ignoreDupResponses</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A flag indicating that this component value must be converted and validated immediately (that is, during Apply Request Values phase), rather than waiting until a Process Validations phase</description>
	   <name>immediate</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Corresponds to the HTML style attribute for the inactive cell on scroller</description>
	   <name>inactiveStyle</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Corresponds to the HTML class attribute for the inactive cell on scroller</description>
	   <name>inactiveStyleClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>The attribute to control whether last page of datascroller  shows "rows" number of items or just the rest. Possible values are "full" and "short". Default value is "short".</description>
	   <name>lastPageMode</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "true", then of all AJAX-rendered on the page components only those will be updated, 
		which ID's are passed to the "reRender" attribute of the describable component. 
		"false"-the default value-means that all components with ajaxRendered="true" will be updated.</description>
	   <name>limitToList</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>Maximum quantity of pages. Default value is "10".</description>
	   <name>maxPages</name>
	   	   	   					   	<deferred-value>
					<type>int</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>The client side script method to be called before DOM is updated</description>
	   <name>onbeforedomupdate</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The clientside script method to be called when the element is clicked</description>
	   <name>onclick</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called after the request is completed</description>
	   <name>oncomplete</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when the element is double-clicked</description>
	   <name>ondblclick</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a key is pressed down over the element</description>
	   <name>onkeydown</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a key is pressed over the element and released</description>
	   <name>onkeypress</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a key is released</description>
	   <name>onkeyup</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a mouse button is pressed down over the element</description>
	   <name>onmousedown</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a pointer is moved within the element</description>
	   <name>onmousemove</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a pointer is moved away from the element</description>
	   <name>onmouseout</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a pointer is moved onto the element</description>
	   <name>onmouseover</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a mouse button is released</description>
	   <name>onmouseup</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: script expression; a page is changed</description>
	   <name>onpagechange</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If page &amp;gt;= 1 then it's a page number to show</description>
	   <name>page</name>
	   	   	   					   	<deferred-value>
					<type>int</type>
				</deferred-value>
				   	  </attribute>
		  	  	  		  <attribute>
	   <description>Name of variable in request scope containing index of active page</description>
	   <name>pageIndexVar</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Name of variable in request scope containing number of pages</description>
	   <name>pagesVar</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>Id['s] (in format of call  UIComponent.findComponent()) of components, processed at the phases 2-5 in case of AjaxRequest  caused by this component. Can be single id, comma-separated list of Id's, or EL Expression  with array or Collection</description>
	   <name>process</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Id['s] (in format of call  UIComponent.findComponent()) of components, rendered in case of AjaxRequest  caused by this component. Can be single id, comma-separated list of Id's, or EL Expression  with array or Collection</description>
	   <name>reRender</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If renderIfSinglePage is "true" then datascroller is displayed on condition that the data hold on one page. Default value is "true".</description>
	   <name>renderIfSinglePage</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "false", this component is not rendered</description>
	   <name>rendered</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Attribute defines the time (in ms.) that the request will be wait in the queue before it is ready to send.
When the delay time is over, the request will be sent to the server or removed if the newest 'similar' request is in a queue already</description>
	   <name>requestDelay</name>
	   	   	   					   	<deferred-value>
					<type>int</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>MethodBinding representing an action listener method that will be notified after scrolling</description>
	   <name>scrollerListener</name>
	   	   	   						<deferred-method>
					<method-signature>void scrollerListener(org.richfaces.event.DataScrollerEvent)</method-signature>
				</deferred-method>
				   	  </attribute>
		  	  		  <attribute>
	   <description>Corresponds to the HTML style attribute for the selected cell on scroller</description>
	   <name>selectedStyle</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Corresponds to the HTML class attribute for the selected cell on scroller</description>
	   <name>selectedStyleClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If there are any component requests with identical IDs then these requests will be grouped.</description>
	   <name>similarityGroupingId</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>ID (in format of call UIComponent.findComponent()) of Request status component</description>
	   <name>status</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The attribute specifies the visibility of stepControls.
				Possible values are: "show"  (controls are always visible ). "hide" (controls are hidden. 
				"auto" (unnecessary controls are hidden). Default value is "show".</description>
	   <name>stepControls</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style(s) is/are to be applied when this component is rendered</description>
	   <name>style</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Corresponds to the HTML class attribute</description>
	   <name>styleClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style(s) is/are to be applied to outside table when this component is rendered</description>
	   <name>tableStyle</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Space-separated list of CSS style class(es) that are be applied to outside table of this component</description>
	   <name>tableStyleClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Response waiting time on a particular request. If a response is not received during this time, the request is aborted</description>
	   <name>timeout</name>
	   	   	   					   	<deferred-value>
					<type>int</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The current value for this component</description>
	   <name>value</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  	  
	</tag>
<tag>
	  	  <description>A component is used for parameters transmission in Drag and Drop operations. It's also used for dragIndicator elements definition with transmitting some values for rendering in it.</description>
	  	  	  		  <name>dndParam</name>
	  	  <tag-class>org.richfaces.taglib.DndParamTag</tag-class>
	  <body-content>JSP</body-content>
	  
	    		  <attribute>
	   <description>The attribute takes a value-binding expression for a component property of
a backing bean</description>
	   <name>binding</name>
	   	   	   					   	<deferred-value>
					<type>javax.faces.component.UIComponent</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>Every component may have a unique id that is automatically created if omitted</description>
	   <name>id</name>
	   	   	   		<rtexprvalue>false</rtexprvalue>
	   		<type>java.lang.String</type>
	   	  </attribute>
		  		  <attribute>
	   <description>A name of this parameter</description>
	   <name>name</name>
	   			<required>true</required>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "false", this component is not rendered</description>
	   <name>rendered</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>This attribute defines parameter functionality. Possible values are "drag", "drop" and "default". Default value is "default".</description>
	   <name>type</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The current value for this component</description>
	   <name>value</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  	  
	</tag>
<tag>
	  	  <description>It's a component appearing under a mouse cursor during Drag'n'Drop operation and containing information on dragged element and elements.</description>
	  	  	  		  <name>dragIndicator</name>
	  	  <tag-class>org.richfaces.taglib.DragIndicatorTag</tag-class>
	  <body-content>JSP</body-content>
	  
	    		  <attribute>
	   <description>Corresponds to the HTML class attribute and added to an indicator when a drop is accepted</description>
	   <name>acceptClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The attribute takes a value-binding expression for a component property of
a backing bean</description>
	   <name>binding</name>
	   	   	   					   	<deferred-value>
					<type>javax.faces.component.UIComponent</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>Every component may have a unique id that is automatically created if omitted</description>
	   <name>id</name>
	   	   	   		<rtexprvalue>false</rtexprvalue>
	   		<type>java.lang.String</type>
	   	  </attribute>
		  		  <attribute>
	   <description>Corresponds to the HTML class attribute and added to an indicator when a drop is rejected</description>
	   <name>rejectClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "false", this component is not rendered</description>
	   <name>rendered</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style(s) is/are to be applied when this component is rendered</description>
	   <name>style</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Corresponds to the HTML class attribute</description>
	   <name>styleClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  
	</tag>
<tag>
	  	  	  		  <name>dragListener</name>
	  	  <tag-class>org.richfaces.taglib.DragListenerTag</tag-class>
	  <body-content>JSP</body-content>
	  
	    		  <attribute>
	   <description>The attribute takes a value-binding expression for a component property of
 				a backing bean</description>
	   <name>binding</name>
	   	   	   					   	<deferred-value>
					<type>javax.faces.component.UIComponent</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The fully qualified Java class name for the listener</description>
	   <name>type</name>
	   	   	   		<rtexprvalue>false</rtexprvalue>
	   		<type>java.lang.String</type>
	   	  </attribute>
		  	  
	</tag>
<tag>
	  	  <description>The  &amp;lt;rich:dragSupport&amp;gt; component defines a subtree of the component tree as draggable for drag-and-drop operations. Within such a "drag zone", you can click the mouse button on an item and drag it to any component that supports drop operations (a "drop zone"). It encodes all the necessary JavaScript for supporting drag-and-drop operations.</description>
	  	  	  		  <name>dragSupport</name>
	  	  <tag-class>org.richfaces.taglib.DragSupportTag</tag-class>
	  <body-content>JSP</body-content>
	  
	    		  <attribute>
	   <description>MethodBinding pointing at the application action to be invoked,
            if this UIComponent is activated by you, during the Apply
            Request Values or Invoke Application phase of the request
            processing lifecycle, depending on the value of the immediate
            property</description>
	   <name>action</name>
	   	   	   						<deferred-method>
					<method-signature>java.lang.Object action()</method-signature>
				</deferred-method>
				   	  </attribute>
		  	  		  <attribute>
	   <description>MethodBinding pointing at method accepting  an ActionEvent with return type void</description>
	   <name>actionListener</name>
	   	   	   						<deferred-method>
					<method-signature>void actionListener(javax.faces.event.ActionEvent)</method-signature>
				</deferred-method>
				   	  </attribute>
		  	  	  	  		  <attribute>
	   <description>The attribute takes a value-binding expression for a component property of
a backing bean</description>
	   <name>binding</name>
	   	   	   					   	<deferred-value>
					<type>javax.faces.component.UIComponent</type>
				</deferred-value>
				   	  </attribute>
		  	  	  		  <attribute>
	   <description>Disable default action for target event (append "return false;" to JavaScript)</description>
	   <name>disableDefault</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Id of a component that is used as drag pointer during the drag operation</description>
	   <name>dragIndicator</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>MethodBinding representing an action listener method that will be notified after drag operation</description>
	   <name>dragListener</name>
	   	   	   						<deferred-method>
					<method-signature>void dragListener(org.richfaces.event.DragEvent)</method-signature>
				</deferred-method>
				   	  </attribute>
		  	  		  <attribute>
	   <description>A drag zone type that is used for zone definition, which elements can be accepted by a drop zone</description>
	   <name>dragType</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Data to be sent to a drop zone after a drop event</description>
	   <name>dragValue</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Name of requests queue to avoid send next request before complete other from same event. Can be used to reduce number of requests of frequently events (key press, mouse move etc.)</description>
	   <name>eventsQueue</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>id of element to set focus after request completed on client side</description>
	   <name>focus</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>List of comma separated cursors that indicates then you can grab and drag an object</description>
	   <name>grabCursors</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>list of comma separated cursors that indicates then the you has grabbed something</description>
	   <name>grabbingCursors</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Every component may have a unique id that is automatically created if omitted</description>
	   <name>id</name>
	   	   	   		<rtexprvalue>false</rtexprvalue>
	   		<type>java.lang.String</type>
	   	  </attribute>
		  		  <attribute>
	   <description>Attribute allows to ignore an Ajax Response produced by a request if the newest 'similar' request is
in a queue already. ignoreDupResponses="true" does not cancel the request while it is processed on the server,
but just allows to avoid unnecessary updates on the client side if the response isn't actual now</description>
	   <name>ignoreDupResponses</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>True means, that the default ActionListener should be executed
            immediately (i.e. during Apply Request Values phase of the
            request processing lifecycle), rather than waiting until the
            Invoke Application phase</description>
	   <name>immediate</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "true", then of all AJAX-rendered on the page components only those will be updated, 
		which ID's are passed to the "reRender" attribute of the describable component. 
		"false"-the default value-means that all components with ajaxRendered="true" will be updated.</description>
	   <name>limitToList</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called before DOM is updated</description>
	   <name>onbeforedomupdate</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called after the request is completed</description>
	   <name>oncomplete</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A JavaScript event handler called after a drag operation</description>
	   <name>ondragend</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A JavaScript event handler called before drag operation</description>
	   <name>ondragstart</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A JavaScript event handler called after a out operation</description>
	   <name>ondropout</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A JavaScript event handler called after a drop operation</description>
	   <name>ondropover</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>Id['s] (in format of call  UIComponent.findComponent()) of components, rendered in case of AjaxRequest  caused by this component. Can be single id, comma-separated list of Id's, or EL Expression  with array or Collection</description>
	   <name>reRender</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "false", this component is not rendered</description>
	   <name>rendered</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Attribute defines the time (in ms.) that the request will be wait in the queue before it is ready to send.
When the delay time is over, the request will be sent to the server or removed if the newest 'similar' request is in a queue already</description>
	   <name>requestDelay</name>
	   	   	   					   	<deferred-value>
					<type>int</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If there are any component requests with identical IDs then these requests will be grouped.</description>
	   <name>similarityGroupingId</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>ID (in format of call UIComponent.findComponent()) of Request status component</description>
	   <name>status</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Response waiting time on a particular request. If a response is not received during this time, the request is aborted</description>
	   <name>timeout</name>
	   	   	   					   	<deferred-value>
					<type>int</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The current value for this component</description>
	   <name>value</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  	  
	</tag>
<tag>
	  	  <description>The &amp;lt;rich:dropDownMenu&amp;gt; component is used for creating multilevel drop-down menus.</description>
	  	  	  		  <name>dropDownMenu</name>
	  	  <tag-class>org.richfaces.taglib.DropDownMenuTag</tag-class>
	  <body-content>JSP</body-content>
	  
	    		  <attribute>
	   <description>The attribute takes a value-binding expression for a component property of
a backing bean</description>
	   <name>binding</name>
	   	   	   					   	<deferred-value>
					<type>javax.faces.component.UIComponent</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Defines direction of the popup list to appear. 
                Possible values are "top-right", "top-right", "top-left", "bottom-right", "bottom-left", "auto".
                Default value is "auto".</description>
	   <name>direction</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Attribute 'disabled' provides possibility to make the whole menu disabled if its value equals to "true". Default value is "false"</description>
	   <name>disabled</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Space-separated list of CSS style class(es) that are be applied to disabled item of this component</description>
	   <name>disabledItemClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style(s) is/are to be applied to disabled item when this component is rendered.</description>
	   <name>disabledItemStyle</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Space-separated list of CSS style class(es) applied to dropdown menu label when it is disabled.</description>
	   <name>disabledLabelClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Defines the event on the representation element that triggers
                the menu's appearance.</description>
	   <name>event</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>Delay between losing focus and menu closing. Default value is "800".</description>
	   <name>hideDelay</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Integer</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Sets the horizontal offset between popup list and label element. Default value is "0".
                conjunction point</description>
	   <name>horizontalOffset</name>
	   	   	   					   	<deferred-value>
					<type>int</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Every component may have a unique id that is automatically created if omitted</description>
	   <name>id</name>
	   	   	   		<rtexprvalue>false</rtexprvalue>
	   		<type>java.lang.String</type>
	   	  </attribute>
		  		  <attribute>
	   <description>Space-separated list of CSS style class(es) that are be applied to item of this component</description>
	   <name>itemClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style(s) is/are to be applied to item when this component is rendered.</description>
	   <name>itemStyle</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Sets the corner of the label for the pop-up to be connected with.
                Possible values are "tr", "tl", "bl", "br", "bottom-left", "auto".
                Default value is "auto".
                "tr" stands for top-right.</description>
	   <name>jointPoint</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Space-separated list of CSS style class(es) applied to dropdown menu label in it normal (neither selected nor disabled) sate.</description>
	   <name>labelClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: script expression; a menu is collapsed.</description>
	   <name>oncollapse</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: script expression; a menu is expanded.</description>
	   <name>onexpand</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: script expression; some group was activated.</description>
	   <name>ongroupactivate</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: script expression; some item was selected.</description>
	   <name>onitemselect</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: script expression; a pointer was moved within.</description>
	   <name>onmousemove</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: script expression; a pointer was moved away.</description>
	   <name>onmouseout</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: script expression; a pointer was moved onto.</description>
	   <name>onmouseover</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Sets minimal width for  all  lists that will appear.</description>
	   <name>popupWidth</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "false", this component is not rendered</description>
	   <name>rendered</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Space-separated list of CSS style class(es) that are be applied to selected item of this component.</description>
	   <name>selectItemClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style(s) is/are to be applied to selected item when this component is rendered.</description>
	   <name>selectItemStyle</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Space-separated list of CSS style class(es) applied to dropdown menu label when it is selected.</description>
	   <name>selectedLabelClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Delay between event and menu showing. Default value is "50".</description>
	   <name>showDelay</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Integer</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style(s) is/are to be applied when this component is rendered</description>
	   <name>style</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Corresponds to the HTML class attribute</description>
	   <name>styleClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Sets the submission mode for all menu items of the menu except
                ones where this attribute redefined.
                Possible values are "ajax","server","none". Default value is "sever".</description>
	   <name>submitMode</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Defines representation text for Label used for menu calls.</description>
	   <name>value</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Sets the vertical offset between popup list and label element. Default value is "0".
                conjunction point</description>
	   <name>verticalOffset</name>
	   	   	   					   	<deferred-value>
					<type>int</type>
				</deferred-value>
				   	  </attribute>
		  	  
	</tag>
<tag>
	  	  	  		  <name>dropListener</name>
	  	  <tag-class>org.richfaces.taglib.DropListenerTag</tag-class>
	  <body-content>JSP</body-content>
	  
	    		  <attribute>
	   <description>The attribute takes a value-binding expression for a component property of
        			a backing bean</description>
	   <name>binding</name>
	   	   	   					   	<deferred-value>
					<type>javax.faces.component.UIComponent</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The fully qualified Java class name for the listener</description>
	   <name>type</name>
	   	   	   		<rtexprvalue>false</rtexprvalue>
	   		<type>java.lang.String</type>
	   	  </attribute>
		  	  
	</tag>
<tag>
	  	  <description>The &amp;lt;rich:dropSupport&amp;gt;  component transforms a parent component into a target zone for drag-and-drop operations. When a draggable element is moved and dropped onto the area of the parent component, Ajax request processing for this event is started.</description>
	  	  	  		  <name>dropSupport</name>
	  	  <tag-class>org.richfaces.taglib.DropSupportTag</tag-class>
	  <body-content>JSP</body-content>
	  
	    		  <attribute>
	   <description>List of comma separated cursors that indicates when acceptable draggable over dropzone</description>
	   <name>acceptCursors</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A list of drag zones types, which elements are accepted by a drop zone</description>
	   <name>acceptedTypes</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>MethodBinding pointing at the application action to be invoked,
            if this UIComponent is activated by you, during the Apply
            Request Values or Invoke Application phase of the request
            processing lifecycle, depending on the value of the immediate
            property</description>
	   <name>action</name>
	   	   	   						<deferred-method>
					<method-signature>java.lang.Object action()</method-signature>
				</deferred-method>
				   	  </attribute>
		  	  		  <attribute>
	   <description>MethodBinding pointing at method accepting  an ActionEvent with return type void</description>
	   <name>actionListener</name>
	   	   	   						<deferred-method>
					<method-signature>void actionListener(javax.faces.event.ActionEvent)</method-signature>
				</deferred-method>
				   	  </attribute>
		  	  	  		  <attribute>
	   <description>boolean attribute which provides possibility to limit JSF tree processing(decoding, conversion/validation, value applying) 
to the component which send the request only</description>
	   <name>ajaxSingle</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The attribute takes a value-binding expression for a component property of
a backing bean</description>
	   <name>binding</name>
	   	   	   					   	<deferred-value>
					<type>javax.faces.component.UIComponent</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "true", after process validations phase it skips updates of model beans on a force render response. It can be used for validating components input</description>
	   <name>bypassUpdates</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Mapping between drop types and acceptable cursors</description>
	   <name>cursorTypeMapping</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Serialized (on default with JSON) data passed on the client by a developer on AJAX request. It's accessible via "data.foo" syntax</description>
	   <name>data</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Disable default action for target event (append "return false;" to JavaScript)</description>
	   <name>disableDefault</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>MethodBinding representing an action listener method that will be notified after drop operation.</description>
	   <name>dropListener</name>
	   	   	   						<deferred-method>
					<method-signature>void dropListener(org.richfaces.event.DropEvent)</method-signature>
				</deferred-method>
				   	  </attribute>
		  	  		  <attribute>
	   <description>Data to be processed after a drop event</description>
	   <name>dropValue</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Name of requests queue to avoid send next request before complete other from same event. Can be used to reduce number of requests of frequently events (key press, mouse move etc.)</description>
	   <name>eventsQueue</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>id of element to set focus after request completed on client side</description>
	   <name>focus</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Every component may have a unique id that is automatically created if omitted</description>
	   <name>id</name>
	   	   	   		<rtexprvalue>false</rtexprvalue>
	   		<type>java.lang.String</type>
	   	  </attribute>
		  		  <attribute>
	   <description>Attribute allows to ignore an Ajax Response produced by a request if the newest 'similar' request is
in a queue already. ignoreDupResponses="true" does not cancel the request while it is processed on the server,
but just allows to avoid unnecessary updates on the client side if the response isn't actual now</description>
	   <name>ignoreDupResponses</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>True means, that the default ActionListener should be executed
            immediately (i.e. during Apply Request Values phase of the
            request processing lifecycle), rather than waiting until the
            Invoke Application phase</description>
	   <name>immediate</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "true", then of all AJAX-rendered on the page components only those will be updated, 
		which ID's are passed to the "reRender" attribute of the describable component. 
		"false"-the default value-means that all components with ajaxRendered="true" will be updated.</description>
	   <name>limitToList</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called before DOM is updated</description>
	   <name>onbeforedomupdate</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called after the request is completed</description>
	   <name>oncomplete</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A JavaScript event handler called on enter draggable object to zone</description>
	   <name>ondragenter</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A JavaScript event handler called after a drag object leaves zone</description>
	   <name>ondragexit</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A JavaScript event handler called after a drag object is dropped to zone</description>
	   <name>ondrop</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A JavaScript handler for event fired on a drop even the drop for a given type is not available</description>
	   <name>ondropend</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Id['s] (in format of call  UIComponent.findComponent()) of components, processed at the phases 2-5 in case of AjaxRequest  caused by this component. Can be single id, comma-separated list of Id's, or EL Expression  with array or Collection</description>
	   <name>process</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Id['s] (in format of call  UIComponent.findComponent()) of components, rendered in case of AjaxRequest  caused by this component. Can be single id, comma-separated list of Id's, or EL Expression  with array or Collection</description>
	   <name>reRender</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>List of comma separated cursors that indicates when rejectable draggable over dropzone</description>
	   <name>rejectCursors</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "false", this component is not rendered</description>
	   <name>rendered</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Attribute defines the time (in ms.) that the request will be wait in the queue before it is ready to send.
When the delay time is over, the request will be sent to the server or removed if the newest 'similar' request is in a queue already</description>
	   <name>requestDelay</name>
	   	   	   					   	<deferred-value>
					<type>int</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If there are any component requests with identical IDs then these requests will be grouped.</description>
	   <name>similarityGroupingId</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>ID (in format of call UIComponent.findComponent()) of Request status component</description>
	   <name>status</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Response waiting time on a particular request. If a response is not received during this time, the request is aborted</description>
	   <name>timeout</name>
	   	   	   					   	<deferred-value>
					<type>int</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The attribute associates a type of dragable zone (dragType) with &amp;lt;rich:dndParam&amp;gt; defined for &amp;lt;rich:dropSupport&amp;gt; for passing parameter value to &amp;lt;rich:dragIndicator&amp;gt;. It uses JSON format: (drag_type: parameter_name).</description>
	   <name>typeMapping</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The current value for this component</description>
	   <name>value</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  	  
	</tag>
<tag>
	  	  <description/>
	  	  	  		  <name>editor</name>
	  	  <tag-class>org.richfaces.taglib.EditorTag</tag-class>
	  <body-content>JSP</body-content>
	  
	    		  <attribute>
	   <description>Attribute enables to get the Editor area to resize to the boundaries of the contents.</description>
	   <name>autoResize</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The attribute takes a value-binding expression for a component property of
a backing bean</description>
	   <name>binding</name>
	   	   	   					   	<deferred-value>
					<type>javax.faces.component.UIComponent</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Attribute defines configuration properties file name</description>
	   <name>configuration</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Id of Converter to be used or reference to a Converter</description>
	   <name>converter</name>
	   	   	   					   	<deferred-value>
					<type>javax.faces.convert.Converter</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A ValueExpression enabled attribute that, if present,
			will be used as the text of the converter message,
			replacing any message that comes from the converter</description>
	   <name>converterMessage</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Attribute defines property file name witch contains descriptors of custom plugins</description>
	   <name>customPlugins</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Attribute defines how dialogs/popups should be opened. Default value is "modal"</description>
	   <name>dialogType</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>Attribute defines height of component.</description>
	   <name>height</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Integer</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Every component may have a unique id that is automatically created if omitted</description>
	   <name>id</name>
	   	   	   		<rtexprvalue>false</rtexprvalue>
	   		<type>java.lang.String</type>
	   	  </attribute>
		  		  <attribute>
	   <description>A flag indicating that this component value must be converted
            and validated immediately (that is, during Apply Request Values
            phase), rather than waiting until a Process Validations phase</description>
	   <name>immediate</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A localized user presentable name for this component.</description>
	   <name>label</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Attribute defines Editor language</description>
	   <name>language</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  	  		  <attribute>
	   <description>HTML: script expression; content is modified by TinyMCE.</description>
	   <name>onchange</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: script expression; initialization of the editor's instances are finished</description>
	   <name>oninit</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: script expression; the contents is extracted/saved.</description>
	   <name>onsave</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: script expression; to add events to editor instances before they get rendered.</description>
	   <name>onsetup</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Attribute defines Editor plugins</description>
	   <name>plugins</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Attribute defines Editor is readonly</description>
	   <name>readonly</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "false", this component is not rendered</description>
	   <name>rendered</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "true", this component is checked for non-empty input</description>
	   <name>required</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A ValueExpression enabled attribute that, if present,
			will be used as the text of the validation message for
			the "required" facility, if the "required" facility is
			used</description>
	   <name>requiredMessage</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Attribute defines Editor skin</description>
	   <name>skin</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style(s) is/are to be applied when this component is rendered</description>
	   <name>style</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Corresponds to the HTML class attribute</description>
	   <name>styleClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>In visual mode the attribute works the same way as "tab_focus" TinyMCE's property the attribute enables 
				you to specify an element ID to focus, when the TAB  key  is pressed .
				You can also use the special ":prev" and ":next"  values that will then place the focus on 
				an input element placed before/after the TinyMCE instance in the DOM. 
				While in "source" mode the attribute works like standard HTML tabindex attribute.</description>
	   <name>tabindex</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Attribute defines Editor theme</description>
	   <name>theme</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>Attribute defines if model value should be converted to Seam Text. Default value is "false"</description>
	   <name>useSeamText</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>MethodBinding pointing at a method that is called during
            Process Validations phase of the request processing lifecycle,
            to validate the current value of this component</description>
	   <name>validator</name>
	   	   	   						<deferred-method>
					<method-signature>void validator(javax.faces.context.FacesContext, javax.faces.component.UIComponent, java.lang.Object)</method-signature>
				</deferred-method>
				   	  </attribute>
		  		  <attribute>
	   <description>A ValueExpression enabled attribute that, if present,
			will be used as the text of the validator message,
			replacing any message that comes from the validator</description>
	   <name>validatorMessage</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>The current value of this component</description>
	   <name>value</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Listener for value changes</description>
	   <name>valueChangeListener</name>
	   	   	   						<deferred-method>
					<method-signature>void valueChangeListener(javax.faces.event.ValueChangeEvent)</method-signature>
				</deferred-method>
				   	  </attribute>
		  	  		  <attribute>
	   <description>Attribute defines if tinyMCE WYSIWYG should be disabled. Default value is "visual"</description>
	   <name>viewMode</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Attribute defines width of component.</description>
	   <name>width</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Integer</type>
				</deferred-value>
				   	  </attribute>
		  	  
	</tag>
<tag>
	  	  <description>The &amp;lt;rich:effect&amp;gt; utilizes a set of effects provided by the scriptaculous JavaScript library. It allows to attach effects to JSF components and html tags.</description>
	  	  	  		  <name>effect</name>
	  	  <tag-class>org.richfaces.taglib.EffectTag</tag-class>
	  <body-content>JSP</body-content>
	  
	    		  <attribute>
	   <description>The attribute takes a value-binding expression for a component property of
a backing bean</description>
	   <name>binding</name>
	   	   	   					   	<deferred-value>
					<type>javax.faces.component.UIComponent</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Disable default action for target event ( append "return false;" to JavaScript ). Default value is "false".</description>
	   <name>disableDefault</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Event on the component or html tag the effect is attached to</description>
	   <name>event</name>
	   	   	   		<rtexprvalue>false</rtexprvalue>
	   		<type>java.lang.String</type>
	   	  </attribute>
		  	  	  		  <attribute>
	   <description>Id of the target component.</description>
	   <name>for</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Every component may have a unique id that is automatically created if omitted</description>
	   <name>id</name>
	   	   	   		<rtexprvalue>false</rtexprvalue>
	   		<type>java.lang.String</type>
	   	  </attribute>
		  		  <attribute>
	   <description>Generated JavaScript name.</description>
	   <name>name</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>Parameters passed to the effect function.
			  Example params="{duration:0.2,from:1.0,to:0.1}"</description>
	   <name>params</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>If "false", this component is not rendered</description>
	   <name>rendered</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The id of the element the effect apply to. Might be component id
			  or client id of jsf component or html tag. If targetId is not defined
			  the value of the attribute 'for' or the 'targetId' option effect
			  play its role</description>
	   <name>targetId</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Defines the type of effect. Possible values: "Fade", "Blind", "Opacity".</description>
	   <name>type</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  
	</tag>
<tag>
	  	  <description>The &amp;lt;rich:extendedDataTable&amp;gt; component is used for
                              tables extending standard component &amp;lt;rich:dataTable&amp;gt; .</description>
	  	  	  		  <name>extendedDataTable</name>
	  	  <tag-class>org.richfaces.taglib.ExtendedDataTableTag</tag-class>
	  <body-content>JSP</body-content>
	  
	    		  <attribute>
	   <description>CSS class for active row</description>
	   <name>activeClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Request scope attribute under which the activeRowKey will
                                        be accessible</description>
	   <name>activeRowKey</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>This attribute defines row keys that are updated after an
                                        AJAX request</description>
	   <name>ajaxKeys</name>
	   	   	   					   	<deferred-value>
					<type>java.util.Set</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Deprecated. This attribute specifies the position of the table with respect to the document. 
            The possible values are "left", "center" and "right". The default value is "left".</description>
	   <name>align</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>Deprecated. This attribute sets the background color for the document body or table cells.
            
            This attribute sets the background color of the canvas for the document body (the BODY element) or for tables (the TABLE, TR, TH, and TD elements). Additional attributes for specifying text color can be used with the BODY element.
            
            This attribute has been deprecated in favor of style sheets for specifying background color information</description>
	   <name>bgcolor</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The attribute takes a value-binding expression for a component property of
a backing bean</description>
	   <name>binding</name>
	   	   	   					   	<deferred-value>
					<type>javax.faces.component.UIComponent</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>This attributes specifies the width of the frame around a
                                        component. Default value is "0"</description>
	   <name>border</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Space-separated list of CSS style class(es) that are be
                                        applied to caption for this component</description>
	   <name>captionClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style(s) is/are to be applied to caption when this
                                        component is rendered</description>
	   <name>captionStyle</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>This attribute specifies the amount of space between the
                                        border of the cell and its contents. Default value is "0"</description>
	   <name>cellpadding</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>This attribute specifies the amount of space between the
                                        border of the cell and its contents. The attribute also
                                        specifies the amount of space to leave between cells. Default value is "0"</description>
	   <name>cellspacing</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>Comma-delimited list of CSS style classes that are be applied to the columns of this table. A space separated list of classes may also be specified for any individual column. If the number of elements in this list is less than the number of columns specified in the "columns" attribute, no "class" attribute is output for each column greater than the number of elements in the list. If the number of elements in the list is greater than the number of columns specified in the "columns" attribute, the elements at the position in the list after the value of the "columns" attribute are ignored</description>
	   <name>columnClasses</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>It defines EL-binding for a component state for saving or
                                        redefinition</description>
	   <name>componentState</name>
	   	   	   					   	<deferred-value>
					<type>org.ajax4jsf.model.DataComponentState</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Direction indication for text that does not inherit
			directionality. Valid values are "LTR" (left-to-right)
			and "RTL" (right-to-left)</description>
	   <name>dir</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If set to true, table header context menu will be enabled</description>
	   <name>enableContextMenu</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Boolean</type>
				</deferred-value>
				   	  </attribute>
		  	  	  		  <attribute>
	   <description>A zero-relative row number of the first row to display</description>
	   <name>first</name>
	   	   	   					   	<deferred-value>
					<type>int</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>Space-separated list of CSS style class(es) that are be
                                        applied to footer for this component</description>
	   <name>footerClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>This attribute specifies which sides of the frame surrounding a table will be visible. Possible values:  "void", "above", "below", "hsides", "lhs", "rhs", "vsides", "box" and "border".
        The default value is "void".</description>
	   <name>frame</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  	  		  <attribute>
	   <description>Defines an id of column which the data is grouped by.</description>
	   <name>groupingColumn</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  	  		  <attribute>
	   <description>Space-separated list of CSS style class(es) that are be
                                        applied to header for this component</description>
	   <name>headerClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Defines a height of the component. Default value is "500px"</description>
	   <name>height</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Every component may have a unique id that is automatically created if omitted</description>
	   <name>id</name>
	   	   	   		<rtexprvalue>false</rtexprvalue>
	   		<type>java.lang.String</type>
	   	  </attribute>
		  		  <attribute>
	   <description>Code describing the language used in the generated markup for this component</description>
	   <name>lang</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Defines label to be displayed in case there are no data rows.</description>
	   <name>noDataLabel</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: a script expression; a pointer button is clicked
                                        on row</description>
	   <name>onRowClick</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: a script expression; a pointer button is
                                        double-clicked on row</description>
	   <name>onRowDblClick</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: script expression; a pointer button is pressed down
                                        on row</description>
	   <name>onRowMouseDown</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: a script expression; a pointer is moved within of
                                        row</description>
	   <name>onRowMouseMove</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: a script expression; a pointer is moved away of row</description>
	   <name>onRowMouseOut</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: a script expression; a pointer is moved onto of row</description>
	   <name>onRowMouseOver</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: script expression; a pointer button is released on
                                        row</description>
	   <name>onRowMouseUp</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The clientside script method to be called when the element is clicked</description>
	   <name>onclick</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when the element is double-clicked</description>
	   <name>ondblclick</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a key is pressed down over the element</description>
	   <name>onkeydown</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a key is pressed over the element and released</description>
	   <name>onkeypress</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a key is released</description>
	   <name>onkeyup</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a mouse button is pressed down over the element</description>
	   <name>onmousedown</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a pointer is moved within the element</description>
	   <name>onmousemove</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a pointer is moved away from the element</description>
	   <name>onmouseout</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a pointer is moved onto the element</description>
	   <name>onmouseover</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a mouse button is released</description>
	   <name>onmouseup</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: script expression to invoke on changing of rows
                                        selection</description>
	   <name>onselectionchange</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Id['s] (in format of call  UIComponent.findComponent()) of components, rendered in case of AjaxRequest caused by this component. Can be single id, comma-separated list of Id's, or EL Expression  with array or Collection</description>
	   <name>reRender</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "false", this component is not rendered</description>
	   <name>rendered</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>A comma-delimited list of CSS style classes that is applied to popup table rows. A space separated list of classes may also be specified for any individual row. The styles are applied, in turn, to each row in the table. For example, if the list has two elements, the first style class in the list is applied to the first row, the second to the second row, the first to the third row, the second to the fourth row, etc. In other words, we keep iterating through the list until we reach the end, and then we start at the beginning again</description>
	   <name>rowClasses</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  	  	  	  		  <attribute>
	   <description>Converter for a row key object</description>
	   <name>rowKeyConverter</name>
	   	   	   					   	<deferred-value>
					<type>javax.faces.convert.Converter</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The attribute provides access to a row key in a Request
                                        scope</description>
	   <name>rowKeyVar</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A number of rows to display, or zero for all remaining
            rows in the table</description>
	   <name>rows</name>
	   	   	   					   	<deferred-value>
					<type>int</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>This attribute specifies which rules will appear between cells within a table. The rendering of rules is user agent dependent. Possible values:
            
            * none: No rules. This is the default value.
            * groups: Rules will appear between row groups (see THEAD, TFOOT, and TBODY) and column groups (see COLGROUP and COL) only.
            * rows: Rules will appear between rows only.
            * cols: Rules will appear between columns only.
            * all: Rules will appear between all rows and columns</description>
	   <name>rules</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS class for selected rows</description>
	   <name>selectedClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Value binding representing selected rows</description>
	   <name>selection</name>
	   	   	   					   	<deferred-value>
					<type>org.richfaces.model.selection.Selection</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Single row can be selected. multi:
                                        Multiple rows can be selected. none: no rows can be
                                        selected. Default value is "single"</description>
	   <name>selectionMode</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>Defines mode of sorting. Possible values are 'single'
                                        for sorting of one column and 'multi' for some.</description>
	   <name>sortMode</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Defines a set of column ids in the order the columns
                                        could be set</description>
	   <name>sortPriority</name>
	   	   	   					   	<deferred-value>
					<type>java.util.Collection</type>
				</deferred-value>
				   	  </attribute>
		  	  	  		  <attribute>
	   <description>The attribute provides access to a component state on
                                        the client side</description>
	   <name>stateVar</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style(s) is/are to be applied when this component is rendered</description>
	   <name>style</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Corresponds to the HTML class attribute</description>
	   <name>styleClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>ValueBinding pointing at a property of a String to hold
                                        table state</description>
	   <name>tableState</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Advisory title information about markup elements generated for this component</description>
	   <name>title</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The current value for this component</description>
	   <name>value</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A request-scope attribute via which the data object for the
            current row will be used when iterating</description>
	   <name>var</name>
	   	   	   		<rtexprvalue>false</rtexprvalue>
	   		<type>java.lang.String</type>
	   	  </attribute>
		  	  		  <attribute>
	   <description>This attribute specifies the desired width of the entire table and is intended for visual user agents. When the value is percentage value, the value is relative to the user agent's available horizontal space. In the absence of any width specification, table width is determined by the user agent</description>
	   <name>width</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  
	</tag>
<tag>
	  	  <description>Renders a file upload control. 
    
The following configuration options for ajax4jsf filter may be configured in web.xml:

* createTempFiles - if this option is set to true, uploaded files are streamed to a temporary file instead of in memory.
* maxRequestSize - the maximum size of a file upload request, in bytes. 

Here's an example:
          
&amp;lt;filter&amp;gt;
  &amp;lt;display-name&amp;gt;Ajax4jsf Filter&amp;lt;/display-name&amp;gt;
  &amp;lt;filter-name&amp;gt;ajax4jsf&amp;lt;/filter-name&amp;gt;
  &amp;lt;filter-class&amp;gt;org.ajax4jsf.Filter&amp;lt;/filter-class&amp;gt;
  &amp;lt;init-param&amp;gt;
  &amp;lt;param-name&amp;gt;createTempFiles&amp;lt;/param-name&amp;gt;
  &amp;lt;param-value&amp;gt;false&amp;lt;/param-value&amp;gt;
  &amp;lt;/init-param&amp;gt;
  &amp;lt;init-param&amp;gt;
  &amp;lt;param-name&amp;gt;maxRequestSize&amp;lt;/param-name&amp;gt;
  &amp;lt;param-value&amp;gt;20000000&amp;lt;/param-value&amp;gt;
  &amp;lt;/init-param&amp;gt;
   &amp;lt;/filter&amp;gt;</description>
	  	  	  		  <name>fileUpload</name>
	  	  <tag-class>org.richfaces.taglib.FileUploadTag</tag-class>
	  <body-content>JSP</body-content>
	  
	    		  <attribute>
	   <description>Files types allowed to upload</description>
	   <name>acceptedTypes</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>This attribute assigns an access key to an element. An access key is a single character from the document character set. Note: Authors should consider the input method of the expected reader when specifying an accesskey</description>
	   <name>accesskey</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style for add button</description>
	   <name>addButtonClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style for add button disabled</description>
	   <name>addButtonClassDisabled</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Defines a label for an add button</description>
	   <name>addControlLabel</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Boolean attribute which provides possibility to limit JSF tree processing(decoding, conversion/validation, value applying) to the component which send the request only.
				Default value is "false"</description>
	   <name>ajaxSingle</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>Attribute which allow the component to use the flash module that provides file upload functionality [false, true, auto]. Default value is "false"</description>
	   <name>allowFlash</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>For a user agents that cannot display images, forms, or applets, this attribute specifies alternate text. The language of the alternate text is specified by the lang attribute</description>
	   <name>alt</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If this attribute is "true" files will be immediately removed from list after upload completed.
				Default value is "false".</description>
	   <name>autoclear</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The attribute takes a value-binding expression for a component property of
a backing bean</description>
	   <name>binding</name>
	   	   	   					   	<deferred-value>
					<type>javax.faces.component.UIComponent</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Defines a label for a cancel control</description>
	   <name>cancelEntryControlLabel</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style for clean button</description>
	   <name>cleanButtonClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style for clean button disabled</description>
	   <name>cleanButtonClassDisabled</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Defines a label for a clearAll button</description>
	   <name>clearAllControlLabel</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Defines a label for a clear control</description>
	   <name>clearControlLabel</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  	  	  		  <attribute>
	   <description>Attribute 'disabled' provides a possibility to make the whole component disabled if its value equals to "true".
				Default value is "false".</description>
	   <name>disabled</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Defines a label for a done label</description>
	   <name>doneLabel</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>CSS style upload file entry</description>
	   <name>fileEntryClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style upload file entry disabled</description>
	   <name>fileEntryClassDisabled</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style for upload enrty control</description>
	   <name>fileEntryControlClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style for upload enrty control disabled</description>
	   <name>fileEntryControlClassDisabled</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  	  		  <attribute>
	   <description>MethodExpression representing an action listener method
				that will be notified after file uploaded.</description>
	   <name>fileUploadListener</name>
	   	   	   						<deferred-method>
					<method-signature>void fileUploadListener(org.richfaces.event.UploadEvent)</method-signature>
				</deferred-method>
				   	  </attribute>
		  	  		  <attribute>
	   <description>Every component may have a unique id that is automatically created if omitted</description>
	   <name>id</name>
	   	   	   		<rtexprvalue>false</rtexprvalue>
	   		<type>java.lang.String</type>
	   	  </attribute>
		  		  <attribute>
	   <description>A flag indicating that this component value must be converted
            and validated immediately (that is, during Apply Request Values
            phase), rather than waiting until a Process Validations phase</description>
	   <name>immediate</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If this attribute is true files will be immediately uploaded after they have been added in list.
				Default value is "false".</description>
	   <name>immediateUpload</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Defines height of file list. Default value is "210px".</description>
	   <name>listHeight</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Defines width of file list. Default value is "400px".</description>
	   <name>listWidth</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  	  	  	  	  	  		  <attribute>
	   <description>Used for locale definition</description>
	   <name>locale</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Defines max files count allowed for upload (optional). Default value is "1".</description>
	   <name>maxFilesQuantity</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Integer</type>
				</deferred-value>
				   	  </attribute>
		  	  	  		  <attribute>
	   <description>Defines if component should allow to add files that were already in list. Default value is "false".</description>
	   <name>noDuplicate</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: script expression; a file is added.</description>
	   <name>onadd</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when the element loses the focus</description>
	   <name>onblur</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when the element value is changed</description>
	   <name>onchange</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: script expression; the file entries are cleared</description>
	   <name>onclear</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The clientside script method to be called when the element is clicked</description>
	   <name>onclick</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when the element is double-clicked</description>
	   <name>ondblclick</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: script expression; the file uploading is interrupted according to any errors</description>
	   <name>onerror</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: script expression; a file is uploaded to the server</description>
	   <name>onfileuploadcomplete</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when the element gets the focus</description>
	   <name>onfocus</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a key is pressed down over the element</description>
	   <name>onkeydown</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a key is pressed over the element and released</description>
	   <name>onkeypress</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a key is released</description>
	   <name>onkeyup</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a mouse button is pressed down over the element</description>
	   <name>onmousedown</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a pointer is moved within the element</description>
	   <name>onmousemove</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a pointer is moved away from the element</description>
	   <name>onmouseout</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a pointer is moved onto the element</description>
	   <name>onmouseover</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a mouse button is released</description>
	   <name>onmouseup</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when some text is selected in the text field. This attribute can be used with the INPUT and TEXTAREA elements.</description>
	   <name>onselect</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: script expression; the file uploading is rejected by fiel size overflow</description>
	   <name>onsizerejected</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: script expression; the file type is rejected according to file types allowed</description>
	   <name>ontyperejected</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: script expression; the uploading is cancelled at client side</description>
	   <name>onupload</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: script expression; uploading is cancelled</description>
	   <name>onuploadcanceled</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: script expression; uploading all files from list is completed</description>
	   <name>onuploadcomplete</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>Defines a label for a progress label</description>
	   <name>progressLabel</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "false", this component is not rendered</description>
	   <name>rendered</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "true", this component is checked for non-empty input</description>
	   <name>required</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A ValueExpression enabled attribute that, if present,
			will be used as the text of the validation message for
			the "required" facility, if the "required" facility is
			used</description>
	   <name>requiredMessage</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>Defines a label for a size error label</description>
	   <name>sizeErrorLabel</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>ID (in format of call UIComponent.findComponent()) of Request status component</description>
	   <name>status</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style for cancel button</description>
	   <name>stopButtonClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style for cancel button disabled</description>
	   <name>stopButtonClassDisabled</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Defines a label for a stop button</description>
	   <name>stopControlLabel</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Defines a label for a stop control</description>
	   <name>stopEntryControlLabel</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style(s) is/are to be applied when this component is rendered</description>
	   <name>style</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Corresponds to the HTML class attribute</description>
	   <name>styleClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>This attribute specifies the position of the current element in the tabbing order for the current document. This value must be a number between 0 and 32767. User agents should ignore leading zeros</description>
	   <name>tabindex</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Defines a label for a transfer error label</description>
	   <name>transferErrorLabel</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style for upload button</description>
	   <name>uploadButtonClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style for upload button disabled</description>
	   <name>uploadButtonClassDisabled</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Defines a label for an upload button</description>
	   <name>uploadControlLabel</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Collection of files uploaded</description>
	   <name>uploadData</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style for upload list</description>
	   <name>uploadListClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style for upload list disabled</description>
	   <name>uploadListClassDisabled</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>MethodBinding pointing at a method that is called during
            Process Validations phase of the request processing lifecycle,
            to validate the current value of this component</description>
	   <name>validator</name>
	   	   	   						<deferred-method>
					<method-signature>void validator(javax.faces.context.FacesContext, javax.faces.component.UIComponent, java.lang.Object)</method-signature>
				</deferred-method>
				   	  </attribute>
		  		  <attribute>
	   <description>A ValueExpression enabled attribute that, if present,
			will be used as the text of the validator message,
			replacing any message that comes from the validator</description>
	   <name>validatorMessage</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  	  	  	  	  
	</tag>
<tag>
	  	  <description>It presents the google map in JSF applications</description>
	  	  	  		  <name>gmap</name>
	  	  <tag-class>org.richfaces.taglib.GmapTag</tag-class>
	  <body-content>JSP</body-content>
	  
	    		  <attribute>
	   <description>The attribute takes a value-binding expression for a component property of
a backing bean</description>
	   <name>binding</name>
	   	   	   					   	<deferred-value>
					<type>javax.faces.component.UIComponent</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Enables continuous smooth zooming for selected browsers. Default value is "false".</description>
	   <name>enableContinuousZoom</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Enables zooming in by a double click. Default value is "false".</description>
	   <name>enableDoubleClickZoom</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Enables a map dragging with the mouse. Default value is "true".</description>
	   <name>enableDragging</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Enables Info Window. Default value is "true".</description>
	   <name>enableInfoWindow</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>Google Map key. A single Map API key is valid for a single "directory" on your web server. Default value is "internal".</description>
	   <name>gmapKey</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The JavaScript variable that is used to access the Google Map API. If you have
			 more than one Google Map components on the same page, use individual
			 key for each of them. The default variable name is "map" (without quotes).</description>
	   <name>gmapVar</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Every component may have a unique id that is automatically created if omitted</description>
	   <name>id</name>
	   	   	   		<rtexprvalue>false</rtexprvalue>
	   		<type>java.lang.String</type>
	   	  </attribute>
		  		  <attribute>
	   <description>Initial latitude coordinate in degrees, as a number between -90 and +90. Default value is "37.9721046".</description>
	   <name>lat</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Initial longitude coordinate in degrees, as a number between -180 and +180. Default value is "-122.0424842834".</description>
	   <name>lng</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Used for locale definition.   Default value is "getDefaultLocale()".</description>
	   <name>locale</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Initial map type. The possible values are  "G_NORMAL_MAP", "G_SATELLITE_MAP",
                        "G_HYBRID_MAP". Default value is "G_SATELLITE_MAP".</description>
	   <name>mapType</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The clientside script method to be called when the element is clicked</description>
	   <name>onclick</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when the element is double-clicked</description>
	   <name>ondblclick</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: script expression; the Google Map object is initiated.</description>
	   <name>oninit</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a key is pressed down over the element</description>
	   <name>onkeydown</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a key is pressed over the element and released</description>
	   <name>onkeypress</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a key is released</description>
	   <name>onkeyup</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a mouse button is pressed down over the element</description>
	   <name>onmousedown</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a pointer is moved within the element</description>
	   <name>onmousemove</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a pointer is moved away from the element</description>
	   <name>onmouseout</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a pointer is moved onto the element</description>
	   <name>onmouseover</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a mouse button is released</description>
	   <name>onmouseup</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "false", this component is not rendered</description>
	   <name>rendered</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Shows the GLarge control. Default value is "true".</description>
	   <name>showGLargeMapControl</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Shows the Type switch control. Default value is "true".</description>
	   <name>showGMapTypeControl</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>It shows the scale control. Default value is "true".</description>
	   <name>showGScaleControl</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style(s) is/are to be applied when this component is rendered</description>
	   <name>style</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Corresponds to the HTML class attribute</description>
	   <name>styleClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The warning message that appears if a browser is not compatible with Google Map.
			Default value is "Your browser does not support Google Maps".</description>
	   <name>warningMessage</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Initial zoom level as a number between 1 and 18. Default value is "17".</description>
	   <name>zoom</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  
	</tag>
<tag>
	  	  <description>The &amp;lt;rich:graphValidator&amp;gt; component allows to register Hibernate Validators for multiple input components.</description>
	  	  		<display-name>Bean validation @ and @validation support</display-name>
	  	  		  <name>graphValidator</name>
	  	  <tag-class>org.richfaces.taglib.html.jsp.GraphValidator</tag-class>
	  <body-content>JSP</body-content>
	  
	    		  <attribute>
	   <description>The attribute takes a value-binding expression for a component property of
a backing bean</description>
	   <name>binding</name>
	   	   	   					   	<deferred-value>
					<type>javax.faces.component.UIComponent</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>Every component may have a unique id that is automatically created if omitted</description>
	   <name>id</name>
	   	   	   		<rtexprvalue>false</rtexprvalue>
	   		<type>java.lang.String</type>
	   	  </attribute>
		  		  <attribute>
	   <description>This attribute is reserved till the implementation of JavaBean Validation feature (JSR-303).</description>
	   <name>profile</name>
	   	   	   					   	<deferred-value>
					<type>java.util.Set</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>Summary message for a validation errors.</description>
	   <name>summary</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>JSF Validator type, that implements GraphValidator interface.This validator is used for the Graph and input fields validation.</description>
	   <name>type</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The current value for this component.</description>
	   <name>value</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  	  
	</tag>
<tag>
	  	  <description>The &amp;lt;rich:hotKey&amp;gt; component allows to register hot keys for the page or particular elements and to define client side processing functions for these keys.</description>
	  	  	  		  <name>hotKey</name>
	  	  <tag-class>org.richfaces.taglib.HotKeyTag</tag-class>
	  <body-content>JSP</body-content>
	  
	    		  <attribute>
	   <description>The attribute takes a value-binding expression for a component property of
a backing bean</description>
	   <name>binding</name>
	   	   	   					   	<deferred-value>
					<type>javax.faces.component.UIComponent</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Defines the hotkey handling of events generated by child components nested into the parent component to which the &amp;lt;rich:hotKey&amp;gt; is attached.</description>
	   <name>checkParent</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Disables the hotkeys activated on input elements when the value of this attribute is "true".</description>
	   <name>disableInInput</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Defines the types of the inputs not to be influenced with hotKey component. Possible values: buttons, texts and all (default). By default it is empty and this means ALL the types.</description>
	   <name>disableInInputTypes</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>Defines the JavaScript function name which is called on hotkey activation</description>
	   <name>handler</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Every component may have a unique id that is automatically created if omitted</description>
	   <name>id</name>
	   	   	   		<rtexprvalue>false</rtexprvalue>
	   		<type>java.lang.String</type>
	   	  </attribute>
		  		  <attribute>
	   <description>Defines the hotkey itself</description>
	   <name>key</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "false", this component is not rendered</description>
	   <name>rendered</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Defines a selector for query</description>
	   <name>selector</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Defines the time when the hotkey is registered. Possible values are "immediate" (by default), "onload", and "onregistercall".
				Default value is "immediate"</description>
	   <name>timing</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Defines the type of a keyboard event (onkeyup, onkeypress, etc.)</description>
	   <name>type</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  
	</tag>
<tag>
	  	  <description>The &amp;lt;rich:inplaceInput&amp;gt; is an input component used for displaying and editing data inputted.</description>
	  	  	  		  <name>inplaceInput</name>
	  	  <tag-class>org.richfaces.taglib.InplaceInputTag</tag-class>
	  <body-content>JSP</body-content>
	  
	    		  <attribute>
	   <description>The attribute takes a value-binding expression for a component property of
a backing bean</description>
	   <name>binding</name>
	   	   	   					   	<deferred-value>
					<type>javax.faces.component.UIComponent</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Defines custom cancel icon</description>
	   <name>cancelControlIcon</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style class for changed state</description>
	   <name>changedClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style class for hovered text in changed state</description>
	   <name>changedHoverClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style class for controls</description>
	   <name>controlClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style class for hovered control</description>
	   <name>controlHoverClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style class for pressed press controls</description>
	   <name>controlPressedClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Positions the controls horizontally. Possible values are "left", "center", "right". Default value is "right".</description>
	   <name>controlsHorizontalPosition</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Positions the controls vertically. Possible values are "bottom","center" and "top". Default value is "center"</description>
	   <name>controlsVerticalPosition</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Id of Converter to be used or reference to a Converter</description>
	   <name>converter</name>
	   	   	   					   	<deferred-value>
					<type>javax.faces.convert.Converter</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A ValueExpression enabled attribute that, if present,
			will be used as the text of the converter message,
			replacing any message that comes from the converter</description>
	   <name>converterMessage</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The attribute is used to display text while value is undefined</description>
	   <name>defaultLabel</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style class for edit state</description>
	   <name>editClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Provides an option to assign an JavaScript action that initiates the change of the state. Default value is "onclick".</description>
	   <name>editEvent</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>Every component may have a unique id that is automatically created if omitted</description>
	   <name>id</name>
	   	   	   		<rtexprvalue>false</rtexprvalue>
	   		<type>java.lang.String</type>
	   	  </attribute>
		  		  <attribute>
	   <description>A flag indicating that this component value must be converted
            and validated immediately (that is, during Apply Request Values
            phase), rather than waiting until a Process Validations phase</description>
	   <name>immediate</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Sets width of the input field</description>
	   <name>inputWidth</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A localized user presentable name for this component.</description>
	   <name>label</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Defines how the component is displayed in the layout. Possible values are "block", "inline". Default value is "inline".</description>
	   <name>layout</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  	  		  <attribute>
	   <description>Sets the maximum width of the input field. Default value is "500px".</description>
	   <name>maxInputWidth</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Specifies the maximum number of digits that could be entered into the input field. 
				The maximum number is unlimited by default.</description>
	   <name>maxlength</name>
	   	   	   					   	<deferred-value>
					<type>int</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Sets the minimum width of the input field. Default value is "40px".</description>
	   <name>minInputWidth</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: script expression; the element lost the focus</description>
	   <name>onblur</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: script expression; the element value was changed</description>
	   <name>onchange</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The clientside script method to be called when the element is clicked</description>
	   <name>onclick</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when the element is double-clicked</description>
	   <name>ondblclick</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: script expression; edit state is activated</description>
	   <name>oneditactivated</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Provides a possibility to assign JavaScript on edit state activation</description>
	   <name>oneditactivation</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: script expression; the element got the focus</description>
	   <name>onfocus</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: a script expression; a pointer button is clicked</description>
	   <name>oninputclick</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: a script expression; a pointer button is double-clicked</description>
	   <name>oninputdblclick</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: a script expression; a key is pressed down</description>
	   <name>oninputkeydown</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: a script expression; a key is pressed and released</description>
	   <name>oninputkeypress</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: a script expression; a key is released</description>
	   <name>oninputkeyup</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: script expression; a pointer button is pressed down</description>
	   <name>oninputmousedown</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: a script expression; a pointer is moved within</description>
	   <name>oninputmousemove</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: a script expression; a pointer is moved away</description>
	   <name>oninputmouseout</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: a script expression; a pointer is moved onto</description>
	   <name>oninputmouseover</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: script expression; a pointer button is released</description>
	   <name>oninputmouseup</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a key is pressed down over the element</description>
	   <name>onkeydown</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a key is pressed over the element and released</description>
	   <name>onkeypress</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a key is released</description>
	   <name>onkeyup</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a mouse button is pressed down over the element</description>
	   <name>onmousedown</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a pointer is moved within the element</description>
	   <name>onmousemove</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a pointer is moved away from the element</description>
	   <name>onmouseout</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a pointer is moved onto the element</description>
	   <name>onmouseover</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a mouse button is released</description>
	   <name>onmouseup</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: script expression; the onselect event occurs when you select some menu item</description>
	   <name>onselect</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: script expression; view state is activated</description>
	   <name>onviewactivated</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Provides a possibility  to assign JavaScript  on view state activation</description>
	   <name>onviewactivation</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "false", this component is not rendered</description>
	   <name>rendered</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "true", this component is checked for non-empty input</description>
	   <name>required</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A ValueExpression enabled attribute that, if present,
			will be used as the text of the validation message for
			the "required" facility, if the "required" facility is
			used</description>
	   <name>requiredMessage</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Defines custom save icon</description>
	   <name>saveControlIcon</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Makes the input field select when switched to edit state. Default value is "false"</description>
	   <name>selectOnEdit</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Serves to display "save" and "cancel" controls. Default value is "false".</description>
	   <name>showControls</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Corresponds to the HTML class attribute</description>
	   <name>styleClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Serves to define the tabbing order</description>
	   <name>tabindex</name>
	   	   	   					   	<deferred-value>
					<type>int</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>MethodBinding pointing at a method that is called during
            Process Validations phase of the request processing lifecycle,
            to validate the current value of this component</description>
	   <name>validator</name>
	   	   	   						<deferred-method>
					<method-signature>void validator(javax.faces.context.FacesContext, javax.faces.component.UIComponent, java.lang.Object)</method-signature>
				</deferred-method>
				   	  </attribute>
		  		  <attribute>
	   <description>A ValueExpression enabled attribute that, if present,
			will be used as the text of the validator message,
			replacing any message that comes from the validator</description>
	   <name>validatorMessage</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>The current value of this component</description>
	   <name>value</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Listener for value changes</description>
	   <name>valueChangeListener</name>
	   	   	   						<deferred-method>
					<method-signature>void valueChangeListener(javax.faces.event.ValueChangeEvent)</method-signature>
				</deferred-method>
				   	  </attribute>
		  	  		  <attribute>
	   <description>CSS style class for view state</description>
	   <name>viewClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style class for hovered text in view state</description>
	   <name>viewHoverClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  
	</tag>
<tag>
	  	  <description>The &amp;lt;rich:inplaceSelect&amp;gt; is used for creation select
                              based inputs: it shows the value as text in one state and enables
                              editing the value, providing a list of options in another state.</description>
	  	  	  		  <name>inplaceSelect</name>
	  	  <tag-class>org.richfaces.taglib.InplaceSelectTag</tag-class>
	  <body-content>JSP</body-content>
	  
	    		  <attribute>
	   <description>The attribute takes a value-binding expression for a component property of
a backing bean</description>
	   <name>binding</name>
	   	   	   					   	<deferred-value>
					<type>javax.faces.component.UIComponent</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Defines custom cancel icon</description>
	   <name>cancelControlIcon</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style class for changed state</description>
	   <name>changedClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style class for controls</description>
	   <name>controlClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style class for hovered
                                        control</description>
	   <name>controlHoverClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style class for controls
                                        pressed</description>
	   <name>controlPressClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The attribute positions the controls
                                                  horizontally. Possible values are
                                                  "right","center","left".
                                                  Default value is "right".</description>
	   <name>controlsHorizontalPosition</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The attribute positions the controls
                                                  vertically. Possible values are
                                                  "bottom","center" and "top". Default value is "center"</description>
	   <name>controlsVerticalPosition</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Id of Converter to be used or reference to a Converter</description>
	   <name>converter</name>
	   	   	   					   	<deferred-value>
					<type>javax.faces.convert.Converter</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A ValueExpression enabled attribute that, if present,
			will be used as the text of the converter message,
			replacing any message that comes from the converter</description>
	   <name>converterMessage</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The attribute is used to display text while
                                                  value is undefined</description>
	   <name>defaultLabel</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style class for edit state</description>
	   <name>editClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The attribute provides an option to assign an
                                                  JavaScript action that initiates the change of the
                                                  state. Default value is
                                                  "onclick".</description>
	   <name>editEvent</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  	  		  <attribute>
	   <description>Every component may have a unique id that is automatically created if omitted</description>
	   <name>id</name>
	   	   	   		<rtexprvalue>false</rtexprvalue>
	   		<type>java.lang.String</type>
	   	  </attribute>
		  		  <attribute>
	   <description>A flag indicating that this component value must be converted
            and validated immediately (that is, during Apply Request Values
            phase), rather than waiting until a Process Validations phase</description>
	   <name>immediate</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A localized user presentable name for this component.</description>
	   <name>label</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Defines how the component is displayed in the
                                                  layout. Possible values are
                                                  "block",
                                                  "inline". Default value is
                                                  "inline".</description>
	   <name>layout</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The attribute defines the height of option
                                                  list. Default value is "200px".</description>
	   <name>listHeight</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The attribute defines the width of option list.
                                                  Default value is "200px".</description>
	   <name>listWidth</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  	  		  <attribute>
	   <description>Sets the maximum width of the select element.
                                                  Default value is "200px".</description>
	   <name>maxSelectWidth</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Sets the minimum width of the select element.
                                                  Default value is "100px".</description>
	   <name>minSelectWidth</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: script expression; the element lost the
                                                  focus</description>
	   <name>onblur</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: script expression; the element value was
                                                  changed</description>
	   <name>onchange</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The clientside script method to be called when the element is clicked</description>
	   <name>onclick</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when the element is double-clicked</description>
	   <name>ondblclick</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: script expression; edit state is
                                                  activated</description>
	   <name>oneditactivated</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The attributes provide a possibility to assign
                                                  JavaScript on edit state activation</description>
	   <name>oneditactivation</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: script expression; the element got the
                                                  focus</description>
	   <name>onfocus</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: script expression; the element lost the
                                                  focus</description>
	   <name>oninputblur</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: a script expression; a pointer button is
                                                  clicked</description>
	   <name>oninputclick</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: a script expression; a pointer button is
                                                  double-clicked</description>
	   <name>oninputdblclick</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: script expression; the element got the
                                                  focus</description>
	   <name>oninputfocus</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: a script expression; a key is pressed
                                                  down</description>
	   <name>oninputkeydown</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: a script expression; a key is pressed and
                                                  released</description>
	   <name>oninputkeypress</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: a script expression; a key is
                                        released</description>
	   <name>oninputkeyup</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: script expression; a pointer button is
                                                  pressed down</description>
	   <name>oninputmousedown</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: a script expression; a pointer is moved
                                                  within</description>
	   <name>oninputmousemove</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: a script expression; a pointer is moved
                                                  away</description>
	   <name>oninputmouseout</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: a script expression; a pointer is moved
                                                  onto</description>
	   <name>oninputmouseover</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: script expression; a pointer button is
                                                  released</description>
	   <name>oninputmouseup</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a key is pressed down over the element</description>
	   <name>onkeydown</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a key is pressed over the element and released</description>
	   <name>onkeypress</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a key is released</description>
	   <name>onkeyup</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a mouse button is pressed down over the element</description>
	   <name>onmousedown</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a pointer is moved within the element</description>
	   <name>onmousemove</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a pointer is moved away from the element</description>
	   <name>onmouseout</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a pointer is moved onto the element</description>
	   <name>onmouseover</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a mouse button is released</description>
	   <name>onmouseup</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: script expression; the onselect event
                                                  occurs when you select some menu
                                        item</description>
	   <name>onselect</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: script expression; view state is
                                                  activated</description>
	   <name>onviewactivated</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The attributes provide a possibility to assign
                                                  JavaScript on view state activation</description>
	   <name>onviewactivation</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The attribute opens the list once edit
                                                  activated. Default value is
                                                  "true".</description>
	   <name>openOnEdit</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "false", this component is not rendered</description>
	   <name>rendered</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "true", this component is checked for non-empty input</description>
	   <name>required</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A ValueExpression enabled attribute that, if present,
			will be used as the text of the validation message for
			the "required" facility, if the "required" facility is
			used</description>
	   <name>requiredMessage</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Defines custom save icon</description>
	   <name>saveControlIcon</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>Sets width of the select element</description>
	   <name>selectWidth</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The attribute serves to display
                                                  "save" and
                                                  "cancel" controls. Default value
                                                  is "false".</description>
	   <name>showControls</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "true", shows the SelectItem labels in the InplaceSelect pull-down list, but displays the value in the field in view mode once an item is selected.
        						          Default value is "false"</description>
	   <name>showValueInView</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Corresponds to the HTML class attribute</description>
	   <name>styleClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The attribute serves to define the tabbing
                                                  order</description>
	   <name>tabindex</name>
	   	   	   					   	<deferred-value>
					<type>int</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>MethodBinding pointing at a method that is called during
            Process Validations phase of the request processing lifecycle,
            to validate the current value of this component</description>
	   <name>validator</name>
	   	   	   						<deferred-method>
					<method-signature>void validator(javax.faces.context.FacesContext, javax.faces.component.UIComponent, java.lang.Object)</method-signature>
				</deferred-method>
				   	  </attribute>
		  		  <attribute>
	   <description>A ValueExpression enabled attribute that, if present,
			will be used as the text of the validator message,
			replacing any message that comes from the validator</description>
	   <name>validatorMessage</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>The current value of this component</description>
	   <name>value</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Listener for value changes</description>
	   <name>valueChangeListener</name>
	   	   	   						<deferred-method>
					<method-signature>void valueChangeListener(javax.faces.event.ValueChangeEvent)</method-signature>
				</deferred-method>
				   	  </attribute>
		  	  		  <attribute>
	   <description>Style class for view state</description>
	   <name>viewClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style class for hovered text in view
                                        state</description>
	   <name>viewHoverClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  
	</tag>
<tag>
	  	  <description>A component that lets selecting a number from a numeric region. It is a horizontal
    		aligned scroll-like control with its own input field (optional) present. The keyboard input in a
		    field is possible (optional. Also it is possible to see the current value in the tool tip above a
		    dragged handle control.</description>
	  	  	  		  <name>inputNumberSlider</name>
	  	  <tag-class>org.richfaces.taglib.InputNumberSliderTag</tag-class>
	  <body-content>JSP</body-content>
	  
	    		  <attribute>
	   <description>This attribute assigns an access key to an element. An access key is a single character from the document character set. Note: Authors should consider the input method of the expected reader when specifying an accesskey</description>
	   <name>accesskey</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  	  		  <attribute>
	   <description>A name of CSS class  for the bar element</description>
	   <name>barClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Style for a slider control line</description>
	   <name>barStyle</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The attribute takes a value-binding expression for a component property of
a backing bean</description>
	   <name>binding</name>
	   	   	   					   	<deferred-value>
					<type>javax.faces.component.UIComponent</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>an error message to use in client side validation events</description>
	   <name>clientErrorMessage</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Id of Converter to be used or reference to a Converter</description>
	   <name>converter</name>
	   	   	   					   	<deferred-value>
					<type>javax.faces.convert.Converter</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A ValueExpression enabled attribute that, if present,
			will be used as the text of the converter message,
			replacing any message that comes from the converter</description>
	   <name>converterMessage</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A name of CSS class for the decrease arrow element</description>
	   <name>decreaseClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A name of CSS class for a selected control decrease arrow element</description>
	   <name>decreaseSelectedClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A style for the decrease arrow element</description>
	   <name>decreaseStyle</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Delay in pressed increase/decrease arrows in miliseconds. Default value is "200".</description>
	   <name>delay</name>
	   	   	   					   	<deferred-value>
					<type>int</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>When set for a form control, this boolean attribute disables the control for your input</description>
	   <name>disabled</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If set to "false" this attribute makes the text field "read-only", so the value can be
	    	changed only from a handle. Default value is "true".</description>
	   <name>enableManualInput</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>A name of CSS class for a control handle element</description>
	   <name>handleClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A name of CSS class for a selected control handle element</description>
	   <name>handleSelectedClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The height of a slider control. Default value is "20px", for orientation="vertical" value is "20px"</description>
	   <name>height</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Every component may have a unique id that is automatically created if omitted</description>
	   <name>id</name>
	   	   	   		<rtexprvalue>false</rtexprvalue>
	   		<type>java.lang.String</type>
	   	  </attribute>
		  		  <attribute>
	   <description>A flag indicating that this component value must be converted
            and validated immediately (that is, during Apply Request Values
            phase), rather than waiting until a Process Validations phase</description>
	   <name>immediate</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A name of CSS class for increase arrow element</description>
	   <name>increaseClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A name of CSS class for a selected control increase arrow element</description>
	   <name>increaseSelectedClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A style for the increase arrow element</description>
	   <name>increaseStyle</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Style Class attribute for a text field</description>
	   <name>inputClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "right", the InputText Box would be rendered on the right side of the ruler. If "top", the InputText Box would be rendered on the top of the ruler. If "bottom", the InputText Box would be rendered on the bottom of the ruler.</description>
	   <name>inputPosition</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Similar to the "Size" attribute of h:inputText. Default value is "3".</description>
	   <name>inputSize</name>
	   	   	   					   	<deferred-value>
					<type>int</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Style attribute for text field</description>
	   <name>inputStyle</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A localized user presentable name for this component.</description>
	   <name>label</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  	  		  <attribute>
	   <description>Attribute to set an "end" value. Default value is "100"</description>
	   <name>maxValue</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Specifies the maximum number of digits that could be entered into the input field. 
		The maximum number is unlimited by default. 
		If entered value exceeds the value specified in "maxValue" attribute than the slider takes a maximum value position.</description>
	   <name>maxlength</name>
	   	   	   					   	<deferred-value>
					<type>int</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Attribute to set the "start" value. Default value is "0".</description>
	   <name>minValue</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when the element loses the focus</description>
	   <name>onblur</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when the element value is changed</description>
	   <name>onchange</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The clientside script method to be called when the element is clicked</description>
	   <name>onclick</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when the element is double-clicked</description>
	   <name>ondblclick</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: script expression; a non-number value or a number value that is out of the range is input</description>
	   <name>onerror</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when the element gets the focus</description>
	   <name>onfocus</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: a script expression; a pointer button is clicked</description>
	   <name>oninputclick</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: a script expression; a pointer button is double-clicked</description>
	   <name>oninputdblclick</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: a script expression; a key is pressed down</description>
	   <name>oninputkeydown</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: a script expression; a key is pressed and released</description>
	   <name>oninputkeypress</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: a script expression; a key is released</description>
	   <name>oninputkeyup</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: script expression; a pointer button is pressed down</description>
	   <name>oninputmousedown</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: a script expression; a pointer is moved within</description>
	   <name>oninputmousemove</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: a script expression; a pointer is moved away</description>
	   <name>oninputmouseout</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: a script expression; a pointer is moved onto</description>
	   <name>oninputmouseover</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: script expression; a pointer button is released</description>
	   <name>oninputmouseup</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  	  	  		  <attribute>
	   <description>The client side script method to be called when a mouse button is pressed down over the element</description>
	   <name>onmousedown</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a pointer is moved within the element</description>
	   <name>onmousemove</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a pointer is moved away from the element</description>
	   <name>onmouseout</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a pointer is moved onto the element</description>
	   <name>onmouseover</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a mouse button is released</description>
	   <name>onmouseup</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when some text is selected in the text field. This attribute can be used with the INPUT and TEXTAREA elements.</description>
	   <name>onselect</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Event occur on slide</description>
	   <name>onslide</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Attribute can have the values "vertical" and "horizontal" to define in which direction the slider should be moveable.</description>
	   <name>orientation</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "false", this component is not rendered</description>
	   <name>rendered</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "true", this component is checked for non-empty input</description>
	   <name>required</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A ValueExpression enabled attribute that, if present,
			will be used as the text of the validation message for
			the "required" facility, if the "required" facility is
			used</description>
	   <name>requiredMessage</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>False value for this attribute makes increase/decrease arrows invisible. Default value is "false".</description>
	   <name>showArrows</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If the min/max values are shown on the right/left borders of a control. Default value is "true".</description>
	   <name>showBoundaryValues</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>False value for this attribute makes text a field invisible. Default value is "true".</description>
	   <name>showInput</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "true"the current value is shown in the tooltip when a handle control is in a
	    		"dragged" state. Default value is "true".</description>
	   <name>showToolTip</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>Parameter that determines a step between the nearest values while using a handle. Default value is "1".</description>
	   <name>step</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Styles for main div element of the slider control</description>
	   <name>style</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Name of a CSS class</description>
	   <name>styleClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>This attribute specifies the position of the current element in the tabbing order for the current document. This value must be a number between 0 and 32767. User agents should ignore leading zeros</description>
	   <name>tabindex</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A name of CSS class for the tool tip element</description>
	   <name>tipClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A style for the tool tip element</description>
	   <name>tipStyle</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>MethodBinding pointing at a method that is called during
            Process Validations phase of the request processing lifecycle,
            to validate the current value of this component</description>
	   <name>validator</name>
	   	   	   						<deferred-method>
					<method-signature>void validator(javax.faces.context.FacesContext, javax.faces.component.UIComponent, java.lang.Object)</method-signature>
				</deferred-method>
				   	  </attribute>
		  		  <attribute>
	   <description>A ValueExpression enabled attribute that, if present,
			will be used as the text of the validator message,
			replacing any message that comes from the validator</description>
	   <name>validatorMessage</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>The current value of this component</description>
	   <name>value</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Listener for value changes</description>
	   <name>valueChangeListener</name>
	   	   	   						<deferred-method>
					<method-signature>void valueChangeListener(javax.faces.event.ValueChangeEvent)</method-signature>
				</deferred-method>
				   	  </attribute>
		  	  		  <attribute>
	   <description>The width of a slider control. Default value is "200px", for orientation="vertical" value is "200px"</description>
	   <name>width</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  
	</tag>
<tag>
	  	  <description>Spinner component - A single line input field that lets the user select a number using the controls near the
			text field. User can change value using Up/Down keyboard keys. The keyboard Input in field if it isn't 
			locked by manualInput attribute is possible. After arrow controls pressed - cursor can be
			moved in any way without loosing draged state.</description>
	  	  	  		  <name>inputNumberSpinner</name>
	  	  <tag-class>org.richfaces.taglib.InputNumberSpinnerTag</tag-class>
	  <body-content>JSP</body-content>
	  
	    		  <attribute>
	   <description>This attribute assigns an access key to an element. An access key is a single character from the document character set. Note: Authors should consider the input method of the expected reader when specifying an accesskey</description>
	   <name>accesskey</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>The attribute takes a value-binding expression for a component property of
a backing bean</description>
	   <name>binding</name>
	   	   	   					   	<deferred-value>
					<type>javax.faces.component.UIComponent</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>An error message to use in client side validation events</description>
	   <name>clientErrorMessage</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Id of Converter to be used or reference to a Converter</description>
	   <name>converter</name>
	   	   	   					   	<deferred-value>
					<type>javax.faces.convert.Converter</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A ValueExpression enabled attribute that, if present,
			will be used as the text of the converter message,
			replacing any message that comes from the converter</description>
	   <name>converterMessage</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "true" after the current value reaches the border value it is reversed to another border value
	    		after next increasing/decreasing. In other case possibilities of next increasing (or decreasing) will be locked. Default value is " true ".</description>
	   <name>cycled</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Disable browser's auto completion. Default value is "false"</description>
	   <name>disableBrowserAutoComplete</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>When set for a form control, this boolean attribute disables the control for your input</description>
	   <name>disabled</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>if "false" your's input to the text field using keyboard will be locked. Default value is "true"</description>
	   <name>enableManualInput</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>Every component may have a unique id that is automatically created if omitted</description>
	   <name>id</name>
	   	   	   		<rtexprvalue>false</rtexprvalue>
	   		<type>java.lang.String</type>
	   	  </attribute>
		  		  <attribute>
	   <description>A flag indicating that this component value must be converted
            and validated immediately (that is, during Apply Request Values
            phase), rather than waiting until a Process Validations phase</description>
	   <name>immediate</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Class attribute for text field</description>
	   <name>inputClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Attribute specifies the initial length of input in characters. Default value is "10".</description>
	   <name>inputSize</name>
	   	   	   					   	<deferred-value>
					<type>int</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Style attribute for text field</description>
	   <name>inputStyle</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A localized user presentable name for this component.</description>
	   <name>label</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  	  		  <attribute>
	   <description>Maximum value. Default value is "100".</description>
	   <name>maxValue</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>Minimum value. Default value is "0".</description>
	   <name>minValue</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when the element loses the focus</description>
	   <name>onblur</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when the element value is changed</description>
	   <name>onchange</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The clientside script method to be called when the element is clicked</description>
	   <name>onclick</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when the element is double-clicked</description>
	   <name>ondblclick</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: a script expression; a button "Down" is clicked</description>
	   <name>ondownclick</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: a script expression; event fires whenever an JavaScript error occurs</description>
	   <name>onerror</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when the element gets the focus</description>
	   <name>onfocus</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: a script expression; a pointer button is clicked</description>
	   <name>oninputclick</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: a script expression; a pointer button is double-clicked</description>
	   <name>oninputdblclick</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: a script expression; a key is pressed down</description>
	   <name>oninputkeydown</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: a script expression; a key is pressed and released</description>
	   <name>oninputkeypress</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: a script expression; a key is released</description>
	   <name>oninputkeyup</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: script expression; a pointer button is pressed down</description>
	   <name>oninputmousedown</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: a script expression; a pointer is moved within</description>
	   <name>oninputmousemove</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: a script expression; a pointer is moved away</description>
	   <name>oninputmouseout</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: a script expression; a pointer is moved onto</description>
	   <name>oninputmouseover</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: script expression; a pointer button is released</description>
	   <name>oninputmouseup</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  	  	  		  <attribute>
	   <description>The client side script method to be called when a mouse button is pressed down over the element</description>
	   <name>onmousedown</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a pointer is moved within the element</description>
	   <name>onmousemove</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a pointer is moved away from the element</description>
	   <name>onmouseout</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a pointer is moved onto the element</description>
	   <name>onmouseover</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a mouse button is released</description>
	   <name>onmouseup</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when some text is selected in the text field. This attribute can be used with the INPUT and TEXTAREA elements.</description>
	   <name>onselect</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: a script expression; a button "Up" is clicked</description>
	   <name>onupclick</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "false", this component is not rendered</description>
	   <name>rendered</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "true", this component is checked for non-empty input</description>
	   <name>required</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A ValueExpression enabled attribute that, if present,
			will be used as the text of the validation message for
			the "required" facility, if the "required" facility is
			used</description>
	   <name>requiredMessage</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>Parameter that determines the step between nearest values while using controls. Default value is "1"</description>
	   <name>step</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style(s) is/are to be applied when this component is rendered</description>
	   <name>style</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Corresponds to the HTML class attribute</description>
	   <name>styleClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>This attribute specifies the position of the current element in the tabbing order for the current document. This value must be a number between 0 and 32767. User agents should ignore leading zeros</description>
	   <name>tabindex</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>MethodBinding pointing at a method that is called during
            Process Validations phase of the request processing lifecycle,
            to validate the current value of this component</description>
	   <name>validator</name>
	   	   	   						<deferred-method>
					<method-signature>void validator(javax.faces.context.FacesContext, javax.faces.component.UIComponent, java.lang.Object)</method-signature>
				</deferred-method>
				   	  </attribute>
		  		  <attribute>
	   <description>A ValueExpression enabled attribute that, if present,
			will be used as the text of the validator message,
			replacing any message that comes from the validator</description>
	   <name>validatorMessage</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>The current value of this component</description>
	   <name>value</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Listener for value changes</description>
	   <name>valueChangeListener</name>
	   	   	   						<deferred-method>
					<method-signature>void valueChangeListener(javax.faces.event.ValueChangeEvent)</method-signature>
				</deferred-method>
				   	  </attribute>
		  	  	  
	</tag>
<tag>
	  	  <description>The &amp;lt;rich:insert&amp;gt; component is used for highlighting, source code inserting and, optionally, format the file from the application context into the page.</description>
	  	  	  		  <name>insert</name>
	  	  <tag-class>org.richfaces.ui.taglib.InsertTag</tag-class>
	  <body-content>JSP</body-content>
	  
	    		  <attribute>
	   <description>The attribute takes a value-binding expression for a component property of
a backing bean</description>
	   <name>binding</name>
	   	   	   					   	<deferred-value>
					<type>javax.faces.component.UIComponent</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Defines the String, inserted with this component. This attribute is alternative to "src" attribute.</description>
	   <name>content</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Attribute defines encoding for inserted content</description>
	   <name>encoding</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Attribute defines the alternative content that will be shown in case
component cannot read the resource defined with 'src' attribute. If "errorContent" attribute is not defined,
the component shown the actual error message in the place where the content is expected</description>
	   <name>errorContent</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>Defines a type of code</description>
	   <name>highlight</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Every component may have a unique id that is automatically created if omitted</description>
	   <name>id</name>
	   	   	   		<rtexprvalue>false</rtexprvalue>
	   		<type>java.lang.String</type>
	   	  </attribute>
		  		  <attribute>
	   <description>If "false", this component is not rendered</description>
	   <name>rendered</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Defines the path to the file with source code</description>
	   <name>src</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  
	</tag>
<tag>
	  	  <description>The &amp;lt;rich:jQuery&amp;gt; allows to apply styles and behaviour to DOM objects.</description>
	  	  	  		  <name>jQuery</name>
	  	  <tag-class>org.richfaces.taglib.JQueryTag</tag-class>
	  <body-content>JSP</body-content>
	  
	    		  <attribute>
	   <description>The attribute takes a value-binding expression for a component property of
a backing bean</description>
	   <name>binding</name>
	   	   	   					   	<deferred-value>
					<type>javax.faces.component.UIComponent</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>Every component may have a unique id that is automatically created if omitted</description>
	   <name>id</name>
	   	   	   		<rtexprvalue>false</rtexprvalue>
	   		<type>java.lang.String</type>
	   	  </attribute>
		  		  <attribute>
	   <description>The name of a function that will be generated to execute a query. The "name" attribute is required 
			    if "timing" attribute equals to "onJScall"</description>
	   <name>name</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The query string that is executed for a given selector.</description>
	   <name>query</name>
	   			<required>true</required>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "false", this component is not rendered</description>
	   <name>rendered</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Selector for query. The "selector" attribute uses defined by w3c
			    consortium syntax for CSS rule selector with some jQuery extensions.</description>
	   <name>selector</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The attribute that defines when to perform the query. The possible values are "immediate","onload" and "onJScall". 
			 "immediate" performs the query right away. "onload" adds the task to the
			 time when a document is loaded (the DOM tree is created). "onJScall" allows to invoke the 
			 query by Javascipt function name defined with "name" attribute. The default value is 
			 "immediate".</description>
	   <name>timing</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  
	</tag>
<tag>
	  	  <description/>
	  	  	  		  <name>layout</name>
	  	  <tag-class>org.richfaces.taglib.LayoutTag</tag-class>
	  <body-content>JSP</body-content>
	  
	    		  <attribute>
	   <description>The attribute takes a value-binding expression for a component property of
a backing bean</description>
	   <name>binding</name>
	   	   	   					   	<deferred-value>
					<type>javax.faces.component.UIComponent</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>Every component may have a unique id that is automatically created if omitted</description>
	   <name>id</name>
	   	   	   		<rtexprvalue>false</rtexprvalue>
	   		<type>java.lang.String</type>
	   	  </attribute>
		  		  <attribute>
	   <description>If "false", this component is not rendered</description>
	   <name>rendered</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  	  
	</tag>
<tag>
	  	  <description/>
	  	  	  		  <name>layoutPanel</name>
	  	  <tag-class>org.richfaces.taglib.LayoutPanelTag</tag-class>
	  <body-content>JSP</body-content>
	  
	    		  <attribute>
	   <description>The attribute takes a value-binding expression for a component property of
a backing bean</description>
	   <name>binding</name>
	   	   	   					   	<deferred-value>
					<type>javax.faces.component.UIComponent</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>Every component may have a unique id that is automatically created if omitted</description>
	   <name>id</name>
	   	   	   		<rtexprvalue>false</rtexprvalue>
	   		<type>java.lang.String</type>
	   	  </attribute>
		  		  <attribute>
	   <description>Positions the component relative to the &amp;lt;rich:layout/&amp;gt; component. Possible values are top, left, right, center, bottom.</description>
	   <name>position</name>
	   			<required>true</required>
	   	   	   					   	<deferred-value>
					<type>org.richfaces.component.LayoutPosition</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "false", this component is not rendered</description>
	   <name>rendered</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Sets the width of the layout area</description>
	   <name>width</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  
	</tag>
<tag>
	  	  <description>The &amp;lt;rich:listShuttle&amp;gt; component is used for moving chosen items from one list into another with their optional reordering there.</description>
	  	  	  		  <name>listShuttle</name>
	  	  <tag-class>org.richfaces.taglib.ListShuttleTag</tag-class>
	  <body-content>JSP</body-content>
	  
	    		  <attribute>
	   <description>Stores active item</description>
	   <name>activeItem</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Defines row keys that are updated after an Ajax request</description>
	   <name>ajaxKeys</name>
	   	   	   					   	<deferred-value>
					<type>java.util.Set</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>The attribute takes a value-binding expression for a component property of
a backing bean</description>
	   <name>binding</name>
	   	   	   					   	<deferred-value>
					<type>javax.faces.component.UIComponent</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS class for a "Bottom" control</description>
	   <name>bottomControlClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Defines a label for a bottom control</description>
	   <name>bottomControlLabel</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: alt for the last button</description>
	   <name>bottomTitle</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Comma-separated list of CSS classes for columns</description>
	   <name>columnClasses</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>It defines EL-binding  for a component state for saving or redefinition</description>
	   <name>componentState</name>
	   	   	   					   	<deferred-value>
					<type>org.ajax4jsf.model.DataComponentState</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Defines type of a control: button or none. Default value is "button".</description>
	   <name>controlsType</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Customizes vertically a position of move/copy and order controls relatively to lists. Default value is "middle"</description>
	   <name>controlsVerticalAlign</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Id of Converter to be used or reference to a Converter</description>
	   <name>converter</name>
	   	   	   					   	<deferred-value>
					<type>javax.faces.convert.Converter</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A ValueExpression enabled attribute that, if present,
			will be used as the text of the converter message,
			replacing any message that comes from the converter</description>
	   <name>converterMessage</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS class for a "Copy all" control</description>
	   <name>copyAllControlClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Defines a label for a "Copy all" control</description>
	   <name>copyAllControlLabel</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: alt for "Copy all" button</description>
	   <name>copyAllTitle</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS class for "Copy" control</description>
	   <name>copyControlClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Defines a label for a "Copy" control</description>
	   <name>copyControlLabel</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: alt for a "Copy" button</description>
	   <name>copyTitle</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS class for a disabled control</description>
	   <name>disabledControlClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS class for a "Down" control</description>
	   <name>downControlClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Defines a label for a down control</description>
	   <name>downControlLabel</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: alt for bottom button</description>
	   <name>downTitle</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>If "false", 'Copy All' and 'Remove All' controls aren't displayed. Default value is "true".</description>
	   <name>fastMoveControlsVisible</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "false", 'Top' and 'Bottom' controls aren't displayed. Default value is "true".</description>
	   <name>fastOrderControlsVisible</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  	  	  	  		  <attribute>
	   <description>Every component may have a unique id that is automatically created if omitted</description>
	   <name>id</name>
	   	   	   		<rtexprvalue>false</rtexprvalue>
	   		<type>java.lang.String</type>
	   	  </attribute>
		  		  <attribute>
	   <description>A flag indicating that this component value must be converted
            and validated immediately (that is, during Apply Request Values
            phase), rather than waiting until a Process Validations phase</description>
	   <name>immediate</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>A localized user presentable name for this component.</description>
	   <name>label</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS class for a list</description>
	   <name>listClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Defines height of the list. Default value is "140".</description>
	   <name>listsHeight</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  	  		  <attribute>
	   <description>If "false", 'Copy' and 'Remove' controls aren't displayed. Default value is "true".</description>
	   <name>moveControlsVisible</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: script expression; the element lost the focus</description>
	   <name>onblur</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A JavaScript event handler; a button "Bottom" is clicked</description>
	   <name>onbottomclick</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>HTML: a script expression; a pointer button is clicked</description>
	   <name>onclick</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A JavaScript event handler; a button "Copy All" is clicked</description>
	   <name>oncopyallclick</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: a script expression; a button "Copy" is clicked</description>
	   <name>oncopyclick</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: a script expression; a pointer button is double-clicked</description>
	   <name>ondblclick</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A JavaScript event handler; a button "Down" is clicked</description>
	   <name>ondownclick</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: script expression; the element got the focus</description>
	   <name>onfocus</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: script expression; before a list is changed</description>
	   <name>onlistchange</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: script expression; a list is changed</description>
	   <name>onlistchanged</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: a script expression; a pointer is moved within</description>
	   <name>onmousemove</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: a script expression; a pointer is moved away</description>
	   <name>onmouseout</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: a script expression; a pointer is moved onto</description>
	   <name>onmouseover</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: script expression; called before ordering action</description>
	   <name>onorderchange</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: script expression; called after ordering action</description>
	   <name>onorderchanged</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A JavaScript event handler; a button "Remove All" is clicked</description>
	   <name>onremoveallclick</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A JavaScript event handler; a button "Remove" is clicked</description>
	   <name>onremoveclick</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A JavaScript event handler; a button "Top" is clicked</description>
	   <name>ontopclick</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: a script expression; a button "Up" is clicked</description>
	   <name>onupclick</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "false", 'Up' and 'Down' controls aren't displayed. Default value is "true".</description>
	   <name>orderControlsVisible</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS class for "Remove all" control</description>
	   <name>removeAllControlClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Defines a label for a "Remove all" control</description>
	   <name>removeAllControlLabel</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: alt for "Remove all" button</description>
	   <name>removeAllTitle</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS class for a "Remove" control</description>
	   <name>removeControlClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Defines a label for a "Remove" control</description>
	   <name>removeControlLabel</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: alt for a "Remove" button</description>
	   <name>removeTitle</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "false", this component is not rendered</description>
	   <name>rendered</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>A ValueExpression enabled attribute that, if present,
			will be used as the text of the validation message for
			the "required" facility, if the "required" facility is
			used</description>
	   <name>requiredMessage</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>CSS class for a row</description>
	   <name>rowClasses</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  	  	  	  		  <attribute>
	   <description>Converter for a row key object</description>
	   <name>rowKeyConverter</name>
	   	   	   					   	<deferred-value>
					<type>javax.faces.convert.Converter</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The attribute provides access to a row key in a Request scope</description>
	   <name>rowKeyVar</name>
	   	   	   		<rtexprvalue>false</rtexprvalue>
	   		<type>java.lang.String</type>
	   	  </attribute>
		  	  		  <attribute>
	   <description>Shows a label for a button. Default value is "true".</description>
	   <name>showButtonLabels</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Defines source list caption representation text</description>
	   <name>sourceCaptionLabel</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Defines width of a source list. Default value is "140".</description>
	   <name>sourceListWidth</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Defines the case when source value is being validated.
				If the value is "true", there should be at least one item in the source list</description>
	   <name>sourceRequired</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Manages selection in a source list from the server side</description>
	   <name>sourceSelection</name>
	   	   	   					   	<deferred-value>
					<type>java.util.Set</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Defines a List or Array of items to be shown in a source list</description>
	   <name>sourceValue</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>CSS style(s) is/are to be applied when this component is rendered</description>
	   <name>style</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Corresponds to the HTML class attribute</description>
	   <name>styleClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>If "true", dragging between lists realized by click</description>
	   <name>switchByClick</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "true", items can be moved between the lists by double-clicking on them. Default value is "true".</description>
	   <name>switchByDblClick</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Defines target list caption representation text</description>
	   <name>targetCaptionLabel</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Defines width of a target list. Default value is "140".</description>
	   <name>targetListWidth</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Defines the case when target value is being validated.
				If the value is "true", there should be at least one item in the target list</description>
	   <name>targetRequired</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Manages selection in a target list from the server side</description>
	   <name>targetSelection</name>
	   	   	   					   	<deferred-value>
					<type>java.util.Set</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Defines a List or Array of items to be shown in a target list</description>
	   <name>targetValue</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS class for a "Top" control</description>
	   <name>topControlClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Defines a label for a "Top" control</description>
	   <name>topControlLabel</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: alt for the first button</description>
	   <name>topTitle</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS class for an "Up" control</description>
	   <name>upControlClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Defines a label for an "Up" control</description>
	   <name>upControlLabel</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: alt for top button</description>
	   <name>upTitle</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>MethodBinding pointing at a method that is called during
            Process Validations phase of the request processing lifecycle,
            to validate the current value of this component</description>
	   <name>validator</name>
	   	   	   						<deferred-method>
					<method-signature>void validator(javax.faces.context.FacesContext, javax.faces.component.UIComponent, java.lang.Object)</method-signature>
				</deferred-method>
				   	  </attribute>
		  		  <attribute>
	   <description>A ValueExpression enabled attribute that, if present,
			will be used as the text of the validator message,
			replacing any message that comes from the validator</description>
	   <name>validatorMessage</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  	  		  <attribute>
	   <description>Listener for value changes</description>
	   <name>valueChangeListener</name>
	   	   	   						<deferred-method>
					<method-signature>void valueChangeListener(javax.faces.event.ValueChangeEvent)</method-signature>
				</deferred-method>
				   	  </attribute>
		  	  		  <attribute>
	   <description>Defines a list on the page</description>
	   <name>var</name>
	   	   	   		<rtexprvalue>false</rtexprvalue>
	   		<type>java.lang.String</type>
	   	  </attribute>
		  	  
	</tag>
<tag>
	  	  <description>The &amp;lt;rich:menuGroup&amp;gt; component is used to define an expandable group of items inside a pop-up list or another group.</description>
	  	  	  		  <name>menuGroup</name>
	  	  <tag-class>org.richfaces.taglib.MenuGroupTag</tag-class>
	  <body-content>JSP</body-content>
	  
	    		  <attribute>
	   <description>The attribute takes a value-binding expression for a component property of
a backing bean</description>
	   <name>binding</name>
	   	   	   					   	<deferred-value>
					<type>javax.faces.component.UIComponent</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Id of Converter to be used or reference to a Converter</description>
	   <name>converter</name>
	   	   	   					   	<deferred-value>
					<type>javax.faces.convert.Converter</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Defines direction of the popup sublist to appear
                ("right", "left", "auto"(Default), "left-down", "left-up", "right-down", "right-up")</description>
	   <name>direction</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "true" sets state of the item to disabled state. Default value is "false".</description>
	   <name>disabled</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Defines the event on the representation element that
                triggers the menu's appearance. Default value is "onmouseover".</description>
	   <name>event</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>Path to the icon to be displayed for the enabled item
                state</description>
	   <name>icon</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Class to be applied to icon element</description>
	   <name>iconClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Path to the icon to be displayed for the disabled item
                state</description>
	   <name>iconDisabled</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Path to the folder icon to be displayed for the enabled
                item state</description>
	   <name>iconFolder</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Path to the folder icon to be displayed for the enabled
                item state</description>
	   <name>iconFolderDisabled</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style rules to be applied to icon element</description>
	   <name>iconStyle</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Every component may have a unique id that is automatically created if omitted</description>
	   <name>id</name>
	   	   	   		<rtexprvalue>false</rtexprvalue>
	   		<type>java.lang.String</type>
	   	  </attribute>
		  		  <attribute>
	   <description>Class to be applied to label element</description>
	   <name>labelClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>HTML: script expression; group was
                closed</description>
	   <name>onclose</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: a script expression; a pointer is moved
                within</description>
	   <name>onmousemove</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: a script expression; a pointer is moved
                away</description>
	   <name>onmouseout</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: a script expression; a pointer is moved
                onto</description>
	   <name>onmouseover</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: script expression; group was
                opened</description>
	   <name>onopen</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "false", this component is not rendered</description>
	   <name>rendered</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Class to be applied to selected items</description>
	   <name>selectClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style rules to be applied to selected items</description>
	   <name>selectStyle</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Delay between event and menu showing. Default value is "300".</description>
	   <name>showDelay</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Integer</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style(s) is/are to be applied when this component is rendered</description>
	   <name>style</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Corresponds to the HTML class attribute</description>
	   <name>styleClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Defines representation text for menuItem</description>
	   <name>value</name>
	   			<required>true</required>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  	  
	</tag>
<tag>
	  	  <description>The &amp;lt;rich:menuItem&amp;gt; component is used for the definition of a single item inside a pop-up list.</description>
	  	  	  		  <name>menuItem</name>
	  	  <tag-class>org.richfaces.taglib.MenuItemTag</tag-class>
	  <body-content>JSP</body-content>
	  
	    		  <attribute>
	   <description>MethodBinding pointing at the application action to be invoked,
            if this UIComponent is activated by you, during the Apply
            Request Values or Invoke Application phase of the request
            processing lifecycle, depending on the value of the immediate
            property</description>
	   <name>action</name>
	   	   	   						<deferred-method>
					<method-signature>java.lang.Object action()</method-signature>
				</deferred-method>
				   	  </attribute>
		  	  		  <attribute>
	   <description>MethodBinding pointing at method accepting  an ActionEvent with return type void</description>
	   <name>actionListener</name>
	   	   	   						<deferred-method>
					<method-signature>void actionListener(javax.faces.event.ActionEvent)</method-signature>
				</deferred-method>
				   	  </attribute>
		  	  	  		  <attribute>
	   <description>boolean attribute which provides possibility to limit JSF tree processing(decoding, conversion/validation, value applying) 
to the component which send the request only</description>
	   <name>ajaxSingle</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The attribute takes a value-binding expression for a component property of
a backing bean</description>
	   <name>binding</name>
	   	   	   					   	<deferred-value>
					<type>javax.faces.component.UIComponent</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "true", after process validations phase it skips updates of model beans on a force render response. It can be used for validating components input</description>
	   <name>bypassUpdates</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Serialized (on default with JSON) data passed on the client by a developer on AJAX request. It's accessible via "data.foo" syntax</description>
	   <name>data</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "true" sets state of the item to disabled state. Default value is "false".</description>
	   <name>disabled</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Name of requests queue to avoid send next request before complete other from same event. Can be used to reduce number of requests of frequently events (key press, mouse move etc.)</description>
	   <name>eventsQueue</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>id of element to set focus after request completed on client side</description>
	   <name>focus</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Path to the icon to be displayed for the enabled item
                state</description>
	   <name>icon</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Class to be applied to icon element</description>
	   <name>iconClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Path to the icon to be displayed for the disabled item state.</description>
	   <name>iconDisabled</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style rules to be applied to icon element</description>
	   <name>iconStyle</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Every component may have a unique id that is automatically created if omitted</description>
	   <name>id</name>
	   	   	   		<rtexprvalue>false</rtexprvalue>
	   		<type>java.lang.String</type>
	   	  </attribute>
		  		  <attribute>
	   <description>Attribute allows to ignore an Ajax Response produced by a request if the newest 'similar' request is
in a queue already. ignoreDupResponses="true" does not cancel the request while it is processed on the server,
but just allows to avoid unnecessary updates on the client side if the response isn't actual now</description>
	   <name>ignoreDupResponses</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>True means, that the default ActionListener should be executed
            immediately (i.e. during Apply Request Values phase of the
            request processing lifecycle), rather than waiting until the
            Invoke Application phase</description>
	   <name>immediate</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Class to be applied to label element</description>
	   <name>labelClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "true", then of all AJAX-rendered on the page components only those will be updated, 
		which ID's are passed to the "reRender" attribute of the describable component. 
		"false"-the default value-means that all components with ajaxRendered="true" will be updated.</description>
	   <name>limitToList</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called before DOM is updated</description>
	   <name>onbeforedomupdate</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The clientside script method to be called when the element is clicked</description>
	   <name>onclick</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called after the request is completed</description>
	   <name>oncomplete</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  	  	  	  		  <attribute>
	   <description>The client side script method to be called when a mouse button is pressed down over the element</description>
	   <name>onmousedown</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a pointer is moved within the element</description>
	   <name>onmousemove</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a pointer is moved away from the element</description>
	   <name>onmouseout</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a pointer is moved onto the element</description>
	   <name>onmouseover</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a mouse button is released</description>
	   <name>onmouseup</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: script expression; The onselect event occurs when
                you select some menu item</description>
	   <name>onselect</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Id['s] (in format of call  UIComponent.findComponent()) of components, processed at the phases 2-5 in case of AjaxRequest  caused by this component. Can be single id, comma-separated list of Id's, or EL Expression  with array or Collection</description>
	   <name>process</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Id['s] (in format of call  UIComponent.findComponent()) of components, rendered in case of AjaxRequest  caused by this component. Can be single id, comma-separated list of Id's, or EL Expression  with array or Collection</description>
	   <name>reRender</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "false", this component is not rendered</description>
	   <name>rendered</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Attribute defines the time (in ms.) that the request will be wait in the queue before it is ready to send.
When the delay time is over, the request will be sent to the server or removed if the newest 'similar' request is in a queue already</description>
	   <name>requestDelay</name>
	   	   	   					   	<deferred-value>
					<type>int</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Class to be applied to selected items</description>
	   <name>selectClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style rules to be applied to selected items</description>
	   <name>selectStyle</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If there are any component requests with identical IDs then these requests will be grouped.</description>
	   <name>similarityGroupingId</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>ID (in format of call UIComponent.findComponent()) of Request status component</description>
	   <name>status</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style(s) is/are to be applied when this component is rendered</description>
	   <name>style</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Corresponds to the HTML class attribute</description>
	   <name>styleClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Sets the submission mode. Possible values are "ajax", "server", "none". Default value is "server".</description>
	   <name>submitMode</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Name of a frame where the resource retrieved via this
                hyperlink is to be displayed</description>
	   <name>target</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Response waiting time on a particular request. If a response is not received during this time, the request is aborted</description>
	   <name>timeout</name>
	   	   	   					   	<deferred-value>
					<type>int</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The current value for this component</description>
	   <name>value</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  	  
	</tag>
<tag>
	  	  <description>A horizontal separator to use in the menu.</description>
	  	  	  		  <name>menuSeparator</name>
	  	  <tag-class>org.richfaces.taglib.MenuSeparatorTag</tag-class>
	  <body-content>empty</body-content>
	  
	    		  <attribute>
	   <description>The attribute takes a value-binding expression for a component property of
a backing bean</description>
	   <name>binding</name>
	   	   	   					   	<deferred-value>
					<type>javax.faces.component.UIComponent</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>Every component may have a unique id that is automatically created if omitted</description>
	   <name>id</name>
	   	   	   		<rtexprvalue>false</rtexprvalue>
	   		<type>java.lang.String</type>
	   	  </attribute>
		  		  <attribute>
	   <description>If "false", this component is not rendered</description>
	   <name>rendered</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  	  
	</tag>
<tag>
	  	  <description>The &amp;lt;rich:message&amp;gt; component is used for rendering a single message for a specific component.</description>
	  	  	  		  <name>message</name>
	  	  <tag-class>org.richfaces.taglib.RichMessageTag</tag-class>
	  <body-content>JSP</body-content>
	  
	    		  <attribute>
	   <description>Define, must be (or not) content of this component will be included in AJAX response created by parent AJAX Container, even if not forced by reRender list of ajax action.
            Ignored if component marked to output by some Ajax action component. The default value is "true".</description>
	   <name>ajaxRendered</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The attribute takes a value-binding expression for a component property of
a backing bean</description>
	   <name>binding</name>
	   	   	   					   	<deferred-value>
					<type>javax.faces.component.UIComponent</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style class to apply to any message with a severity class of "ERROR"</description>
	   <name>errorClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style class to apply to any message label with a severity class of "ERROR"</description>
	   <name>errorLabelClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style class to apply to any message marker with a severity class of "ERROR"</description>
	   <name>errorMarkerClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>CSS style class to apply to any message with a severity class of "FATAL"</description>
	   <name>fatalClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style class to apply to any message label with a severity class of "FATAL"</description>
	   <name>fatalLabelClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style class to apply to any message marker with a severity class of "FATAL"</description>
	   <name>fatalMarkerClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Client identifier of the component for which to display messages</description>
	   <name>for</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Every component may have a unique id that is automatically created if omitted</description>
	   <name>id</name>
	   	   	   		<rtexprvalue>false</rtexprvalue>
	   		<type>java.lang.String</type>
	   	  </attribute>
		  		  <attribute>
	   <description>CSS style class to apply to any message with a severity class of "INFO"</description>
	   <name>infoClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style class to apply to any message label with a severity class of "INFO"</description>
	   <name>infoLabelClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style class to apply to any message marker with a severity class of "INFO"</description>
	   <name>infoMarkerClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>CSS style class to apply to label</description>
	   <name>labelClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A comma-separated list of messages categories which should be displayed. Default value is "ALL".</description>
	   <name>level</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style class to apply to marker</description>
	   <name>markerClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style(s) is/are to be applied to marker when this component is rendered</description>
	   <name>markerStyle</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  	  		  <attribute>
	   <description>If "false", this component is not rendered</description>
	   <name>rendered</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Flag indicating whether detailed information of a displayed messages should be included.  Default value is "true".</description>
	   <name>showDetail</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Flag indicating whether the summary portion of displayed messages should be included.  Default value is "false".</description>
	   <name>showSummary</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The CSS style for message</description>
	   <name>style</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Space-separated list of CSS style class(es) to be applied when this element is rendered.  This value must be passed through as the "class" attribute on generated markup</description>
	   <name>styleClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Advisory title information about markup elements generated for this component</description>
	   <name>title</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Flag indicating whether the detail portion of the message should be displayed as a tooltip.  Default value is "false".</description>
	   <name>tooltip</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style class to apply to any message with a severity class of "WARN"</description>
	   <name>warnClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style class to apply to any message label with a severity class of "WARN"</description>
	   <name>warnLabelClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style class to apply any message marker with a severity class of "WARN"</description>
	   <name>warnMarkerClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  
	</tag>
<tag>
	  	  <description>The &amp;lt;rich:messages&amp;gt; component is similar to &amp;lt;rich:message&amp;gt; component but used for rendering all messages for the components.</description>
	  	  	  		  <name>messages</name>
	  	  <tag-class>org.richfaces.taglib.RichMessagesTag</tag-class>
	  <body-content>JSP</body-content>
	  
	    		  <attribute>
	   <description>Define, must be (or not) content of this component will be included in AJAX response created by parent AJAX Container, even if not forced by reRender list of ajax action.
            Ignored if component marked to output by some Ajax action component. The default value is "true".</description>
	   <name>ajaxRendered</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The attribute takes a value-binding expression for a component property of
a backing bean</description>
	   <name>binding</name>
	   	   	   					   	<deferred-value>
					<type>javax.faces.component.UIComponent</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style class to apply to any message with a severity class of "ERROR"</description>
	   <name>errorClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style class to apply to any message label with a severity class of "ERROR"</description>
	   <name>errorLabelClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style class to apply to any message marker with a severity class of "ERROR"</description>
	   <name>errorMarkerClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>CSS style class to apply to any message with a severity class of "FATAL"</description>
	   <name>fatalClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style class to apply to any message label with a severity class of "FATAL"</description>
	   <name>fatalLabelClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style class to apply to any message marker with a severity class of "FATAL"</description>
	   <name>fatalMarkerClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Client identifier of the component for which to display messages</description>
	   <name>for</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Flag indicating that only global messages (that is, messages not associated with any client identifier) are to be displayed. Default value is "false"</description>
	   <name>globalOnly</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Every component may have a unique id that is automatically created if omitted</description>
	   <name>id</name>
	   	   	   		<rtexprvalue>false</rtexprvalue>
	   		<type>java.lang.String</type>
	   	  </attribute>
		  		  <attribute>
	   <description>CSS style class to apply to any message with a severity class of "INFO"</description>
	   <name>infoClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style class to apply to any message label with a severity class of "INFO"</description>
	   <name>infoLabelClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style class to apply to any message marker with a severity class of "INFO"</description>
	   <name>infoMarkerClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>CSS style class to apply to label</description>
	   <name>labelClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The type of layout markup to use when rendering error messages.  Possible values are "table" (an HTML table), "list" (an HTML list) and iterator. If not specified, the default value is "list".</description>
	   <name>layout</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A comma-separated list of messages categories which should be displayed.  Default value is "ALL".</description>
	   <name>level</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style class to apply to marker</description>
	   <name>markerClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style(s) is/are to be applied to marker when this component is rendered</description>
	   <name>markerStyle</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>If "false", this component is not rendered</description>
	   <name>rendered</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>Flag indicating whether the detailed information of displayed messages should be included.  Default value is "false"</description>
	   <name>showDetail</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Flag indicating whether the summary portion of displayed
			messages should be included. Default value is "true"</description>
	   <name>showSummary</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The CSS style for message</description>
	   <name>style</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Space-separated list of CSS style class(es) to be applied when this element is rendered.  This value must be passed through as the "class" attribute on generated markup</description>
	   <name>styleClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Advisory title information about markup elements generated for this component</description>
	   <name>title</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Flag indicating whether the detail portion of the message should be displayed as a tooltip. Default value is "false".</description>
	   <name>tooltip</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>CSS style class to apply to any message with a severity class of "WARN"</description>
	   <name>warnClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style class to apply to any message label with a severity class of "WARN"</description>
	   <name>warnLabelClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style class to apply any message marker with a severity class of "WARN"</description>
	   <name>warnMarkerClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  
	</tag>
<tag>
	  	  <description>The &amp;lt;rich:modalPanel&amp;gt; component implements a modal dialog window. 
			All operations in the main application window are locked out while this window is active. Opening and closing the window is done through client JavaScript code.</description>
	  	  	  		  <name>modalPanel</name>
	  	  <tag-class>org.richfaces.taglib.ModalPanelTag</tag-class>
	  <body-content>JSP</body-content>
	  
	    		  <attribute>
	   <description>If "true" modalPanel should be autosizeable. Default value is "false".</description>
	   <name>autosized</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The attribute takes a value-binding expression for a component property of
a backing bean</description>
	   <name>binding</name>
	   	   	   					   	<deferred-value>
					<type>javax.faces.component.UIComponent</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style(s) is/are to be applied to component controls when this component
				is rendered</description>
	   <name>controlsClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  	  		  <attribute>
	   <description>Defines the DOM element, which stacking context will assimilate the modalPanel. Possible values: "body", "form", "parent". Default value is "body".</description>
	   <name>domElementAttachment</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>CSS style(s) is/are to be applied to component header when this component
				is rendered</description>
	   <name>headerClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Attribute defines height of component. Default value is "200".</description>
	   <name>height</name>
	   	   	   					   	<deferred-value>
					<type>int</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Every component may have a unique id that is automatically created if omitted</description>
	   <name>id</name>
	   	   	   		<rtexprvalue>false</rtexprvalue>
	   		<type>java.lang.String</type>
	   	  </attribute>
		  	  		  <attribute>
	   <description>If "true" modalPanel should save state after submission. Default value is "false".</description>
	   <name>keepVisualState</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A localized user presentable name for this component.</description>
	   <name>label</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Attribute defines X position of component left-top corner. Default value is "auto".</description>
	   <name>left</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  	  		  <attribute>
	   <description>Attribute defines min height of component. Default value is "10". If the value is less then 10, a "IllegalArgumentException" exception is thrown.</description>
	   <name>minHeight</name>
	   	   	   					   	<deferred-value>
					<type>int</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Attribute defines min width of component. Default value is "10".  If the value is less then 10, a "IllegalArgumentException" exception is thrown.</description>
	   <name>minWidth</name>
	   	   	   					   	<deferred-value>
					<type>int</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "true" there is possibility to move component. Default value is "true".</description>
	   <name>moveable</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called before the modal panel is hidden</description>
	   <name>onbeforehide</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called before the modal panel is opened</description>
	   <name>onbeforeshow</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called after the modal panel is hidden</description>
	   <name>onhide</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a left mouse button is clicked outside the modal panel</description>
	   <name>onmaskclick</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a right mouse button is clicked outside the modal panel</description>
	   <name>onmaskcontextmenu</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a left mouse button is double-clicked outside the modal panel</description>
	   <name>onmaskdblclick</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a mouse button is pressed down outside the modal panel</description>
	   <name>onmaskmousedown</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a pointer is moved outside the modal panel</description>
	   <name>onmaskmousemove</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a pointer is moved away from the modal panel</description>
	   <name>onmaskmouseout</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a pointer is moved onto the modal panel</description>
	   <name>onmaskmouseover</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a mouse button is released outside the modal panel</description>
	   <name>onmaskmouseup</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called before the modal panel is moved</description>
	   <name>onmove</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when the modal panel is resized</description>
	   <name>onresize</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when the modal panel is displayed</description>
	   <name>onshow</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "true" modalPanel creates iframe to overlap embed objects like PDF on a page. Default value is "false".</description>
	   <name>overlapEmbedObjects</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "false", this component is not rendered</description>
	   <name>rendered</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  	  	  		  <attribute>
	   <description>If "true" there is possibility to change component size. Default value is "true".</description>
	   <name>resizeable</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Pop-up shadow depth for suggestion content</description>
	   <name>shadowDepth</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML CSS class attribute of element for pop-up suggestion content</description>
	   <name>shadowOpacity</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>If "true" value for this attribute makes a modal panel opened as default. Default value is "false"</description>
	   <name>showWhenRendered</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style(s) is/are to be applied when this component is rendered</description>
	   <name>style</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Corresponds to the HTML class attribute</description>
	   <name>styleClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Attribute defines Y position of component left-top corner. Default value is "auto".</description>
	   <name>top</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>How to handle HTML SELECT-based controls in IE 6? - "disable" - default,
				handle as usual, use disabled="true" to hide SELECT controls - "hide" - use
				visibility="hidden" to hide SELECT controls</description>
	   <name>tridentIVEngineSelectBehavior</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Defines whether to trim or not elements inside modalPanel. Default value is "true"</description>
	   <name>trimOverlayedElements</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  	  	  	  	  	  	  	  		  <attribute>
	   <description>Defines options that were specified on the client side</description>
	   <name>visualOptions</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Attribute defines width of component. Default value is "300".</description>
	   <name>width</name>
	   	   	   					   	<deferred-value>
					<type>int</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Attribute is similar to the standard HTML attribute and can specify window. Default value is "100".
				placement relative to the content</description>
	   <name>zindex</name>
	   	   	   					   	<deferred-value>
					<type>int</type>
				</deferred-value>
				   	  </attribute>
		  	  
	</tag>
<tag>
	  	  	  		  <name>nodeSelectListener</name>
	  	  <tag-class>org.richfaces.taglib.NodeSelectListenerTag</tag-class>
	  <body-content>JSP</body-content>
	  
	    		  <attribute>
	   <description>The attribute takes a value-binding expression for a component property of
				a backing bean</description>
	   <name>binding</name>
	   	   	   					   	<deferred-value>
					<type>org.richfaces.nodeSelectListener</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The fully qualified Java class name for the listener</description>
	   <name>type</name>
	   	   	   		<rtexprvalue>false</rtexprvalue>
	   		<type>java.lang.String</type>
	   	  </attribute>
		  	  
	</tag>
<tag>
	  	  <description>The &amp;lt;rich:orderingList&amp;gt; is a component for ordering items in a list. This component provides possibilities to reorder a list and sort it on the client side.</description>
	  	  	  		  <name>orderingList</name>
	  	  <tag-class>org.richfaces.taglib.OrderingListTag</tag-class>
	  <body-content>JSP</body-content>
	  
	    		  <attribute>
	   <description>Stores active item</description>
	   <name>activeItem</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Defines row keys that are updated after an Ajax request</description>
	   <name>ajaxKeys</name>
	   	   	   					   	<deferred-value>
					<type>java.util.Set</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>The attribute takes a value-binding expression for a component property of
a backing bean</description>
	   <name>binding</name>
	   	   	   					   	<deferred-value>
					<type>javax.faces.component.UIComponent</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Defines a label for a 'Bottom' control</description>
	   <name>bottomControlLabel</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: alt for last button</description>
	   <name>bottomTitle</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Defines caption representation text</description>
	   <name>captionLabel</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS class for a column</description>
	   <name>columnClasses</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>It defines EL-binding  for a component state for saving or redefinition</description>
	   <name>componentState</name>
	   	   	   					   	<deferred-value>
					<type>org.ajax4jsf.model.DataComponentState</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Controls horizontal rendering. Possible values:
                "left" - controls should be rendered to the left side of a list.
                "right"- controls should be rendered to the right side of a list. Default value is "right".</description>
	   <name>controlsHorizontalAlign</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Defines type of a control: button or none. Default value is "button".</description>
	   <name>controlsType</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Controls vertical rendering. Possible values:
                "top" - controls should be rendered aligned to top side of a list.
                "bottom" - controls should be rendered aligned to bottom side of a list.
                "middle" - controls should be rendered centered relatively to a list. Default value is "middle"</description>
	   <name>controlsVerticalAlign</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Id of Converter to be used or reference to a Converter</description>
	   <name>converter</name>
	   	   	   					   	<deferred-value>
					<type>javax.faces.convert.Converter</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A ValueExpression enabled attribute that, if present,
			will be used as the text of the converter message,
			replacing any message that comes from the converter</description>
	   <name>converterMessage</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Defines a label for a 'Down' control</description>
	   <name>downControlLabel</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: alt for bottom button</description>
	   <name>downTitle</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>If "false", 'Top' and 'Bottom' controls aren't displayed. Default value is "true".</description>
	   <name>fastOrderControlsVisible</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  	  	  	  		  <attribute>
	   <description>Every component may have a unique id that is automatically created if omitted</description>
	   <name>id</name>
	   	   	   		<rtexprvalue>false</rtexprvalue>
	   		<type>java.lang.String</type>
	   	  </attribute>
		  		  <attribute>
	   <description>A flag indicating that this component value must be converted
            and validated immediately (that is, during Apply Request Values
            phase), rather than waiting until a Process Validations phase</description>
	   <name>immediate</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>A localized user presentable name for this component.</description>
	   <name>label</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Defines height of a list. Default value is "140".</description>
	   <name>listHeight</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Defines width of a list. Default value is "140".</description>
	   <name>listWidth</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  	  		  <attribute>
	   <description>HTML: script expression; a button "Bottom" is clicked</description>
	   <name>onbottomclick</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: a script expression; a pointer button is clicked</description>
	   <name>onclick</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: a script expression; a pointer button is double-clicked</description>
	   <name>ondblclick</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: script expression; a button "Down" is clicked</description>
	   <name>ondownclick</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: script expression; a header is clicked</description>
	   <name>onheaderclick</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: a script expression; a pointer is moved within</description>
	   <name>onmousemove</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: a script expression; a pointer is moved away</description>
	   <name>onmouseout</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: a script expression; a pointer is moved onto</description>
	   <name>onmouseover</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: script expression; before a order list is changed</description>
	   <name>onorderchange</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: script expression; a order list is changed</description>
	   <name>onorderchanged</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: script expression; a button "Top" is clicked</description>
	   <name>ontopclick</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: a script expression; a button "Up" is clicked</description>
	   <name>onupclick</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "false", 'Up' and 'Down' controls aren't displayed. Default value is "true".</description>
	   <name>orderControlsVisible</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "false", this component is not rendered</description>
	   <name>rendered</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "true", this component is checked for non-empty input</description>
	   <name>required</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A ValueExpression enabled attribute that, if present,
			will be used as the text of the validation message for
			the "required" facility, if the "required" facility is
			used</description>
	   <name>requiredMessage</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>CSS class for a row</description>
	   <name>rowClasses</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  	  	  	  		  <attribute>
	   <description>Converter for a row key object</description>
	   <name>rowKeyConverter</name>
	   	   	   					   	<deferred-value>
					<type>javax.faces.convert.Converter</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The attribute provides access to a row key in a Request scope</description>
	   <name>rowKeyVar</name>
	   	   	   		<rtexprvalue>false</rtexprvalue>
	   		<type>java.lang.String</type>
	   	  </attribute>
		  		  <attribute>
	   <description>A number of rows to display, or zero for all remaining rows in the list</description>
	   <name>rows</name>
	   	   	   					   	<deferred-value>
					<type>int</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Collection which stores a set of selected items</description>
	   <name>selection</name>
	   	   	   					   	<deferred-value>
					<type>java.util.Set</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "true", shows a label for a button. Default value is "true"</description>
	   <name>showButtonLabels</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>CSS style(s) is/are to be applied when this component is rendered</description>
	   <name>style</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Corresponds to the HTML class attribute</description>
	   <name>styleClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>Defines a label for a 'Top' control</description>
	   <name>topControlLabel</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: alt for first button</description>
	   <name>topTitle</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Defines a label for a 'Up' control</description>
	   <name>upControlLabel</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: alt for top button</description>
	   <name>upTitle</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>MethodBinding pointing at a method that is called during
            Process Validations phase of the request processing lifecycle,
            to validate the current value of this component</description>
	   <name>validator</name>
	   	   	   						<deferred-method>
					<method-signature>void validator(javax.faces.context.FacesContext, javax.faces.component.UIComponent, java.lang.Object)</method-signature>
				</deferred-method>
				   	  </attribute>
		  		  <attribute>
	   <description>A ValueExpression enabled attribute that, if present,
			will be used as the text of the validator message,
			replacing any message that comes from the validator</description>
	   <name>validatorMessage</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>Defines a List or Array of items to be shown in a list</description>
	   <name>value</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Listener for value changes</description>
	   <name>valueChangeListener</name>
	   	   	   						<deferred-method>
					<method-signature>void valueChangeListener(javax.faces.event.ValueChangeEvent)</method-signature>
				</deferred-method>
				   	  </attribute>
		  	  		  <attribute>
	   <description>Defines a list on the page</description>
	   <name>var</name>
	   	   	   		<rtexprvalue>false</rtexprvalue>
	   		<type>java.lang.String</type>
	   	  </attribute>
		  	  
	</tag>
<tag>
	  	  <description/>
	  	  	  		  <name>page</name>
	  	  <tag-class>org.richfaces.taglib.PageTag</tag-class>
	  <body-content>JSP</body-content>
	  
	    		  <attribute>
	   <description>The attribute takes a value-binding expression for a component property of
a backing bean</description>
	   <name>binding</name>
	   	   	   					   	<deferred-value>
					<type>javax.faces.component.UIComponent</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A name of CSS class for the body part of the page</description>
	   <name>bodyClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Set custom mime content type to response</description>
	   <name>contentType</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Direction indication for text that does not inherit
			directionality. Valid values are "LTR" (left-to-right)
			and "RTL" (right-to-left)</description>
	   <name>dir</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>A name of CSS class for the footer</description>
	   <name>footerClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A name of CSS class for the header</description>
	   <name>headerClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Every component may have a unique id that is automatically created if omitted</description>
	   <name>id</name>
	   	   	   		<rtexprvalue>false</rtexprvalue>
	   		<type>java.lang.String</type>
	   	  </attribute>
		  		  <attribute>
	   <description>Code describing the language used in the generated markup for this component</description>
	   <name>lang</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Page layout format ( html, xhtml, html-transitional, html-3.2 ) for encoding DOCTYPE, namespace and Content-Type definitions</description>
	   <name>markupType</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Set html element default namespace</description>
	   <name>namespace</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>JavaScript code to execute on a page load.</description>
	   <name>onload</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>JavaScript code to execute on a page unload.</description>
	   <name>onunload</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>String for output as a page title.</description>
	   <name>pageTitle</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "false", this component is not rendered</description>
	   <name>rendered</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A name of CSS class for the side panel</description>
	   <name>sidebarClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Defines the position of the side panel. Possible values are "left", "right". Default value is "left".</description>
	   <name>sidebarPosition</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Defines width for the side panel. Default value is "160".</description>
	   <name>sidebarWidth</name>
	   	   	   					   	<deferred-value>
					<type>int</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style(s) is/are to be applied when this component is rendered</description>
	   <name>style</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Corresponds to the HTML class attribute</description>
	   <name>styleClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Specifies the way of the component rendering</description>
	   <name>theme</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Advisory title information about markup elements generated for this component</description>
	   <name>title</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Sets the width of the page</description>
	   <name>width</name>
	   	   	   					   	<deferred-value>
					<type>int</type>
				</deferred-value>
				   	  </attribute>
		  	  
	</tag>
<tag>
	  	  <description>Create an image by paint in a managed bean, same as paint (Graphics g) in SWING components.
		 	It can be used as a cacheable or non-cacheable resource. With a cache support, a key is created in URI
		 	with a mix of size (width/height), paint method, format and data attributes.</description>
	  	  	  		  <name>paint2D</name>
	  	  <tag-class>org.richfaces.taglib.Paint2DTag</tag-class>
	  <body-content>JSP</body-content>
	  
	    		  <attribute>
	   <description>Deprecated. This attribute specifies the position of an IMG, OBJECT, or APPLET with respect to its context.           
           The possible values are "bottom", "middle", "top", "left" and "right". The default value is "middle".</description>
	   <name>align</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>For compability with XHTML 1.1 standart</description>
	   <name>alt</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Background color of painted image. Default value is 'transparent' which means no background fill. 
			Hex colors can be used, as well as common color names. 
			Invalid values are treated as transparent.
			Note, that JPEG format doesn't support transparency, and transparent background is painted black.
			Also note, that several browsers (e.g. IE6) do not support PNG transparency. Default value is &amp;quot;transparent&amp;quot;</description>
	   <name>bgcolor</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The attribute takes a value-binding expression for a component property of
a backing bean</description>
	   <name>binding</name>
	   	   	   					   	<deferred-value>
					<type>javax.faces.component.UIComponent</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Deprecated. This attribute specifies the width of an IMG or OBJECT border, in pixels. The default value for this attribute depends on the user agent</description>
	   <name>border</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Supported (or not) client/server caching for generated images.
			Caching on client supported by properly sending and processing of HTTP headers (Last-Modified, Expires, If-Modified-Since, etc.)
			Server-side caching is supported by application-scope object cache.
			For build of cache key use "value" attribute, serialized to URI</description>
	   <name>cacheable</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>Value calculated at render time and stored in Image URI (as part of cache Key), 
			at paint time passed to a paint method. It can be used for updating cache at change of image generating
			conditions, and for creating paint beans as "Lightweight" pattern components (request scope).
			IMPORTANT: Since serialized data stored in URI, avoid using big objects</description>
	   <name>data</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  	  	  		  <attribute>
	   <description>format Name of format for sending a generated image. It currently supports "jpeg" (24 bit, default), "gif" (8 bit with transparency), "png" (32 bit with transparency)</description>
	   <name>format</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Height in pixels of image (for paint canvas and HTML attribute). Default value is "10".</description>
	   <name>height</name>
	   	   	   					   	<deferred-value>
					<type>int</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Deprecated. This attribute specifies the amount of white space to be inserted to the left and right of an IMG, APPLET, or OBJECT. The default value is not specified, but is generally a small, non-zero length</description>
	   <name>hspace</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Every component may have a unique id that is automatically created if omitted</description>
	   <name>id</name>
	   	   	   		<rtexprvalue>false</rtexprvalue>
	   		<type>java.lang.String</type>
	   	  </attribute>
		  		  <attribute>
	   <description>Code describing the language used in the generated markup for this component</description>
	   <name>lang</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The method calls expression to paint Image on prepared Buffered image. It must have two parameters with a type of java.awt.Graphics2D (graphics to paint) and Object (restored from URI "data" property).
			For painting used 32-bit RGBA color model (for 8-bit images used Diffusion filtration before sending)</description>
	   <name>paint</name>
	   	   	   						<deferred-method>
					<method-signature>void paint(java.awt.Graphics2D,java.lang.Object)</method-signature>
				</deferred-method>
				   	  </attribute>
		  		  <attribute>
	   <description>If "false", this component is not rendered</description>
	   <name>rendered</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style(s) is/are to be applied when this component is rendered</description>
	   <name>style</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Corresponds to the HTML class attribute</description>
	   <name>styleClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Advisory title information about markup elements generated for this component</description>
	   <name>title</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The current value of this component</description>
	   <name>value</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Deprecated. This attribute specifies the amount of white space to be inserted above and below an IMG, APPLET, or OBJECT. The default value is not specified, but is generally a small, non-zero length</description>
	   <name>vspace</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Width in pixels of image (for paint canvas and HTML attribute). Default value is "10".</description>
	   <name>width</name>
	   	   	   					   	<deferred-value>
					<type>int</type>
				</deferred-value>
				   	  </attribute>
		  	  
	</tag>
<tag>
	  	  <description>A skinnable panel that is rendered as a bordered rectangle. The header is 
    added using a facet with the attribute, name="header".</description>
	  	  	  		  <name>panel</name>
	  	  <tag-class>org.richfaces.taglib.PanelTag</tag-class>
	  <body-content>JSP</body-content>
	  
	    		  <attribute>
	   <description>The attribute takes a value-binding expression for a component property of
a backing bean</description>
	   <name>binding</name>
	   	   	   					   	<deferred-value>
					<type>javax.faces.component.UIComponent</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A class that defines a style for a panel content</description>
	   <name>bodyClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>Label text appears on a panel header</description>
	   <name>header</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A class that defines a style for a panel header</description>
	   <name>headerClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Every component may have a unique id that is automatically created if omitted</description>
	   <name>id</name>
	   	   	   		<rtexprvalue>false</rtexprvalue>
	   		<type>java.lang.String</type>
	   	  </attribute>
		  		  <attribute>
	   <description>The clientside script method to be called when the element is clicked</description>
	   <name>onclick</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when the element is double-clicked</description>
	   <name>ondblclick</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a key is pressed down over the element</description>
	   <name>onkeydown</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a key is pressed over the element and released</description>
	   <name>onkeypress</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a key is released</description>
	   <name>onkeyup</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a mouse button is pressed down over the element</description>
	   <name>onmousedown</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a pointer is moved within the element</description>
	   <name>onmousemove</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a pointer is moved away from the element</description>
	   <name>onmouseout</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a pointer is moved onto the element</description>
	   <name>onmouseover</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a mouse button is released</description>
	   <name>onmouseup</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "false", this component is not rendered</description>
	   <name>rendered</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style(s) is/are to be applied when this component is rendered</description>
	   <name>style</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Corresponds to the HTML class attribute</description>
	   <name>styleClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  
	</tag>
<tag>
	  	  <description>A component with categories sliding up and down to reveal and hide items under selected
			categories (as used in Microsoft Outlook).</description>
	  	  	  		  <name>panelBar</name>
	  	  <tag-class>org.richfaces.taglib.PanelBarTag</tag-class>
	  <body-content>JSP</body-content>
	  
	    		  <attribute>
	   <description>The attribute takes a value-binding expression for a component property of
a backing bean</description>
	   <name>binding</name>
	   	   	   					   	<deferred-value>
					<type>javax.faces.component.UIComponent</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The component content style class</description>
	   <name>contentClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The component content style</description>
	   <name>contentStyle</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  	  	  		  <attribute>
	   <description>The component header style class</description>
	   <name>headerClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The component header style class active</description>
	   <name>headerClassActive</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The component header style</description>
	   <name>headerStyle</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The component header style active</description>
	   <name>headerStyleActive</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The height of the slide panel. Might be defined as pixels or as percentage.
	    		Default value is "100%".</description>
	   <name>height</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Every component may have a unique id that is automatically created if omitted</description>
	   <name>id</name>
	   	   	   		<rtexprvalue>false</rtexprvalue>
	   		<type>java.lang.String</type>
	   	  </attribute>
		  		  <attribute>
	   <description>A flag indicating that this component value must be converted
            and validated immediately (that is, during Apply Request Values
            phase), rather than waiting until a Process Validations phase</description>
	   <name>immediate</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  	  	  		  <attribute>
	   <description>HTML: script expression; before on the header is clicked</description>
	   <name>onclick</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: script expression; a item is changed</description>
	   <name>onitemchange</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: a script expression; a pointer is moved within</description>
	   <name>onmousemove</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: a script expression; a pointer is moved away</description>
	   <name>onmouseout</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: script expression; a pointer was moved onto.</description>
	   <name>onmouseover</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "false", this component is not rendered</description>
	   <name>rendered</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  	  	  		  <attribute>
	   <description>Attribure defines name of selected item</description>
	   <name>selectedPanel</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style(s) is/are to be applied when this component is rendered</description>
	   <name>style</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Corresponds to the HTML class attribute.</description>
	   <name>styleClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  	  	  	  	  		  <attribute>
	   <description>The current value of this component</description>
	   <name>value</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Listener for value changes</description>
	   <name>valueChangeListener</name>
	   	   	   						<deferred-method>
					<method-signature>void valueChangeListener(javax.faces.event.ValueChangeEvent)</method-signature>
				</deferred-method>
				   	  </attribute>
		  	  		  <attribute>
	   <description>The width of the slide panel. Might be defined as pixels or as percentage.
	    	Default value is "100%".</description>
	   <name>width</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  
	</tag>
<tag>
	  	  <description>A child component of a slide panel component</description>
	  	  	  		  <name>panelBarItem</name>
	  	  <tag-class>org.richfaces.taglib.PanelBarItemTag</tag-class>
	  <body-content>JSP</body-content>
	  
	    		  <attribute>
	   <description>The attribute takes a value-binding expression for a component property of
a backing bean</description>
	   <name>binding</name>
	   	   	   					   	<deferred-value>
					<type>javax.faces.component.UIComponent</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The component content style class</description>
	   <name>contentClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The component content style</description>
	   <name>contentStyle</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  	  		  <attribute>
	   <description>The component header style class</description>
	   <name>headerClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The component header style class active</description>
	   <name>headerClassActive</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The component header style</description>
	   <name>headerStyle</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The component header style active</description>
	   <name>headerStyleActive</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Every component may have a unique id that is automatically created if omitted</description>
	   <name>id</name>
	   	   	   		<rtexprvalue>false</rtexprvalue>
	   		<type>java.lang.String</type>
	   	  </attribute>
		  		  <attribute>
	   <description>Label text appears on a panel item header. Default value is "auto generated label"</description>
	   <name>label</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Attribute defines item name. Default value is "getId()".</description>
	   <name>name</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: a script expression; a item is entered</description>
	   <name>onenter</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: a script expression; a item is leaved</description>
	   <name>onleave</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>If "false", this component is not rendered</description>
	   <name>rendered</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  	  
	</tag>
<tag>
	  	  <description>Defines the menu on the page and the set of the child elements properties in
			layout.</description>
	  	  	  		  <name>panelMenu</name>
	  	  <tag-class>org.richfaces.taglib.PanelMenuTag</tag-class>
	  <body-content>JSP</body-content>
	  
	    		  <attribute>
	   <description>The attribute takes a value-binding expression for a component property of
a backing bean</description>
	   <name>binding</name>
	   	   	   					   	<deferred-value>
					<type>javax.faces.component.UIComponent</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Id of Converter to be used or reference to a Converter</description>
	   <name>converter</name>
	   	   	   					   	<deferred-value>
					<type>javax.faces.convert.Converter</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A ValueExpression enabled attribute that, if present,
			will be used as the text of the converter message,
			replacing any message that comes from the converter</description>
	   <name>converterMessage</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If true sets state of the item to disabled state. Default value is "false".</description>
	   <name>disabled</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Space-separated list of CSS style class(es) that are be applied to disabled group of this component</description>
	   <name>disabledGroupClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style(s) is/are to be applied to disabled group when this component is rendered</description>
	   <name>disabledGroupStyle</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Space-separated list of CSS style class(es) that are be applied to disabled item of this component</description>
	   <name>disabledItemClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style(s) is/are to be applied to disabled item when this component is rendered.</description>
	   <name>disabledItemStyle</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Defines the event on the representation element that triggers the
				submenu's expand/collapse. Default value is "onclick".</description>
	   <name>event</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Set the submission mode for all panel menu groups after expand/collapse
				except ones where this attribute redefined. Possible values are "ajax", "server", "none". 
				Default value is "none".</description>
	   <name>expandMode</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Whether only one panel menu node on top level can be opened at a time. If
				the value of this attribute is true, the previously opened node on the top level is
				closed. If the value is false, the node is left opened. Default value is "false".</description>
	   <name>expandSingle</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  	  	  		  <attribute>
	   <description>Space-separated list of CSS style class(es) that are be applied to group of this component</description>
	   <name>groupClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style(s) is/are to be applied to group when this component is rendered</description>
	   <name>groupStyle</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Space-separated list of CSS style class(es) that are be applied to hovered group of this component</description>
	   <name>hoveredGroupClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style(s) is/are to be applied to hovered group when this component is rendered</description>
	   <name>hoveredGroupStyle</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Space-separated list of CSS style class(es) that are be applied to hovered item of this component</description>
	   <name>hoveredItemClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style(s) is/are to be applied to hovered item when this component is rendered</description>
	   <name>hoveredItemStyle</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Path to the icon to be displayed for the collapsed Group state.
				You can also use predefined icons, setting the attribute to one of these possible values: "triangle", "triangleUp", "triangleDown", "disc", "chevron", "chevronUp", "chevronDown", "grid".
				Default value is "grid".</description>
	   <name>iconCollapsedGroup</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Path to the icon to be displayed for the collapsed top group state.\
				You can also use predefined icons, setting the attribute to one of these possible values: "triangle", "triangleUp", "triangleDown", "disc", "chevron", "chevronUp", "chevronDown", "grid".
				Default value is "grid".</description>
	   <name>iconCollapsedTopGroup</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Path to the icon to be displayed for the disabled group state.
				You can also use predefined icons, setting the attribute to one of these possible values: "triangle", "triangleUp", "triangleDown", "disc", "chevron", "chevronUp", "chevronDown", "grid".
				Default value is "grid".</description>
	   <name>iconDisabledGroup</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Path to the icon to be displayed for the disabled item state.
				You can also use predefined icons, setting the attribute to one of these possible values: "triangle", "triangleUp", "triangleDown", "disc", "chevron", "chevronUp", "chevronDown", "grid".
				Default value is "grid".</description>
	   <name>iconDisabledItem</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Path to the icon to be displayed for the expanded Group state.
				You can also use predefined icons, setting the attribute to one of these possible values: "triangle", "triangleUp", "triangleDown", "disc", "chevron", "chevronUp", "chevronDown", "grid".
				Default value is "grid".</description>
	   <name>iconExpandedGroup</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Path to the icon to be displayed for the expanded top group state.
				You can also use predefined icons, setting the attribute to one of these possible values: "triangle", "triangleUp", "triangleDown", "disc", "chevron", "chevronUp", "chevronDown", "grid".
				Default value is "grid".</description>
	   <name>iconExpandedTopGroup</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Position of the icon for the group icon. Possible values are "left","right","none". Default value is "left".</description>
	   <name>iconGroupPosition</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Position of the icon for the top group icon. Possible values are "left","right","none". Default value is "left".</description>
	   <name>iconGroupTopPosition</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Path to the icon to be displayed for the enabled item state.
				You can also use predefined icons, setting the attribute to one of these possible values: "triangle", "triangleUp", "triangleDown", "disc", "chevron", "chevronUp", "chevronDown", "grid".
				Default value is "grid".</description>
	   <name>iconItem</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Position of the icon for the item icon. Possible values are "left","right","none". Default value is "left".</description>
	   <name>iconItemPosition</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Position of the icon for the top item icon.
				Possible values are "left","right","none". Default value is "left".</description>
	   <name>iconItemTopPosition</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Path to the icon to be displayed for the disabled top Group state.
				You can also use predefined icons, setting the attribute to one of these possible values: "triangle", "triangleUp", "triangleDown", "disc", "chevron", "chevronUp", "chevronDown", "grid".
				Default value is "grid".</description>
	   <name>iconTopDisableGroup</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Path to the icon to be displayed for the disabled top item state.
				You can also use predefined icons, setting the attribute to one of these possible values: "triangle", "triangleUp", "triangleDown", "disc", "chevron", "chevronUp", "chevronDown", "grid".
				Default value is "grid".</description>
	   <name>iconTopDisabledItem</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Path to the icon to be displayed for the enabled top item state.
				You can also use predefined icons, setting the attribute to one of these possible values: "triangle", "triangleUp", "triangleDown", "disc", "chevron", "chevronUp", "chevronDown", "grid".
				Default value is "grid".</description>
	   <name>iconTopItem</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Every component may have a unique id that is automatically created if omitted</description>
	   <name>id</name>
	   	   	   		<rtexprvalue>false</rtexprvalue>
	   		<type>java.lang.String</type>
	   	  </attribute>
		  		  <attribute>
	   <description>A flag indicating that this component value must be converted
            and validated immediately (that is, during Apply Request Values
            phase), rather than waiting until a Process Validations phase</description>
	   <name>immediate</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Space-separated list of CSS style class(es) that are be applied to item of this component</description>
	   <name>itemClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style(s) is/are to be applied to item when this component is rendered.</description>
	   <name>itemStyle</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A localized user presentable name for this component.</description>
	   <name>label</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  	  		  <attribute>
	   <description>Set the submission mode for all panel menu items on the panel menu except
				ones where this attribute redefined. Possible values are "ajax", "server", "none". Default value is "server".</description>
	   <name>mode</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: a script expression; a pointer button is clicked</description>
	   <name>onclick</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: a script expression; a pointer button is double-clicked</description>
	   <name>ondblclick</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: script expression; some group was closed</description>
	   <name>ongroupcollapse</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: script expression; some group was activated</description>
	   <name>ongroupexpand</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: script expression; some item was hovered</description>
	   <name>onitemhover</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a key is pressed down over the element</description>
	   <name>onkeydown</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a key is pressed over the element and released</description>
	   <name>onkeypress</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a key is released</description>
	   <name>onkeyup</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a mouse button is pressed down over the element</description>
	   <name>onmousedown</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: script expression; a pointer was moved within.</description>
	   <name>onmousemove</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: script expression; a pointer was moved away.</description>
	   <name>onmouseout</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: script expression; a pointer was moved onto.</description>
	   <name>onmouseover</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a mouse button is released</description>
	   <name>onmouseup</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "false", this component is not rendered</description>
	   <name>rendered</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "true", this component is checked for non-empty input</description>
	   <name>required</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A ValueExpression enabled attribute that, if present,
			will be used as the text of the validation message for
			the "required" facility, if the "required" facility is
			used</description>
	   <name>requiredMessage</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>contain the name or the clientId of any of the item or group, the child
				defined in this attribute should be highlighted on PanelMenu rendering</description>
	   <name>selectedChild</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>The CSS style for the panel menu.</description>
	   <name>style</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The CSS class for the panel menu.</description>
	   <name>styleClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Space-separated list of CSS style class(es) that are be applied to top group of this component</description>
	   <name>topGroupClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style(s) is/are to be applied to top group when this component is rendered</description>
	   <name>topGroupStyle</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Space-separated list of CSS style class(es) that are be applied to top item of this component</description>
	   <name>topItemClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style(s) is/are to be applied to top item when this component is rendered</description>
	   <name>topItemStyle</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>MethodBinding pointing at a method that is called during
            Process Validations phase of the request processing lifecycle,
            to validate the current value of this component</description>
	   <name>validator</name>
	   	   	   						<deferred-method>
					<method-signature>void validator(javax.faces.context.FacesContext, javax.faces.component.UIComponent, java.lang.Object)</method-signature>
				</deferred-method>
				   	  </attribute>
		  		  <attribute>
	   <description>A ValueExpression enabled attribute that, if present,
			will be used as the text of the validator message,
			replacing any message that comes from the validator</description>
	   <name>validatorMessage</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>The current value of this component</description>
	   <name>value</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Listener for value changes</description>
	   <name>valueChangeListener</name>
	   	   	   						<deferred-method>
					<method-signature>void valueChangeListener(javax.faces.event.ValueChangeEvent)</method-signature>
				</deferred-method>
				   	  </attribute>
		  	  		  <attribute>
	   <description>Set minimal width for the menu. Default value is "100%".</description>
	   <name>width</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  
	</tag>
<tag>
	  	  <description>Defines expandable group of items inside the panel menu or other group.</description>
	  	  	  		  <name>panelMenuGroup</name>
	  	  <tag-class>org.richfaces.taglib.PanelMenuGroupTag</tag-class>
	  <body-content>JSP</body-content>
	  
	    		  <attribute>
	   <description>This attribute assigns an access key to an element. An access key is a single character from the document character set. Note: Authors should consider the input method of the expected reader when specifying an accesskey</description>
	   <name>accesskey</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>MethodBinding pointing at the application action to be invoked,
            if this UIComponent is activated by you, during the Apply
            Request Values or Invoke Application phase of the request
            processing lifecycle, depending on the value of the immediate
            property</description>
	   <name>action</name>
	   	   	   						<deferred-method>
					<method-signature>java.lang.Object action()</method-signature>
				</deferred-method>
				   	  </attribute>
		  	  		  <attribute>
	   <description>MethodBinding pointing at method accepting  an ActionEvent with return type void</description>
	   <name>actionListener</name>
	   	   	   						<deferred-method>
					<method-signature>void actionListener(javax.faces.event.ActionEvent)</method-signature>
				</deferred-method>
				   	  </attribute>
		  	  		  <attribute>
	   <description>boolean attribute which provides possibility to limit JSF tree processing(decoding, conversion/validation, value applying) 
to the component which send the request only</description>
	   <name>ajaxSingle</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Deprecated. This attribute specifies the horizontal alignment of its element with respect to the surrounding context. The  possible values are "left", "center", "right" and "justify".  
            The default depends on the base text direction. For left to right text, the default is align="left", while for right to left text, the default is align="right".</description>
	   <name>align</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>For a user agents that cannot display images, forms, or applets, this attribute specifies alternate text. The language of the alternate text is specified by the lang attribute</description>
	   <name>alt</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The attribute takes a value-binding expression for a component property of
a backing bean</description>
	   <name>binding</name>
	   	   	   					   	<deferred-value>
					<type>javax.faces.component.UIComponent</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "true", after process validations phase it skips updates of model beans on a force render response. It can be used for validating components input</description>
	   <name>bypassUpdates</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Id of Converter to be used or reference to a Converter</description>
	   <name>converter</name>
	   	   	   					   	<deferred-value>
					<type>javax.faces.convert.Converter</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A ValueExpression enabled attribute that, if present,
			will be used as the text of the converter message,
			replacing any message that comes from the converter</description>
	   <name>converterMessage</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Serialized (on default with JSON) data passed on the client by a developer on AJAX request. It's accessible via "data.foo" syntax</description>
	   <name>data</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>When set for a form control, this boolean attribute disables the control for your input</description>
	   <name>disabled</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Class to be applied to disabled items.</description>
	   <name>disabledClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style rules to be applied to disabled items.</description>
	   <name>disabledStyle</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Name of requests queue to avoid send next request before complete other from same event. Can be used to reduce number of requests of frequently events (key press, mouse move etc.)</description>
	   <name>eventsQueue</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Set the submission mode for all panel menu groups after expand/collapse
				except ones where this attribute redefined. Possible value are "ajax", "server", "none". Default value is "none".</description>
	   <name>expandMode</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If true group will be displayed expanded initially. Default value is "false".</description>
	   <name>expanded</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>id of element to set focus after request completed on client side</description>
	   <name>focus</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Class to be applied to hovered items.</description>
	   <name>hoverClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style rules to be applied to hovered items.</description>
	   <name>hoverStyle</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Class to be applied to icon element.</description>
	   <name>iconClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Path to the icon to be displayed for the collapsed item state.
				You can also use predefined icons, setting the attribute to one of these possible values: "triangle", "triangleUp", "triangleDown", "disc", "chevron", "chevronUp", "chevronDown", "grid".
				Default value is "grid".</description>
	   <name>iconCollapsed</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Path to the icon to be displayed for the disabled item state.</description>
	   <name>iconDisabled</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Path to the icon to be displayed for the expanded item state.
				You can also use predefined icons, setting the attribute to one of these possible values: "triangle", "triangleUp", "triangleDown", "disc", "chevron", "chevronUp", "chevronDown", "grid".
				Default value is "grid".</description>
	   <name>iconExpanded</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style rules to be applied</description>
	   <name>iconStyle</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Every component may have a unique id that is automatically created if omitted</description>
	   <name>id</name>
	   	   	   		<rtexprvalue>false</rtexprvalue>
	   		<type>java.lang.String</type>
	   	  </attribute>
		  		  <attribute>
	   <description>Attribute allows to ignore an Ajax Response produced by a request if the newest 'similar' request is
in a queue already. ignoreDupResponses="true" does not cancel the request while it is processed on the server,
but just allows to avoid unnecessary updates on the client side if the response isn't actual now</description>
	   <name>ignoreDupResponses</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>True means, that the default ActionListener should be executed
            immediately (i.e. during Apply Request Values phase of the
            request processing lifecycle), rather than waiting until the
            Invoke Application phase</description>
	   <name>immediate</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Displayed node's text</description>
	   <name>label</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "true", then of all AJAX-rendered on the page components only those will be updated, 
		which ID's are passed to the "reRender" attribute of the describable component. 
		"false"-the default value-means that all components with ajaxRendered="true" will be updated.</description>
	   <name>limitToList</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  	  	  		  <attribute>
	   <description>Specifies the maximum number of digits that could be entered into the input field. 
		The maximum number is unlimited by default. 
		If entered value exceeds the value specified in "maxValue" attribute than the slider takes a maximum value position.</description>
	   <name>maxlength</name>
	   	   	   					   	<deferred-value>
					<type>int</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Refers to group/item with the same
				name. Default value is "getId()".</description>
	   <name>name</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called before DOM is updated</description>
	   <name>onbeforedomupdate</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when the element loses the focus</description>
	   <name>onblur</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when the element value is changed</description>
	   <name>onchange</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The clientside script method to be called when the element is clicked</description>
	   <name>onclick</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: script expression; group was closed</description>
	   <name>oncollapse</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called after the request is completed</description>
	   <name>oncomplete</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when the element is double-clicked</description>
	   <name>ondblclick</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: script expression; group was opened</description>
	   <name>onexpand</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when the element gets the focus</description>
	   <name>onfocus</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a key is pressed down over the element</description>
	   <name>onkeydown</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a key is pressed over the element and released</description>
	   <name>onkeypress</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a key is released</description>
	   <name>onkeyup</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a mouse button is pressed down over the element</description>
	   <name>onmousedown</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a pointer is moved within the element</description>
	   <name>onmousemove</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a pointer is moved away from the element</description>
	   <name>onmouseout</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a pointer is moved onto the element</description>
	   <name>onmouseover</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a mouse button is released</description>
	   <name>onmouseup</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when some text is selected in the text field. This attribute can be used with the INPUT and TEXTAREA elements.</description>
	   <name>onselect</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Id['s] (in format of call  UIComponent.findComponent()) of components, processed at the phases 2-5 in case of AjaxRequest  caused by this component. Can be single id, comma-separated list of Id's, or EL Expression  with array or Collection</description>
	   <name>process</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Id['s] (in format of call  UIComponent.findComponent()) of components, rendered in case of AjaxRequest  caused by this component. Can be single id, comma-separated list of Id's, or EL Expression  with array or Collection</description>
	   <name>reRender</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "false", this component is not rendered</description>
	   <name>rendered</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Attribute defines the time (in ms.) that the request will be wait in the queue before it is ready to send.
When the delay time is over, the request will be sent to the server or removed if the newest 'similar' request is in a queue already</description>
	   <name>requestDelay</name>
	   	   	   					   	<deferred-value>
					<type>int</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "true", this component is checked for non-empty input</description>
	   <name>required</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A ValueExpression enabled attribute that, if present,
			will be used as the text of the validation message for
			the "required" facility, if the "required" facility is
			used</description>
	   <name>requiredMessage</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If there are any component requests with identical IDs then these requests will be grouped.</description>
	   <name>similarityGroupingId</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>This attribute tells the user agent the initial width of the control. The width is given in pixels except when type attribute has the value "text" or "password". In that case, its value refers to the (integer) number of characters</description>
	   <name>size</name>
	   	   	   					   	<deferred-value>
					<type>int</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>ID (in format of call UIComponent.findComponent()) of Request status component</description>
	   <name>status</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style(s) to be applied when this component is rendered.</description>
	   <name>style</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Corresponds to the HTML class attribute.</description>
	   <name>styleClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>This attribute specifies the position of the current element in the tabbing order for the current document. This value must be a number between 0 and 32767. User agents should ignore leading zeros</description>
	   <name>tabindex</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Target frame for action to execute.</description>
	   <name>target</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Response waiting time on a particular request. If a response is not received during this time, the request is aborted</description>
	   <name>timeout</name>
	   	   	   					   	<deferred-value>
					<type>int</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>MethodBinding pointing at a method that is called during
            Process Validations phase of the request processing lifecycle,
            to validate the current value of this component</description>
	   <name>validator</name>
	   	   	   						<deferred-method>
					<method-signature>void validator(javax.faces.context.FacesContext, javax.faces.component.UIComponent, java.lang.Object)</method-signature>
				</deferred-method>
				   	  </attribute>
		  		  <attribute>
	   <description>A ValueExpression enabled attribute that, if present,
			will be used as the text of the validator message,
			replacing any message that comes from the validator</description>
	   <name>validatorMessage</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>The current value for this component</description>
	   <name>value</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Listener for value changes</description>
	   <name>valueChangeListener</name>
	   	   	   						<deferred-method>
					<method-signature>void valueChangeListener(javax.faces.event.ValueChangeEvent)</method-signature>
				</deferred-method>
				   	  </attribute>
		  	  	  
	</tag>
<tag>
	  	  <description>Defines single Item inside popup list.</description>
	  	  	  		  <name>panelMenuItem</name>
	  	  <tag-class>org.richfaces.taglib.PanelMenuItemTag</tag-class>
	  <body-content>JSP</body-content>
	  
	    		  <attribute>
	   <description>MethodBinding pointing at the application action to be invoked,
            if this UIComponent is activated by you, during the Apply
            Request Values or Invoke Application phase of the request
            processing lifecycle, depending on the value of the immediate
            property</description>
	   <name>action</name>
	   	   	   						<deferred-method>
					<method-signature>java.lang.Object action()</method-signature>
				</deferred-method>
				   	  </attribute>
		  	  		  <attribute>
	   <description>MethodBinding pointing at method accepting  an ActionEvent with return type void</description>
	   <name>actionListener</name>
	   	   	   						<deferred-method>
					<method-signature>void actionListener(javax.faces.event.ActionEvent)</method-signature>
				</deferred-method>
				   	  </attribute>
		  	  	  		  <attribute>
	   <description>boolean attribute which provides possibility to limit JSF tree processing(decoding, conversion/validation, value applying) 
to the component which send the request only</description>
	   <name>ajaxSingle</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The attribute takes a value-binding expression for a component property of
a backing bean</description>
	   <name>binding</name>
	   	   	   					   	<deferred-value>
					<type>javax.faces.component.UIComponent</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "true", after process validations phase it skips updates of model beans on a force render response. It can be used for validating components input</description>
	   <name>bypassUpdates</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Serialized (on default with JSON) data passed on the client by a developer on AJAX request. It's accessible via "data.foo" syntax</description>
	   <name>data</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If true sets state of the item to disabled state. Default value is "false".</description>
	   <name>disabled</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Class to be applied to disabled items.</description>
	   <name>disabledClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style rules to be applied to disabled items.</description>
	   <name>disabledStyle</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Name of requests queue to avoid send next request before complete other from same event. Can be used to reduce number of requests of frequently events (key press, mouse move etc.)</description>
	   <name>eventsQueue</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>id of element to set focus after request completed on client side</description>
	   <name>focus</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Class to be applied to hovered items.</description>
	   <name>hoverClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style rules to be applied to hovered items.</description>
	   <name>hoverStyle</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Path to the icon or the default one name to be displayed for the enabled
				item state.
				You can also use predefined icons, setting the attribute to one of these possible values: "triangle", "triangleUp", "triangleDown", "disc", "chevron", "chevronUp", "chevronDown", "grid".
				Default value is "grid".</description>
	   <name>icon</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Class to be applied to icon element.</description>
	   <name>iconClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Path to the icon to be displayed for the disabled item state.
				You can also use predefined icons, setting the attribute to one of these possible values: "triangle", "triangleUp", "triangleDown", "disc", "chevron", "chevronUp", "chevronDown", "grid".
				Default value is "grid".</description>
	   <name>iconDisabled</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style rules to be applied</description>
	   <name>iconStyle</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Every component may have a unique id that is automatically created if omitted</description>
	   <name>id</name>
	   	   	   		<rtexprvalue>false</rtexprvalue>
	   		<type>java.lang.String</type>
	   	  </attribute>
		  		  <attribute>
	   <description>Attribute allows to ignore an Ajax Response produced by a request if the newest 'similar' request is
in a queue already. ignoreDupResponses="true" does not cancel the request while it is processed on the server,
but just allows to avoid unnecessary updates on the client side if the response isn't actual now</description>
	   <name>ignoreDupResponses</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>True means, that the default ActionListener should be executed
            immediately (i.e. during Apply Request Values phase of the
            request processing lifecycle), rather than waiting until the
            Invoke Application phase</description>
	   <name>immediate</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Defines representation text for menuItem.</description>
	   <name>label</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "true", then of all AJAX-rendered on the page components only those will be updated, 
		which ID's are passed to the "reRender" attribute of the describable component. 
		"false"-the default value-means that all components with ajaxRendered="true" will be updated.</description>
	   <name>limitToList</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Set the submission mode. 
				
				Possible values are "ajax", "server", "none". Default value is "none".</description>
	   <name>mode</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>'selectedChild' attribute of PanelMenu refers to group/item with the same
				name. Default value is "getId()".</description>
	   <name>name</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called before DOM is updated</description>
	   <name>onbeforedomupdate</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The clientside script method to be called when the element is clicked</description>
	   <name>onclick</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called after the request is completed</description>
	   <name>oncomplete</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when the element is double-clicked</description>
	   <name>ondblclick</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a key is pressed down over the element</description>
	   <name>onkeydown</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a key is pressed over the element and released</description>
	   <name>onkeypress</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a key is released</description>
	   <name>onkeyup</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a mouse button is pressed down over the element</description>
	   <name>onmousedown</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a pointer is moved within the element</description>
	   <name>onmousemove</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a pointer is moved away from the element</description>
	   <name>onmouseout</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a pointer is moved onto the element</description>
	   <name>onmouseover</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a mouse button is released</description>
	   <name>onmouseup</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Id['s] (in format of call  UIComponent.findComponent()) of components, processed at the phases 2-5 in case of AjaxRequest  caused by this component. Can be single id, comma-separated list of Id's, or EL Expression  with array or Collection</description>
	   <name>process</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Id['s] (in format of call  UIComponent.findComponent()) of components, rendered in case of AjaxRequest  caused by this component. Can be single id, comma-separated list of Id's, or EL Expression  with array or Collection</description>
	   <name>reRender</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "false", this component is not rendered</description>
	   <name>rendered</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Attribute defines the time (in ms.) that the request will be wait in the queue before it is ready to send.
When the delay time is over, the request will be sent to the server or removed if the newest 'similar' request is in a queue already</description>
	   <name>requestDelay</name>
	   	   	   					   	<deferred-value>
					<type>int</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If there are any component requests with identical IDs then these requests will be grouped.</description>
	   <name>similarityGroupingId</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>ID (in format of call UIComponent.findComponent()) of Request status component</description>
	   <name>status</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style(s) is/are to be applied when this component is rendered</description>
	   <name>style</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Corresponds to the HTML class attribute</description>
	   <name>styleClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Target frame for action to execute.</description>
	   <name>target</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Response waiting time on a particular request. If a response is not received during this time, the request is aborted</description>
	   <name>timeout</name>
	   	   	   					   	<deferred-value>
					<type>int</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The current value for this component</description>
	   <name>value</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  	  
	</tag>
<tag>
	  	  <description>The &amp;lt;rich:pickList&amp;gt; component is used for moving selected item(s) from one list into another.</description>
	  	  	  		  <name>pickList</name>
	  	  <tag-class>org.richfaces.taglib.PickListTag</tag-class>
	  <body-content>JSP</body-content>
	  
	    		  <attribute>
	   <description>The attribute takes a value-binding expression for a component property of
a backing bean</description>
	   <name>binding</name>
	   	   	   					   	<deferred-value>
					<type>javax.faces.component.UIComponent</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS class for a list</description>
	   <name>controlClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Id of Converter to be used or reference to a Converter</description>
	   <name>converter</name>
	   	   	   					   	<deferred-value>
					<type>javax.faces.convert.Converter</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A ValueExpression enabled attribute that, if present,
			will be used as the text of the converter message,
			replacing any message that comes from the converter</description>
	   <name>converterMessage</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Defines a label for a "Copy all" control</description>
	   <name>copyAllControlLabel</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: alt for a "Copy all" button</description>
	   <name>copyAllTitle</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "false", the 'Copy All' control will not be displayed. Even if this value is "true", the 'Copy All' control will not be displayed if the "fastMoveControlsVisible" attribute is "false". Default value is "true".</description>
	   <name>copyAllVisible</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Defines a label for a "Copy" control</description>
	   <name>copyControlLabel</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: alt for a "Copy" button</description>
	   <name>copyTitle</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "false", the 'Copy' control will not be displayed. Even if this value is "true", the 'Copy' control will not be displayed if the "moveControlsVisible" attribute is "false". Default value is "true".</description>
	   <name>copyVisible</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>If  "true", disable this component on page.</description>
	   <name>disabled</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style rules to be applied to disabled controls</description>
	   <name>disabledStyle</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The disabledStyleClass for disabled controls</description>
	   <name>disabledStyleClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style rules to be applied to enabled controls</description>
	   <name>enabledStyle</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The enabledStyleClass for enabled controls</description>
	   <name>enabledStyleClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>If "false", 'Copy All' and 'Remove All' controls aren't displayed. Even if this value is "true", the 'Copy All' and 'Remove All' controls will not be displayed if the "copyAllVisible" and "removeAllVisible" attribute values are "false". Default value is "true".</description>
	   <name>fastMoveControlsVisible</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Every component may have a unique id that is automatically created if omitted</description>
	   <name>id</name>
	   	   	   		<rtexprvalue>false</rtexprvalue>
	   		<type>java.lang.String</type>
	   	  </attribute>
		  		  <attribute>
	   <description>A flag indicating that this component value must be converted
            and validated immediately (that is, during Apply Request Values
            phase), rather than waiting until a Process Validations phase</description>
	   <name>immediate</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A localized user presentable name for this component.</description>
	   <name>label</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>CSS class for a list</description>
	   <name>listClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Defines height of the list. Default value is "140px"</description>
	   <name>listsHeight</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  	  		  <attribute>
	   <description>Customizes vertically a position of move/copy controls relatively to lists. Default value is "center".</description>
	   <name>moveControlsVerticalAlign</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "false", 'Copy' and 'Remove' controls aren't displayed. Even if this value is "true", the 'Copy' and 'Remove' controls will not be displayed if the "copyVisible" and "removeVisible" attribute values are "false". Default value is "true".</description>
	   <name>moveControlsVisible</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when the component loses the focus</description>
	   <name>onblur</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>The clientside script method to be called when the element is clicked</description>
	   <name>onclick</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when the element is double-clicked</description>
	   <name>ondblclick</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when the component gets the focus</description>
	   <name>onfocus</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a key is pressed down over the element</description>
	   <name>onkeydown</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a key is pressed over the element and released</description>
	   <name>onkeypress</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a key is released</description>
	   <name>onkeyup</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when the list is changed</description>
	   <name>onlistchange</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called before the list is changed</description>
	   <name>onlistchanged</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a mouse button is pressed down over the element</description>
	   <name>onmousedown</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a pointer is moved within the element</description>
	   <name>onmousemove</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a pointer is moved away from the element</description>
	   <name>onmouseout</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a pointer is moved onto the element</description>
	   <name>onmouseover</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a mouse button is released</description>
	   <name>onmouseup</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Defines a label for a "Remove all" control</description>
	   <name>removeAllControlLabel</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: alt for a "Remove" all button</description>
	   <name>removeAllTitle</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "false", the 'Remove All' control will not be displayed. Even if this value is "true", the 'Remove All' control will not be displayed if the "fastMoveControlsVisible" attribute is "false". Default value is "true".</description>
	   <name>removeAllVisible</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Defines a label for a "Remove" control</description>
	   <name>removeControlLabel</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: alt for a "Remove" button</description>
	   <name>removeTitle</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "false", the 'Remove' control will not be displayed. Even if this value is "true", the 'Remove' control will not be displayed if the "moveControlsVisible" attribute is "false". Default value is "true".</description>
	   <name>removeVisible</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "false", this component is not rendered</description>
	   <name>rendered</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "true", this component is checked for non-empty input</description>
	   <name>required</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A ValueExpression enabled attribute that, if present,
			will be used as the text of the validation message for
			the "required" facility, if the "required" facility is
			used</description>
	   <name>requiredMessage</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>Shows a label for a button. Default value is "true"</description>
	   <name>showButtonsLabel</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>Defines width of a source list. Default value is "140px"</description>
	   <name>sourceListWidth</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style(s) is/are to be applied when this component is rendered</description>
	   <name>style</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Corresponds to the HTML class attribute</description>
	   <name>styleClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "true", items can be moved between the lists by clicking on them. Default value is "false".</description>
	   <name>switchByClick</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "true", items can be moved between the lists by double-clicking on them. Default value is "true".</description>
	   <name>switchByDblClick</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Defines width of a target list. Default value is "140px"</description>
	   <name>targetListWidth</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Advisory title information about markup elements generated for this component</description>
	   <name>title</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>MethodBinding pointing at a method that is called during
            Process Validations phase of the request processing lifecycle,
            to validate the current value of this component</description>
	   <name>validator</name>
	   	   	   						<deferred-method>
					<method-signature>void validator(javax.faces.context.FacesContext, javax.faces.component.UIComponent, java.lang.Object)</method-signature>
				</deferred-method>
				   	  </attribute>
		  		  <attribute>
	   <description>A ValueExpression enabled attribute that, if present,
			will be used as the text of the validator message,
			replacing any message that comes from the validator</description>
	   <name>validatorMessage</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>The current value of this component</description>
	   <name>value</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Listener for value changes</description>
	   <name>valueChangeListener</name>
	   	   	   						<deferred-method>
					<method-signature>void valueChangeListener(javax.faces.event.ValueChangeEvent)</method-signature>
				</deferred-method>
				   	  </attribute>
		  	  	  
	</tag>
<tag>
	  	  <description>The &amp;lt;rich:progressBar&amp;gt; component is designed for displaying a progress bar which shows the current status of the process.</description>
	  	  	  		  <name>progressBar</name>
	  	  <tag-class>org.richfaces.taglib.ProgressBarTag</tag-class>
	  <body-content>JSP</body-content>
	  
	    	  	  		  <attribute>
	   <description>MethodBinding pointing at method accepting  an ActionEvent with return type void</description>
	   <name>actionListener</name>
	   	   	   						<deferred-method>
					<method-signature>void actionListener(javax.faces.event.ActionEvent)</method-signature>
				</deferred-method>
				   	  </attribute>
		  	  	  		  <attribute>
	   <description>boolean attribute which provides possibility to limit JSF tree processing(decoding, conversion/validation, value applying) 
to the component which send the request only</description>
	   <name>ajaxSingle</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The attribute takes a value-binding expression for a component property of
a backing bean</description>
	   <name>binding</name>
	   	   	   					   	<deferred-value>
					<type>javax.faces.component.UIComponent</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "true", after process validations phase it skips updates of model beans on a force render response. It can be used for validating components input</description>
	   <name>bypassUpdates</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS class that defines style for progress line rendering</description>
	   <name>completeClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Serialized (on default with JSON) data passed on the client by a developer on AJAX request. It's accessible via "data.foo" syntax</description>
	   <name>data</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>Enables/disables polling. Default value is "true".</description>
	   <name>enabled</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Name of requests queue to avoid send next request before complete other from same event. Can be used to reduce number of requests of frequently events (key press, mouse move etc.)</description>
	   <name>eventsQueue</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>CSS class that defines style for complete state of the component</description>
	   <name>finishClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>id of element to set focus after request completed on client side</description>
	   <name>focus</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Every component may have a unique id that is automatically created if omitted</description>
	   <name>id</name>
	   	   	   		<rtexprvalue>false</rtexprvalue>
	   		<type>java.lang.String</type>
	   	  </attribute>
		  		  <attribute>
	   <description>Attribute allows to ignore an Ajax Response produced by a request if the newest 'similar' request is
in a queue already. ignoreDupResponses="true" does not cancel the request while it is processed on the server,
but just allows to avoid unnecessary updates on the client side if the response isn't actual now</description>
	   <name>ignoreDupResponses</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>True means, that the default ActionListener should be executed
            immediately (i.e. during Apply Request Values phase of the
            request processing lifecycle), rather than waiting until the
            Invoke Application phase</description>
	   <name>immediate</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS class that defines style for initial state of the component</description>
	   <name>initialClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Interval (in ms) for call poll requests. Default value
				1000 ms (1 sec)</description>
	   <name>interval</name>
	   	   	   					   	<deferred-value>
					<type>int</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Attribute defines a simple label instead of rendering children component</description>
	   <name>label</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "true", then of all AJAX-rendered on the page components only those will be updated, 
		which ID's are passed to the "reRender" attribute of the describable component. 
		"false"-the default value-means that all components with ajaxRendered="true" will be updated.</description>
	   <name>limitToList</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Max value, after which complete state should be rendered. Default value is "100".</description>
	   <name>maxValue</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Min value when initial state should be rendered. Default value is "0".</description>
	   <name>minValue</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Attributes defines AJAX or CLIENT modes for component. Possible values are "ajax", "client". Default value is "ajax".</description>
	   <name>mode</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called before DOM is updated</description>
	   <name>onbeforedomupdate</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The clientside script method to be called when the element is clicked</description>
	   <name>onclick</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called after the request is completed</description>
	   <name>oncomplete</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when the element is double-clicked</description>
	   <name>ondblclick</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  	  	  		  <attribute>
	   <description>The client side script method to be called when a mouse button is pressed down over the element</description>
	   <name>onmousedown</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a pointer is moved within the element</description>
	   <name>onmousemove</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a pointer is moved away from the element</description>
	   <name>onmouseout</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a pointer is moved onto the element</description>
	   <name>onmouseover</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a mouse button is released</description>
	   <name>onmouseup</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>JavaScript code for call before submission of ajax
				event</description>
	   <name>onsubmit</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Parameters for macrosubstitution in the label</description>
	   <name>parameters</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Id['s] (in format of call  UIComponent.findComponent()) of components, processed at the phases 2-5 in case of AjaxRequest  caused by this component. Can be single id, comma-separated list of Id's, or EL Expression  with array or Collection</description>
	   <name>process</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>DEPRECATED. Provides access to value of the component on the client</description>
	   <name>progressVar</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Id['s] (in format of call  UIComponent.findComponent()) of components, rendered in case of AjaxRequest  caused by this component. Can be single id, comma-separated list of Id's, or EL Expression  with array or Collection</description>
	   <name>reRender</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Set of componets to rerender after completion</description>
	   <name>reRenderAfterComplete</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS class that defines style for remained part of progress bar</description>
	   <name>remainClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "false", this component is not rendered</description>
	   <name>rendered</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>If there are any component requests with identical IDs then these requests will be grouped.</description>
	   <name>similarityGroupingId</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>ID (in format of call UIComponent.findComponent()) of Request status component</description>
	   <name>status</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style(s) is/are to be applied when this component is rendered</description>
	   <name>style</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS class that defines style for progress bar</description>
	   <name>styleClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>Response waiting time on a particular request. If a response is not received during this time, the request is aborted</description>
	   <name>timeout</name>
	   	   	   					   	<deferred-value>
					<type>int</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Advisory title information about markup elements generated for this component</description>
	   <name>title</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Sets the current value of the progress</description>
	   <name>value</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  	  
	</tag>
<tag>
	  	  <description>The &amp;lt;rich:recursiveTreeNodesAdaptor&amp;gt; is an extension of a &amp;lt;rich:treeNodesAdaptor&amp;gt; component that provides the possibility to define data models and process nodes recursively.</description>
	  	  	  		  <name>recursiveTreeNodesAdaptor</name>
	  	  <tag-class>org.richfaces.taglib.RecursiveTreeNodesAdaptorTag</tag-class>
	  <body-content>JSP</body-content>
	  
	    		  <attribute>
	   <description>The attribute takes a value-binding expression for a component property of
a backing bean</description>
	   <name>binding</name>
	   	   	   					   	<deferred-value>
					<type>javax.faces.component.UIComponent</type>
				</deferred-value>
				   	  </attribute>
		  	  	  		  <attribute>
	   <description>Every component may have a unique id that is automatically created if omitted</description>
	   <name>id</name>
	   	   	   		<rtexprvalue>false</rtexprvalue>
	   		<type>java.lang.String</type>
	   	  </attribute>
		  		  <attribute>
	   <description>This boolean expression is used to define which elements of both collections are processed. Default value is "true".</description>
	   <name>included</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>This boolean expression is used to define which elements are processed. Default value is "true".</description>
	   <name>includedNode</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>This boolean expression is used to define which elements are processed applying to "roots" collection. Default value is "true".</description>
	   <name>includedRoot</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Defines collection to use at the other (non-top) levels of iteration</description>
	   <name>nodes</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The attribute is used to control a recursion order. Possible values are "first", "last", "[id of adaptor]" ("first" and "last" are reserved values). When "[id of the adaptor]" is set it means that recursion occurs after these adaptor component nodes are processed. The default value is "last"</description>
	   <name>recursionOrder</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "false", this component is not rendered</description>
	   <name>rendered</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Defines collection to use at the top of iteration</description>
	   <name>roots</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>A request-scope attribute via which the data object for the current collection element will be used when iterating</description>
	   <name>var</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  
	</tag>
<tag>
	  	  <description>The &amp;lt;rich:scrollableDataTable&amp;gt; component is used for the table-like component creation. 
   			The component just adds the set of additional features described below in comparison with the standard table.</description>
	  	  	  		  <name>scrollableDataTable</name>
	  	  <tag-class>org.richfaces.taglib.ScrollableDataTableTag</tag-class>
	  <body-content>JSP</body-content>
	  
	    		  <attribute>
	   <description>A CSS class to be applied to an active row</description>
	   <name>activeClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Request scope attribute under which the activeRowKey will be accessible</description>
	   <name>activeRowKey</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>This attribute defines row keys that are updated after an AJAX request</description>
	   <name>ajaxKeys</name>
	   	   	   					   	<deferred-value>
					<type>java.util.Set</type>
				</deferred-value>
				   	  </attribute>
		  	  	  		  <attribute>
	   <description>The attribute takes a value-binding expression for a component property of
a backing bean</description>
	   <name>binding</name>
	   	   	   					   	<deferred-value>
					<type>javax.faces.component.UIComponent</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "true", after process validations phase it skips updates of model beans on a force render response. It can be used for validating components input</description>
	   <name>bypassUpdates</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>Comma-delimited list of CSS style classes that are be applied to the columns of this table. A space separated list of classes may also be specified for any individual column. If the number of elements in this list is less than the number of columns specified in the "columns" attribute, no "class" attribute is output for each column greater than the number of elements in the list. If the number of elements in the list is greater than the number of columns specified in the "columns" attribute, the elements at the position in the list after the value of the "columns" attribute are ignored</description>
	   <name>columnClasses</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>It defines EL-binding  for a component state for saving or redefinition</description>
	   <name>componentState</name>
	   	   	   					   	<deferred-value>
					<type>org.ajax4jsf.model.DataComponentState</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Serialized (on default with JSON) data passed on the client by a developer on AJAX request. It's accessible via "data.foo" syntax</description>
	   <name>data</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Name of requests queue to avoid send next request before complete other from same event. Can be used to reduce number of requests of frequently events (key press, mouse move etc.)</description>
	   <name>eventsQueue</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>A zero-relative row number of the first row to display</description>
	   <name>first</name>
	   	   	   					   	<deferred-value>
					<type>int</type>
				</deferred-value>
				   	  </attribute>
		  	  	  		  <attribute>
	   <description>Space-separated list of CSS style class(es) that are be applied to any footer generated for this table</description>
	   <name>footerClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Defines the number of the fixed columns from the left side that will not be scrolled via horizontal scroll.
			Default value is "0".</description>
	   <name>frozenColCount</name>
	   	   	   					   	<deferred-value>
					<type>int</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>Space-separated list of CSS style class(es) that are be applied to any header generated for this table</description>
	   <name>headerClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Defines a height of the component. Default value is "500px".</description>
	   <name>height</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "true" data will be hidden during scrolling. Can be used for increase performance.
			Default value is "false".</description>
	   <name>hideWhenScrolling</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Every component may have a unique id that is automatically created if omitted</description>
	   <name>id</name>
	   	   	   		<rtexprvalue>false</rtexprvalue>
	   		<type>java.lang.String</type>
	   	  </attribute>
		  		  <attribute>
	   <description>Attribute allows to ignore an Ajax Response produced by a request if the newest 'similar' request is
in a queue already. ignoreDupResponses="true" does not cancel the request while it is processed on the server,
but just allows to avoid unnecessary updates on the client side if the response isn't actual now</description>
	   <name>ignoreDupResponses</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>HTML: a script expression; a pointer button is clicked on row</description>
	   <name>onRowClick</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: a script expression; a pointer button is double-clicked on row</description>
	   <name>onRowDblClick</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: script expression; a pointer button is pressed down on row</description>
	   <name>onRowMouseDown</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: script expression; a pointer button is released on row</description>
	   <name>onRowMouseUp</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  	  		  <attribute>
	   <description>HTML: script expression to invoke on changing of rows selection</description>
	   <name>onselectionchange</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>Id['s] (in format of call  UIComponent.findComponent()) of components, rendered in case of AjaxRequest  caused by this component. Can be single id, comma-separated list of Id's, or EL Expression  with array or Collection</description>
	   <name>reRender</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "false", this component is not rendered</description>
	   <name>rendered</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Attribute defines the time (in ms.) that the request will be wait in the queue before it is ready to send.
When the delay time is over, the request will be sent to the server or removed if the newest 'similar' request is in a queue already</description>
	   <name>requestDelay</name>
	   	   	   					   	<deferred-value>
					<type>int</type>
				</deferred-value>
				   	  </attribute>
		  	  	  		  <attribute>
	   <description>A comma-delimited list of CSS style classes that is applied to popup table rows. A space separated list of classes may also be specified for any individual row. The styles are applied, in turn, to each row in the table. For example, if the list has two elements, the first style class in the list is applied to the first row, the second to the second row, the first to the third row, the second to the fourth row, etc. In other words, we keep iterating through the list until we reach the end, and then we start at the beginning again</description>
	   <name>rowClasses</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  	  	  	  		  <attribute>
	   <description>Converter for a row key object</description>
	   <name>rowKeyConverter</name>
	   	   	   					   	<deferred-value>
					<type>javax.faces.convert.Converter</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The attribute provides access to a row key in a Request scope</description>
	   <name>rowKeyVar</name>
	   	   	   		<rtexprvalue>false</rtexprvalue>
	   		<type>java.lang.String</type>
	   	  </attribute>
		  		  <attribute>
	   <description>A number of rows to display, or zero for all remaining
            rows in the table</description>
	   <name>rows</name>
	   	   	   					   	<deferred-value>
					<type>int</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Name of JavaScript variable corresponding to component</description>
	   <name>scriptVar</name>
	   	   	   		<rtexprvalue>false</rtexprvalue>
	   		<type>java.lang.String</type>
	   	  </attribute>
		  	  		  <attribute>
	   <description>Name of the CSS class for a selected row</description>
	   <name>selectedClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Value binding representing selected rows</description>
	   <name>selection</name>
	   	   	   					   	<deferred-value>
					<type>org.richfaces.model.selection.Selection</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>SelectionMode is an enumeration of the possible selection modes. Default value is "multi"</description>
	   <name>selectionMode</name>
	   	   	   					   	<deferred-value>
					<type>org.richfaces.model.SelectionMode</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If there are any component requests with identical IDs then these requests will be grouped.</description>
	   <name>similarityGroupingId</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>Defines mode of sorting. Possible values are 'single' for sorting of one column and 'multi' for some.</description>
	   <name>sortMode</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>ValueBinding pointing at a property of a class to manage rows sorting</description>
	   <name>sortOrder</name>
	   	   	   					   	<deferred-value>
					<type>org.richfaces.model.SortOrder</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The attribute  provides access to a component state on the client side</description>
	   <name>stateVar</name>
	   	   	   		<rtexprvalue>false</rtexprvalue>
	   		<type>java.lang.String</type>
	   	  </attribute>
		  		  <attribute>
	   <description>ID (in format of call UIComponent.findComponent()) of Request status component</description>
	   <name>status</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style(s) is/are to be applied when this component is rendered</description>
	   <name>style</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Corresponds to the HTML class attribute</description>
	   <name>styleClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Response waiting time on a particular request. If a response is not received during this time, the request is aborted</description>
	   <name>timeout</name>
	   	   	   					   	<deferred-value>
					<type>int</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The current value for this component</description>
	   <name>value</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A request-scope attribute via which the data object for the
            current row will be used when iterating</description>
	   <name>var</name>
	   	   	   		<rtexprvalue>false</rtexprvalue>
	   		<type>java.lang.String</type>
	   	  </attribute>
		  		  <attribute>
	   <description>Defines a width of the component. Default value is "700px".</description>
	   <name>width</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  
	</tag>
<tag>
	  	  <description>A horizontal line to use as a separator in a layout. 
			The line type can be customized with the lineType parameter.</description>
	  	  	  		  <name>separator</name>
	  	  <tag-class>org.richfaces.taglib.SeparatorTag</tag-class>
	  <body-content>JSP</body-content>
	  
	    		  <attribute>
	   <description>This attribute specifies a position of the separator according to the document. The possible values are  "left", "center" and "right". Default value is "left".</description>
	   <name>align</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The attribute takes a value-binding expression for a component property of
a backing bean</description>
	   <name>binding</name>
	   	   	   					   	<deferred-value>
					<type>javax.faces.component.UIComponent</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>The separator height. Default value is "6px".</description>
	   <name>height</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Every component may have a unique id that is automatically created if omitted</description>
	   <name>id</name>
	   	   	   		<rtexprvalue>false</rtexprvalue>
	   		<type>java.lang.String</type>
	   	  </attribute>
		  		  <attribute>
	   <description>A line type. The possible values are
	    		"beveled", "dotted", "dashed", "double", "solid" and "none".
	    		Default value is "beveled"</description>
	   <name>lineType</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The clientside script method to be called when the element is clicked</description>
	   <name>onclick</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when the element is double-clicked</description>
	   <name>ondblclick</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a key is pressed down over the element</description>
	   <name>onkeydown</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a key is pressed over the element and released</description>
	   <name>onkeypress</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a key is released</description>
	   <name>onkeyup</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a mouse button is pressed down over the element</description>
	   <name>onmousedown</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a pointer is moved within the element</description>
	   <name>onmousemove</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a pointer is moved away from the element</description>
	   <name>onmouseout</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a pointer is moved onto the element</description>
	   <name>onmouseover</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a mouse button is released</description>
	   <name>onmouseup</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "false", this component is not rendered</description>
	   <name>rendered</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style(s) is/are to be applied when this component is rendered</description>
	   <name>style</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Corresponds to the HTML class attribute</description>
	   <name>styleClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: An advisory title for this element.  Often displayed as a tooltip</description>
	   <name>title</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The separator width that can be defined in pixels or in percents. Default value is "100%".</description>
	   <name>width</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  
	</tag>
<tag>
	  	  <description>Wrapper component with named facets. Every facet will be shown after activation
            corresponding toggleControl(the other will be hidden).</description>
	  	  	  		  <name>simpleTogglePanel</name>
	  	  <tag-class>org.richfaces.taglib.SimpleTogglePanelTag</tag-class>
	  <body-content>JSP</body-content>
	  
	    		  <attribute>
	   <description>MethodBinding pointing at the application action to be invoked,
            if this UIComponent is activated by you, during the Apply
            Request Values or Invoke Application phase of the request
            processing lifecycle, depending on the value of the immediate
            property</description>
	   <name>action</name>
	   	   	   						<deferred-method>
					<method-signature>java.lang.Object action()</method-signature>
				</deferred-method>
				   	  </attribute>
		  	  		  <attribute>
	   <description>MethodBinding pointing at method accepting  an ActionEvent with return type void</description>
	   <name>actionListener</name>
	   	   	   						<deferred-method>
					<method-signature>void actionListener(javax.faces.event.ActionEvent)</method-signature>
				</deferred-method>
				   	  </attribute>
		  	  	  		  <attribute>
	   <description>boolean attribute which provides possibility to limit JSF tree processing(decoding, conversion/validation, value applying) 
to the component which send the request only</description>
	   <name>ajaxSingle</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The attribute takes a value-binding expression for a component property of
a backing bean</description>
	   <name>binding</name>
	   	   	   					   	<deferred-value>
					<type>javax.faces.component.UIComponent</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A class that defines a style for a panel content</description>
	   <name>bodyClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "true", after process validations phase it skips updates of model beans on a force render response. It can be used for validating components input</description>
	   <name>bypassUpdates</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Serialized (on default with JSON) data passed on the client by a developer on AJAX request. It's accessible via "data.foo" syntax</description>
	   <name>data</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Name of requests queue to avoid send next request before complete other from same event. Can be used to reduce number of requests of frequently events (key press, mouse move etc.)</description>
	   <name>eventsQueue</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>id of element to set focus after request completed on client side</description>
	   <name>focus</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Class that defines the style for panel header</description>
	   <name>headerClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Height of a simple toggle panel content area might be defined as pixels or in percents.
	    		By default height is not defined</description>
	   <name>height</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Every component may have a unique id that is automatically created if omitted</description>
	   <name>id</name>
	   	   	   		<rtexprvalue>false</rtexprvalue>
	   		<type>java.lang.String</type>
	   	  </attribute>
		  		  <attribute>
	   <description>Attribute allows to ignore an Ajax Response produced by a request if the newest 'similar' request is
in a queue already. ignoreDupResponses="true" does not cancel the request while it is processed on the server,
but just allows to avoid unnecessary updates on the client side if the response isn't actual now</description>
	   <name>ignoreDupResponses</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>True means, that the default ActionListener should be executed
            immediately (i.e. during Apply Request Values phase of the
            request processing lifecycle), rather than waiting until the
            Invoke Application phase</description>
	   <name>immediate</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>Marker to be rendered on a panel header</description>
	   <name>label</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "true", then of all AJAX-rendered on the page components only those will be updated, 
		which ID's are passed to the "reRender" attribute of the describable component. 
		"false"-the default value-means that all components with ajaxRendered="true" will be updated.</description>
	   <name>limitToList</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called before DOM is updated</description>
	   <name>onbeforedomupdate</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The clientside script method to be called when the element is clicked</description>
	   <name>onclick</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: script expression; before a panel is collapsed</description>
	   <name>oncollapse</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called after the request is completed</description>
	   <name>oncomplete</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when the element is double-clicked</description>
	   <name>ondblclick</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: script expression; before a panel is expanded</description>
	   <name>onexpand</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a key is pressed down over the element</description>
	   <name>onkeydown</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a key is pressed over the element and released</description>
	   <name>onkeypress</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a key is released</description>
	   <name>onkeyup</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a mouse button is pressed down over the element</description>
	   <name>onmousedown</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a pointer is moved within the element</description>
	   <name>onmousemove</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a pointer is moved away from the element</description>
	   <name>onmouseout</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a pointer is moved onto the element</description>
	   <name>onmouseover</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a mouse button is released</description>
	   <name>onmouseup</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A "false" value for this attribute makes the panel closed by default. Default value is "true".</description>
	   <name>opened</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Id['s] (in format of call  UIComponent.findComponent()) of components, processed at the phases 2-5 in case of AjaxRequest  caused by this component. Can be single id, comma-separated list of Id's, or EL Expression  with array or Collection</description>
	   <name>process</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Id['s] (in format of call  UIComponent.findComponent()) of components, rendered in case of AjaxRequest  caused by this component. Can be single id, comma-separated list of Id's, or EL Expression  with array or Collection</description>
	   <name>reRender</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "false", this component is not rendered</description>
	   <name>rendered</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Attribute defines the time (in ms.) that the request will be wait in the queue before it is ready to send.
When the delay time is over, the request will be sent to the server or removed if the newest 'similar' request is in a queue already</description>
	   <name>requestDelay</name>
	   	   	   					   	<deferred-value>
					<type>int</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If there are any component requests with identical IDs then these requests will be grouped.</description>
	   <name>similarityGroupingId</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>ID (in format of call UIComponent.findComponent()) of Request status component</description>
	   <name>status</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style(s) is/are to be applied when this component is rendered</description>
	   <name>style</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Corresponds to the HTML class attribute</description>
	   <name>styleClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Panels switch mode: "client", "server"(default), "ajax"</description>
	   <name>switchType</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Response waiting time on a particular request. If a response is not received during this time, the request is aborted</description>
	   <name>timeout</name>
	   	   	   					   	<deferred-value>
					<type>int</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The current value for this component</description>
	   <name>value</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Width of a simple toggle panel might be defined as pixels or in percents.
	    	By default width is not defined</description>
	   <name>width</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  
	</tag>
<tag>
	  	  <description>A spacer to use in layout. It is rendered as a transparent image. The size is set up 
			with width and height attributes. By default it is displayed as an inline element (i.e. word spacer). 
			By using style='display:block' can be used as a line spacer.</description>
	  	  	  		  <name>spacer</name>
	  	  <tag-class>org.richfaces.taglib.SpacerTag</tag-class>
	  <body-content>JSP</body-content>
	  
	    		  <attribute>
	   <description>The attribute takes a value-binding expression for a component property of
a backing bean</description>
	   <name>binding</name>
	   	   	   					   	<deferred-value>
					<type>javax.faces.component.UIComponent</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>The height of the spacer defined in pixels. Default value is "1px".</description>
	   <name>height</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Every component may have a unique id that is automatically created if omitted</description>
	   <name>id</name>
	   	   	   		<rtexprvalue>false</rtexprvalue>
	   		<type>java.lang.String</type>
	   	  </attribute>
		  		  <attribute>
	   <description>The clientside script method to be called when the element is clicked</description>
	   <name>onclick</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when the element is double-clicked</description>
	   <name>ondblclick</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a key is pressed down over the element</description>
	   <name>onkeydown</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a key is pressed over the element and released</description>
	   <name>onkeypress</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a key is released</description>
	   <name>onkeyup</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a mouse button is pressed down over the element</description>
	   <name>onmousedown</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a pointer is moved within the element</description>
	   <name>onmousemove</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a pointer is moved away from the element</description>
	   <name>onmouseout</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a pointer is moved onto the element</description>
	   <name>onmouseover</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a mouse button is released</description>
	   <name>onmouseup</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "false", this component is not rendered</description>
	   <name>rendered</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style(s) is/are to be applied when this component is rendered</description>
	   <name>style</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Corresponds to the HTML class attribute</description>
	   <name>styleClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: An advisory title for this element. Often used by the user agent as a tooltip</description>
	   <name>title</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The width of the spacer defined in pixels. Default value is "1px".</description>
	   <name>width</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  
	</tag>
<tag>
	  	  <description>The &amp;lt;rich:subTable&amp;gt; component is used for inserting subtables into tables with opportunity to choose data from a model and built-in Ajax updates support.</description>
	  	  	  		  <name>subTable</name>
	  	  <tag-class>org.richfaces.taglib.SubTableTag</tag-class>
	  <body-content>JSP</body-content>
	  
	    		  <attribute>
	   <description>This attribute defines row keys that are updated after an AJAX request</description>
	   <name>ajaxKeys</name>
	   	   	   					   	<deferred-value>
					<type>java.util.Set</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>The attribute takes a value-binding expression for a component property of
a backing bean</description>
	   <name>binding</name>
	   	   	   					   	<deferred-value>
					<type>javax.faces.component.UIComponent</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>Comma-delimited list of CSS style classes that are be applied to the columns of this table. A space separated list of classes may also be specified for any individual column. If the number of elements in this list is less than the number of columns specified in the "columns" attribute, no "class" attribute is output for each column greater than the number of elements in the list. If the number of elements in the list is greater than the number of columns specified in the "columns" attribute, the elements at the position in the list after the value of the "columns" attribute are ignored</description>
	   <name>columnClasses</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>It defines EL-binding  for a component state for saving or redefinition</description>
	   <name>componentState</name>
	   	   	   					   	<deferred-value>
					<type>org.ajax4jsf.model.DataComponentState</type>
				</deferred-value>
				   	  </attribute>
		  	  	  	  		  <attribute>
	   <description>A zero-relative row number of the first row to display</description>
	   <name>first</name>
	   	   	   					   	<deferred-value>
					<type>int</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>Space-separated list of CSS style class(es) that are be applied to any footer generated for this table</description>
	   <name>footerClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>Space-separated list of CSS style class(es) that are be applied to any header generated for this table</description>
	   <name>headerClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Every component may have a unique id that is automatically created if omitted</description>
	   <name>id</name>
	   	   	   		<rtexprvalue>false</rtexprvalue>
	   		<type>java.lang.String</type>
	   	  </attribute>
		  		  <attribute>
	   <description>HTML: a script expression; a pointer button is clicked on row</description>
	   <name>onRowClick</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: a script expression; a pointer button is double-clicked on row</description>
	   <name>onRowDblClick</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: script expression; a pointer button is pressed down on row</description>
	   <name>onRowMouseDown</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: a script expression; a pointer is moved within of row</description>
	   <name>onRowMouseMove</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: a script expression; a pointer is moved away of row</description>
	   <name>onRowMouseOut</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: a script expression; a pointer is moved onto of row</description>
	   <name>onRowMouseOver</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: script expression; a pointer button is released on row</description>
	   <name>onRowMouseUp</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The clientside script method to be called when the element is clicked</description>
	   <name>onclick</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when the element is double-clicked</description>
	   <name>ondblclick</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a key is pressed down over the element</description>
	   <name>onkeydown</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a key is pressed over the element and released</description>
	   <name>onkeypress</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a key is released</description>
	   <name>onkeyup</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a mouse button is pressed down over the element</description>
	   <name>onmousedown</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a pointer is moved within the element</description>
	   <name>onmousemove</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a pointer is moved away from the element</description>
	   <name>onmouseout</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a pointer is moved onto the element</description>
	   <name>onmouseover</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a mouse button is released</description>
	   <name>onmouseup</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "false", this component is not rendered</description>
	   <name>rendered</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>A comma-delimited list of CSS style classes that is applied to popup table rows. A space separated list of classes may also be specified for any individual row. The styles are applied, in turn, to each row in the table. For example, if the list has two elements, the first style class in the list is applied to the first row, the second to the second row, the first to the third row, the second to the fourth row, etc. In other words, we keep iterating through the list until we reach the end, and then we start at the beginning again</description>
	   <name>rowClasses</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  	  	  	  		  <attribute>
	   <description>Converter for a row key object</description>
	   <name>rowKeyConverter</name>
	   	   	   					   	<deferred-value>
					<type>javax.faces.convert.Converter</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The attribute provides access to a row key in a Request scope</description>
	   <name>rowKeyVar</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A number of rows to display, or zero for all remaining
            rows in the table</description>
	   <name>rows</name>
	   	   	   					   	<deferred-value>
					<type>int</type>
				</deferred-value>
				   	  </attribute>
		  	  	  	  	  	  	  		  <attribute>
	   <description>The attribute  provides access to a component state on the client side</description>
	   <name>stateVar</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>The current value for this component</description>
	   <name>value</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A request-scope attribute via which the data object for the
            current row will be used when iterating</description>
	   <name>var</name>
	   	   	   		<rtexprvalue>false</rtexprvalue>
	   		<type>java.lang.String</type>
	   	  </attribute>
		  	  
	</tag>
<tag>
	  	  <description>This element adds "on-keypress" suggestions capabilites to any input text component (like &amp;lt;h:inputText&amp;gt;).
        It creates a pop-up window for a input field component pointed to by the "for" attribute.
        For an ordinary request, render a hidden HTML &amp;lt;div&amp;gt; element and the necessary JavaScript code.
        When input to the target field exceeds the "minChars" property (default is 1), perform an AJAX request with
        the value current entered. If the AJAX request is detected and the request parameters map contains the client ID of this component,
        call a method defined by suggestionAction, and use it to return a value as data for render table, same as &amp;lt;h:dataTable&amp;gt;.
        In this case, the component then works the same as an ordinary dataTable. The rendered table is inserted in the pop-up area and is used for suggestion prompts
        for input element. If a user clicks on such a table row, its text (or value defined by fetchValue) is inserted as the value of the input field.</description>
	  	  	  		  <name>suggestionbox</name>
	  	  <tag-class>org.richfaces.taglib.SuggestionBoxTag</tag-class>
	  <body-content>JSP</body-content>
	  
	    	  		  <attribute>
	   <description>Boolean attribute which provides possibility to limit JSF tree processing(decoding, conversion/validation, value applying) to the component which send the request only.
                Default value is "true"</description>
	   <name>ajaxSingle</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>Deprecated. This attribute sets the background color for the document body or table cells.
            
            This attribute sets the background color of the canvas for the document body (the BODY element) or for tables (the TABLE, TR, TH, and TD elements). Additional attributes for specifying text color can be used with the BODY element.
            
            This attribute has been deprecated in favor of style sheets for specifying background color information</description>
	   <name>bgcolor</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The attribute takes a value-binding expression for a component property of
a backing bean</description>
	   <name>binding</name>
	   	   	   					   	<deferred-value>
					<type>javax.faces.component.UIComponent</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>This attributes specifies the width (in pixels only) of the frame around a table</description>
	   <name>border</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "true", after process validations phase it skips updates of model beans on a force render response. It can be used for validating components input</description>
	   <name>bypassUpdates</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>This attribute specifies the amount of space between the
                border of the cell and its contents. If the value of
                this attribute is a pixel length, all four margins
                should be this distance from the contents. If the value
                of the attribute is percentage length, the top and
                bottom margins should be equally separated from the
                content based on percentage of the available vertical
                space, and the left and right margins should be equally
                separated from the content based on percentage of the
                available horizontal space</description>
	   <name>cellpadding</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>This attribute specifies how much space the user agent
                should leave between the table and the column on all
                four sides. The attribute also specifies the amount of
                space to leave between cells</description>
	   <name>cellspacing</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  	  		  <attribute>
	   <description>Direction indication for text that does not inherit
			directionality. Valid values are "LTR" (left-to-right)
			and "RTL" (right-to-left)</description>
	   <name>dir</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Name of the CSS class for a suggestion entry element. 
                (table row)</description>
	   <name>entryClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Name of requests queue to avoid send next request before complete other from same event. Can be used to reduce number of requests of frequently events (key press, mouse move etc.)</description>
	   <name>eventsQueue</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>A value to set in the target input element on a choice
                suggestion that isn't shown in the suggestion table. It
                can be used for descriptive output comments or
                suggestions. If not set, all text in the suggestion row
                is set as a value</description>
	   <name>fetchValue</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A zero-relative row number of the first row to display</description>
	   <name>first</name>
	   	   	   					   	<deferred-value>
					<type>int</type>
				</deferred-value>
				   	  </attribute>
		  	  	  		  <attribute>
	   <description>id (or full path of id's) of target components, for which this element must provide support.
		If a target component inside of the same &amp;lt;code&amp;gt;NamingContainer&amp;lt;/code&amp;gt; (UIForm, UIData in base implementations), can be simple value of the "id" attribute.
		For other cases must include id's of &amp;lt;code&amp;gt;NamingContainer&amp;lt;/code&amp;gt; components, separated by ':'. For search from the root of components, must be started with ':'.</description>
	   <name>for</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>This attribute specifies which sides of the frame surrounding a table will be visible. Possible values:  "void", "above", "below", "hsides", "lhs", "rhs", "vsides", "box" and "border".
        The default value is "void".</description>
	   <name>frame</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Delay (in seconds) before activating the suggestion
                pop-up. Default value is 400ms</description>
	   <name>frequency</name>
	   	   	   					   	<deferred-value>
					<type>double</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>Height of the pop-up window in pixels. Default value is "200".</description>
	   <name>height</name>
	   			<required>true</required>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Every component may have a unique id that is automatically created if omitted</description>
	   <name>id</name>
	   	   	   		<rtexprvalue>false</rtexprvalue>
	   		<type>java.lang.String</type>
	   	  </attribute>
		  		  <attribute>
	   <description>Attribute allows to ignore an Ajax Response produced by a request if the newest 'similar' request is
in a queue already. ignoreDupResponses="true" does not cancel the request while it is processed on the server,
but just allows to avoid unnecessary updates on the client side if the response isn't actual now</description>
	   <name>ignoreDupResponses</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A flag indicating that this component value must be converted and validated immediately (that is, during Apply Request Values phase), rather than waiting until a Process Validations phase.</description>
	   <name>immediate</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Code describing the language used in the generated markup for this component</description>
	   <name>lang</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "true", then of all AJAX-rendered on the page components only those will be updated, 
		which ID's are passed to the "reRender" attribute of the describable component. 
		"false"-the default value-means that all components with ajaxRendered="true" will be updated.</description>
	   <name>limitToList</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>Minimal number of chars in input to activate suggestion
                pop-up</description>
	   <name>minChars</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>"nothingLabel" is inserted to popup list if the autocomplete returns empty list. 
				It isn't selectable and list is closed as always after click on it and nothing is put to input.</description>
	   <name>nothingLabel</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called before DOM is updated</description>
	   <name>onbeforedomupdate</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called after the request is completed</description>
	   <name>oncomplete</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: script expression; selected objects are changed</description>
	   <name>onobjectchange</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: script expression; after
                value of target element is updated</description>
	   <name>onselect</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: script expression; before ajax event is submited</description>
	   <name>onsubmit</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Name the HTTP request parameter with the value of input
                element token. If not set, it be will sent as an input
                element name. In this case, input will perform
                validation and update the value. Default value is "inputvalue".</description>
	   <name>param</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML CSS class attribute of element for pop-up
                suggestion content</description>
	   <name>popupClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML CSS style attribute of element for pop-up
                suggestion content</description>
	   <name>popupStyle</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Id['s] (in format of call  UIComponent.findComponent()) of components, processed at the phases 2-5 in case of AjaxRequest  caused by this component. Can be single id, comma-separated list of Id's, or EL Expression  with array or Collection</description>
	   <name>process</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Id['s] (in format of call  UIComponent.findComponent()) of components, rendered in case of AjaxRequest  caused by this component. Can be single id, comma-separated list of Id's, or EL Expression  with array or Collection</description>
	   <name>reRender</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "false", this component is not rendered</description>
	   <name>rendered</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Attribute defines the time (in ms.) that the request will be wait in the queue before it is ready to send.
When the delay time is over, the request will be sent to the server or removed if the newest 'similar' request is in a queue already</description>
	   <name>requestDelay</name>
	   	   	   					   	<deferred-value>
					<type>int</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>A comma-delimited list of CSS style classes that is applied to popup table rows. A space separated list of classes may also be specified for any individual row. The styles are applied, in turn, to each row in the table. For example, if the list has two elements, the first style class in the list is applied to the first row, the second to the second row, the first to the third row, the second to the fourth row, etc. In other words, we keep iterating through the list until we reach the end, and then we start at the beginning again</description>
	   <name>rowClasses</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  	  	  	  	  		  <attribute>
	   <description>This attribute specifies which rules will appear between cells within a table. The rendering of rules is user agent dependent. Possible values:
            
            * none: No rules. This is the default value.
            * groups: Rules will appear between row groups (see THEAD, TFOOT, and TBODY) and column groups (see COLGROUP and COL) only.
            * rows: Rules will appear between rows only.
            * cols: Rules will appear between columns only.
            * all: Rules will appear between all rows and columns</description>
	   <name>rules</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Name of the CSS class for a selected suggestion entry
                element (table cell)</description>
	   <name>selectValueClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Name of the CSS class for a selected suggestion entry
                element (table row)</description>
	   <name>selectedClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "true", forces active Ajax region render response
                directly from stored components tree, bypasses page
                processing. Can be used for increase performance. Also,
                must be set to 'true' inside iteration components, such
                as dataTable.</description>
	   <name>selfRendered</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Pop-up shadow depth for suggestion content</description>
	   <name>shadowDepth</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Attribute defines shadow opacity for suggestion content</description>
	   <name>shadowOpacity</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If there are any component requests with identical IDs then these requests will be grouped.</description>
	   <name>similarityGroupingId</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>ID (in format of call UIComponent.findComponent()) of Request status component</description>
	   <name>status</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style(s) is/are to be applied when this component is rendered</description>
	   <name>style</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Corresponds to the HTML class attribute</description>
	   <name>styleClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  	  		  <attribute>
	   <description>Method calls an expression to get a collection of suggestion data on request. It must have one parameter with a type of Object with content of input component and must return any type allowed for &amp;lt;h:datatable&amp;gt;</description>
	   <name>suggestionAction</name>
	   	   	   						<deferred-method>
					<method-signature>java.lang.Object suggestionAction(java.lang.Object)</method-signature>
				</deferred-method>
				   	  </attribute>
		  		  <attribute>
	   <description>This attribute provides a summary of the table's purpose and structure for user agents rendering to non-visual media such as speech and Braille</description>
	   <name>summary</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Response waiting time on a particular request. If a response is not received during this time, the request is aborted</description>
	   <name>timeout</name>
	   	   	   					   	<deferred-value>
					<type>int</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Advisory title information about markup elements generated for this component</description>
	   <name>title</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The list (or single value) of symbols which can be used
                for division chosen of suggestion pop-up values in a
                target element. After input of a symbol from the list
                suggestion pop-up it is caused again</description>
	   <name>tokens</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>if true, a suggested object list will be created and will be updated every time when  an input value is changed. Default value is "false".</description>
	   <name>usingSuggestObjects</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>A request-scope attribute via which the data object for the
            current row will be used when iterating</description>
	   <name>var</name>
	   	   	   		<rtexprvalue>false</rtexprvalue>
	   		<type>java.lang.String</type>
	   	  </attribute>
		  		  <attribute>
	   <description>Width of the pop-up window in pixels. Default value is "200".</description>
	   <name>width</name>
	   			<required>true</required>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Attribute is similar to the standard HTML attribute and can specify window placement relative to the content. Default value is "200".</description>
	   <name>zindex</name>
	   	   	   					   	<deferred-value>
					<type>int</type>
				</deferred-value>
				   	  </attribute>
		  	  
	</tag>
<tag>
	  	  <description>A tab section within a tab panel</description>
	  	  	  		  <name>tab</name>
	  	  <tag-class>org.richfaces.taglib.TabTag</tag-class>
	  <body-content>JSP</body-content>
	  
	    		  <attribute>
	   <description>MethodBinding pointing at the application action to be invoked,
            if this UIComponent is activated by you, during the Apply
            Request Values or Invoke Application phase of the request
            processing lifecycle, depending on the value of the immediate
            property</description>
	   <name>action</name>
	   	   	   						<deferred-method>
					<method-signature>java.lang.Object action()</method-signature>
				</deferred-method>
				   	  </attribute>
		  	  		  <attribute>
	   <description>MethodBinding pointing at method accepting  an ActionEvent with return type void</description>
	   <name>actionListener</name>
	   	   	   						<deferred-method>
					<method-signature>void actionListener(javax.faces.event.ActionEvent)</method-signature>
				</deferred-method>
				   	  </attribute>
		  	  	  	  		  <attribute>
	   <description>boolean attribute which provides possibility to limit JSF tree processing(decoding, conversion/validation, value applying) 
to the component which send the request only</description>
	   <name>ajaxSingle</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The attribute takes a value-binding expression for a component property of
a backing bean</description>
	   <name>binding</name>
	   	   	   					   	<deferred-value>
					<type>javax.faces.component.UIComponent</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "true", after process validations phase it skips updates of model beans on a force render response. It can be used for validating components input</description>
	   <name>bypassUpdates</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Serialized (on default with JSON) data passed on the client by a developer on AJAX request. It's accessible via "data.foo" syntax</description>
	   <name>data</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Disables a tab in a tab panel</description>
	   <name>disabled</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Name of requests queue to avoid send next request before complete other from same event. Can be used to reduce number of requests of frequently events (key press, mouse move etc.)</description>
	   <name>eventsQueue</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>id of element to set focus after request completed on client side</description>
	   <name>focus</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Every component may have a unique id that is automatically created if omitted</description>
	   <name>id</name>
	   	   	   		<rtexprvalue>false</rtexprvalue>
	   		<type>java.lang.String</type>
	   	  </attribute>
		  		  <attribute>
	   <description>Attribute allows to ignore an Ajax Response produced by a request if the newest 'similar' request is
in a queue already. ignoreDupResponses="true" does not cancel the request while it is processed on the server,
but just allows to avoid unnecessary updates on the client side if the response isn't actual now</description>
	   <name>ignoreDupResponses</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>True means, that the default ActionListener should be executed
            immediately (i.e. during Apply Request Values phase of the
            request processing lifecycle), rather than waiting until the
            Invoke Application phase</description>
	   <name>immediate</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Text for the actual "tab" in a tab section</description>
	   <name>label</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Length for the actual "tab" in a tab section defined in pixels. If it is not defined, the
	    	length is calculated basing on a tab label text length</description>
	   <name>labelWidth</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "true", then of all AJAX-rendered on the page components only those will be updated, 
		which ID's are passed to the "reRender" attribute of the describable component. 
		"false"-the default value-means that all components with ajaxRendered="true" will be updated.</description>
	   <name>limitToList</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Attribute defines tab name. Default value is "getId()".</description>
	   <name>name</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called before DOM is updated</description>
	   <name>onbeforedomupdate</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The clientside script method to be called when the element is clicked</description>
	   <name>onclick</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called after the request is completed</description>
	   <name>oncomplete</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when the element is double-clicked</description>
	   <name>ondblclick</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a key is pressed down over the element</description>
	   <name>onkeydown</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a key is pressed over the element and released</description>
	   <name>onkeypress</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a key is released</description>
	   <name>onkeyup</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A JavaScript event handler; a label of the tab is clicked</description>
	   <name>onlabelclick</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A JavaScript event handler; a pointer within label is double-clicked</description>
	   <name>onlabeldblclick</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A JavaScript event handler; a key within label is pressed down</description>
	   <name>onlabelkeydown</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A JavaScript event handler; a key within label is pressed and released</description>
	   <name>onlabelkeypress</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A JavaScript event handler; a key within label is released</description>
	   <name>onlabelkeyup</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A JavaScript event handler; a pointer within label is pressed down</description>
	   <name>onlabelmousedown</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A JavaScript event handler; a pointer is moved within label</description>
	   <name>onlabelmousemove</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A JavaScript event handler; a pointer within label is released</description>
	   <name>onlabelmouseup</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a mouse button is pressed down over the element</description>
	   <name>onmousedown</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a pointer is moved within the element</description>
	   <name>onmousemove</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a pointer is moved away from the element</description>
	   <name>onmouseout</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a pointer is moved onto the element</description>
	   <name>onmouseover</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a mouse button is released</description>
	   <name>onmouseup</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Event must occur on the tab which has been entered</description>
	   <name>ontabenter</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Event must occur on the tab which has been left</description>
	   <name>ontableave</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>Id['s] (in format of call  UIComponent.findComponent()) of components, processed at the phases 2-5 in case of AjaxRequest  caused by this component. Can be single id, comma-separated list of Id's, or EL Expression  with array or Collection</description>
	   <name>process</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Id['s] (in format of call  UIComponent.findComponent()) of components, rendered in case of AjaxRequest  caused by this component. Can be single id, comma-separated list of Id's, or EL Expression  with array or Collection</description>
	   <name>reRender</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "false", this component is not rendered</description>
	   <name>rendered</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Attribute defines the time (in ms.) that the request will be wait in the queue before it is ready to send.
When the delay time is over, the request will be sent to the server or removed if the newest 'similar' request is in a queue already</description>
	   <name>requestDelay</name>
	   	   	   					   	<deferred-value>
					<type>int</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If there are any component requests with identical IDs then these requests will be grouped.</description>
	   <name>similarityGroupingId</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>ID (in format of call UIComponent.findComponent()) of Request status component</description>
	   <name>status</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style(s) is/are to be applied when this component is rendered</description>
	   <name>style</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Corresponds to the HTML class attribute</description>
	   <name>styleClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Tabs switch mode. Possible values are  "client", "server", "ajax", "page".</description>
	   <name>switchType</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>Response waiting time on a particular request. If a response is not received during this time, the request is aborted</description>
	   <name>timeout</name>
	   	   	   					   	<deferred-value>
					<type>int</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: An advisory title for this element. Often displayed as a tooltip</description>
	   <name>title</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  	  
	</tag>
<tag>
	  	  <description>A tab panel displaying tabs for grouping content of a panel.</description>
	  	  	  		  <name>tabPanel</name>
	  	  <tag-class>org.richfaces.taglib.TabPanelTag</tag-class>
	  <body-content>JSP</body-content>
	  
	    		  <attribute>
	   <description>A CSS class to be applied to an active tab</description>
	   <name>activeTabClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The attribute takes a value-binding expression for a component property of
a backing bean</description>
	   <name>binding</name>
	   	   	   					   	<deferred-value>
					<type>javax.faces.component.UIComponent</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A CSS class for content of a tab panel</description>
	   <name>contentClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A CSS style is for the content of a tab panel</description>
	   <name>contentStyle</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Id of Converter to be used or reference to a Converter</description>
	   <name>converter</name>
	   	   	   					   	<deferred-value>
					<type>javax.faces.convert.Converter</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A ValueExpression enabled attribute that, if present,
			will be used as the text of the converter message,
			replacing any message that comes from the converter</description>
	   <name>converterMessage</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Direction indication for text that does not inherit
			directionality. Valid values are "LTR" (left-to-right)
			and "RTL" (right-to-left)</description>
	   <name>dir</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A CSS class to be applied to a disabled tab</description>
	   <name>disabledTabClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>Sets tab headers alignment. It can be "left" or "right".
	    		 Default value is "left".</description>
	   <name>headerAlignment</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A CSS style is for the header of a tab panel.</description>
	   <name>headerClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Sets tab headers spacing. It should be a valid size unit expression. Default value is "1px".</description>
	   <name>headerSpacing</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Height of a tab panel defined in pixels or in percents</description>
	   <name>height</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Every component may have a unique id that is automatically created if omitted</description>
	   <name>id</name>
	   	   	   		<rtexprvalue>false</rtexprvalue>
	   		<type>java.lang.String</type>
	   	  </attribute>
		  		  <attribute>
	   <description>A flag indicating that this component value must be converted
            and validated immediately (that is, during Apply Request Values
            phase), rather than waiting until a Process Validations phase</description>
	   <name>immediate</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS class to be applied to an inactive (but not disabled) tab</description>
	   <name>inactiveTabClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A localized user presentable name for this component.</description>
	   <name>label</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Code describing the language used in the generated markup for this component</description>
	   <name>lang</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  	  		  <attribute>
	   <description>The clientside script method to be called when the element is clicked</description>
	   <name>onclick</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when the element is double-clicked</description>
	   <name>ondblclick</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a key is pressed down over the element</description>
	   <name>onkeydown</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a key is pressed over the element and released</description>
	   <name>onkeypress</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a key is released</description>
	   <name>onkeyup</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a mouse button is pressed down over the element</description>
	   <name>onmousedown</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a pointer is moved within the element</description>
	   <name>onmousemove</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a pointer is moved away from the element</description>
	   <name>onmouseout</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a pointer is moved onto the element</description>
	   <name>onmouseover</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a mouse button is released</description>
	   <name>onmouseup</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: a script expression; a tab has been changed</description>
	   <name>ontabchange</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "false", this component is not rendered</description>
	   <name>rendered</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  	  	  		  <attribute>
	   <description>If "true", this component is checked for non-empty input</description>
	   <name>required</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A ValueExpression enabled attribute that, if present,
			will be used as the text of the validation message for
			the "required" facility, if the "required" facility is
			used</description>
	   <name>requiredMessage</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Attribute defines name of selected tab</description>
	   <name>selectedTab</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style(s) is/are to be applied when this component is rendered</description>
	   <name>style</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Corresponds to the HTML class attribute</description>
	   <name>styleClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Tabs switch mode: "client", "server"(default), "ajax"</description>
	   <name>switchType</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A CSS class to be applied to all tabs</description>
	   <name>tabClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Advisory title information about markup elements generated for this component</description>
	   <name>title</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>MethodBinding pointing at a method that is called during
            Process Validations phase of the request processing lifecycle,
            to validate the current value of this component</description>
	   <name>validator</name>
	   	   	   						<deferred-method>
					<method-signature>void validator(javax.faces.context.FacesContext, javax.faces.component.UIComponent, java.lang.Object)</method-signature>
				</deferred-method>
				   	  </attribute>
		  		  <attribute>
	   <description>A ValueExpression enabled attribute that, if present,
			will be used as the text of the validator message,
			replacing any message that comes from the validator</description>
	   <name>validatorMessage</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>The current value of this component</description>
	   <name>value</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Listener for value changes</description>
	   <name>valueChangeListener</name>
	   	   	   						<deferred-method>
					<method-signature>void valueChangeListener(javax.faces.event.ValueChangeEvent)</method-signature>
				</deferred-method>
				   	  </attribute>
		  	  		  <attribute>
	   <description>Width of a tab panel defined in pixels or in percents. 
	    	The default value is 100%</description>
	   <name>width</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  
	</tag>
<tag>
	  	  <description>A link type control for switching betwen togglePanel's facets. The Target Panel is specified with the "for" attribute. It can be located even inside or outside the togglePanel.
        	As the result of switching between facets, the previous facet is hidden and the next is shown.</description>
	  	  	  		  <name>toggleControl</name>
	  	  <tag-class>org.richfaces.taglib.ToggleControlTag</tag-class>
	  <body-content>JSP</body-content>
	  
	    		  <attribute>
	   <description>Access key that, when pressed, transfers focus to this
				element</description>
	   <name>accesskey</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>MethodBinding pointing at the application action to be invoked,
            if this UIComponent is activated by you, during the Apply
            Request Values or Invoke Application phase of the request
            processing lifecycle, depending on the value of the immediate
            property</description>
	   <name>action</name>
	   	   	   						<deferred-method>
					<method-signature>java.lang.Object action()</method-signature>
				</deferred-method>
				   	  </attribute>
		  	  		  <attribute>
	   <description>MethodBinding pointing at method accepting  an ActionEvent with return type void</description>
	   <name>actionListener</name>
	   	   	   						<deferred-method>
					<method-signature>void actionListener(javax.faces.event.ActionEvent)</method-signature>
				</deferred-method>
				   	  </attribute>
		  	  	  		  <attribute>
	   <description>Boolean attribute which provides possibility to limit JSF tree processing(decoding, conversion/validation, value applying) to the component which send the request only.</description>
	   <name>ajaxSingle</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The attribute takes a value-binding expression for a component property of
a backing bean</description>
	   <name>binding</name>
	   	   	   					   	<deferred-value>
					<type>javax.faces.component.UIComponent</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "true", after process validations phase skip updates
				of model beans an force render response. Can be used for
				validate components input</description>
	   <name>bypassUpdates</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Serialized (on default with JSON) data passed on the client by a developer on AJAX request. It's accessible via "data.foo" syntax</description>
	   <name>data</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Direction indication for text that does not inherit
				directionality. Possible values are "LTR" (left-to-right)
				and "RTL" (right-to-left).</description>
	   <name>dir</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Name of requests queue to avoid send next request before
				complete other from same event. Can be used to reduce
				number of requests of frequently events (key press,
				mouse move, etc.)</description>
	   <name>eventsQueue</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>id of element to set focus after request completed on client side</description>
	   <name>focus</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>String, which contains id (in the format of a UIComponent.findComponent() call) of the target Toggle Panel.</description>
	   <name>for</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Every component may have a unique id that is automatically created if omitted</description>
	   <name>id</name>
	   	   	   		<rtexprvalue>false</rtexprvalue>
	   		<type>java.lang.String</type>
	   	  </attribute>
		  		  <attribute>
	   <description>Attribute allows to ignore an Ajax Response produced by a request if the newest 'similar' request is
in a queue already. ignoreDupResponses="true" does not cancel the request while it is processed on the server,
but just allows to avoid unnecessary updates on the client side if the response isn't actual now</description>
	   <name>ignoreDupResponses</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>True means, that the default ActionListener should be executed
            immediately (i.e. during Apply Request Values phase of the
            request processing lifecycle), rather than waiting until the
            Invoke Application phase</description>
	   <name>immediate</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Code describing the language used in the generated
				markup for this component</description>
	   <name>lang</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "true", updates on client side ONLY elements from this
				'reRender' property. if "false" (default) updates all
				rendered by ajax region components</description>
	   <name>limitToList</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called before DOM is updated</description>
	   <name>onbeforedomupdate</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>JavaScript code executed when this element loses focus</description>
	   <name>onblur</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>JavaScript code executed when a pointer button is
				clicked over this element</description>
	   <name>onclick</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>JavaScript code for call after request completed on
				client side</description>
	   <name>oncomplete</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>JavaScript code executed when a pointer button is double
				clicked over this element</description>
	   <name>ondblclick</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>JavaScript code executed when this element receives
				focus</description>
	   <name>onfocus</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>JavaScript code executed when a key is pressed down over
				this element</description>
	   <name>onkeydown</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>JavaScript code executed when a key is pressed and
				released over this element</description>
	   <name>onkeypress</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>JavaScript code executed when a key is released over
				this element</description>
	   <name>onkeyup</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>JavaScript code executed when a pointer button is
				pressed down over this element</description>
	   <name>onmousedown</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>JavaScript code executed when a pointer button is moved
				within this element</description>
	   <name>onmousemove</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>JavaScript code executed when a pointer button is moved
				away from this element</description>
	   <name>onmouseout</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>JavaScript code executed when a pointer button is moved
				onto this element</description>
	   <name>onmouseover</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>JavaScript code executed when a pointer button is
				released over this element</description>
	   <name>onmouseup</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>Attribute defines Id for corresponding panel</description>
	   <name>panelId</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Id['s] (in format of call  UIComponent.findComponent()) of components, processed at the phases 2-5 in case of AjaxRequest  caused by this component. Can be single id, comma-separated list of Id's, or EL Expression  with array or Collection</description>
	   <name>process</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Id['s] (in format of call UIComponent.findComponent()) of components, rendered in case of AjaxRequest caused by this component. 
				Can be single id, comma-separated list of Id's, or EL Expression with array or Collection</description>
	   <name>reRender</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "false", this component is not rendered</description>
	   <name>rendered</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Attribute defines the time (in ms.) that the request will be wait in the queue before it is ready to send.
When the delay time is over, the request will be sent to the server or removed if the newest 'similar' request is in a queue already</description>
	   <name>requestDelay</name>
	   	   	   					   	<deferred-value>
					<type>int</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If there are any component requests with identical IDs then these requests will be grouped.</description>
	   <name>similarityGroupingId</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>ID (in format of call UIComponent.findComponent()) of
				Request status component</description>
	   <name>status</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style(s) to be applied when this component is
				rendered</description>
	   <name>style</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Space-separated list of CSS style class(es) to be
				applied when this element is rendered. This value must
				be passed through as the "class" attribute on generated
				markup</description>
	   <name>styleClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Contains one of the facets names where target togglePanel is switched to</description>
	   <name>switchToState</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Position of this element in the tabbing order for the
				current document. This value must be an integer between
				0 and 32767</description>
	   <name>tabindex</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Response waiting time on a particular request. If a response is not received during this time, the request is aborted</description>
	   <name>timeout</name>
	   	   	   					   	<deferred-value>
					<type>int</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Advisory title information about markup elements
				generated for this component</description>
	   <name>title</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Initial value to set when rendered for the first time</description>
	   <name>value</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  	  
	</tag>
<tag>
	  	  <description>A wrapper component with named facets. Every facet is shown after activation corresponding toggleControl(the other is hidden).</description>
	  	  	  		  <name>togglePanel</name>
	  	  <tag-class>org.richfaces.taglib.TogglePanelTag</tag-class>
	  <body-content>JSP</body-content>
	  
	    		  <attribute>
	   <description>The attribute takes a value-binding expression for a component property of
a backing bean</description>
	   <name>binding</name>
	   	   	   					   	<deferred-value>
					<type>javax.faces.component.UIComponent</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Id of Converter to be used or reference to a Converter</description>
	   <name>converter</name>
	   	   	   					   	<deferred-value>
					<type>javax.faces.convert.Converter</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A ValueExpression enabled attribute that, if present,
			will be used as the text of the converter message,
			replacing any message that comes from the converter</description>
	   <name>converterMessage</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>Every component may have a unique id that is automatically created if omitted</description>
	   <name>id</name>
	   	   	   		<rtexprvalue>false</rtexprvalue>
	   		<type>java.lang.String</type>
	   	  </attribute>
		  		  <attribute>
	   <description>A flag indicating that this component value must be converted
            and validated immediately (that is, during Apply Request Values
            phase), rather than waiting until a Process Validations phase</description>
	   <name>immediate</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>It contains a name of the first active facet</description>
	   <name>initialState</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A localized user presentable name for this component.</description>
	   <name>label</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  	  		  <attribute>
	   <description>The clientside script method to be called when the element is clicked</description>
	   <name>onclick</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when the element is double-clicked</description>
	   <name>ondblclick</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a key is pressed down over the element</description>
	   <name>onkeydown</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a key is pressed over the element and released</description>
	   <name>onkeypress</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a key is released</description>
	   <name>onkeyup</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a mouse button is pressed down over the element</description>
	   <name>onmousedown</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a pointer is moved within the element</description>
	   <name>onmousemove</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a pointer is moved away from the element</description>
	   <name>onmouseout</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a pointer is moved onto the element</description>
	   <name>onmouseover</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a mouse button is released</description>
	   <name>onmouseup</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "false", this component is not rendered</description>
	   <name>rendered</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  	  	  		  <attribute>
	   <description>Names of the facets in the switching order. If
				ToggleControl doesn't contain information about a next facet to
				be shown it is switched corresponding to this
				attribute</description>
	   <name>stateOrder</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>CSS style(s) is/are to be applied when this component is rendered</description>
	   <name>style</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Corresponds to the HTML class attribute</description>
	   <name>styleClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Facets switch mode: "client", "server"(default), "ajax".</description>
	   <name>switchType</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>MethodBinding pointing at a method that is called during
            Process Validations phase of the request processing lifecycle,
            to validate the current value of this component</description>
	   <name>validator</name>
	   	   	   						<deferred-method>
					<method-signature>void validator(javax.faces.context.FacesContext, javax.faces.component.UIComponent, java.lang.Object)</method-signature>
				</deferred-method>
				   	  </attribute>
		  		  <attribute>
	   <description>A ValueExpression enabled attribute that, if present,
			will be used as the text of the validator message,
			replacing any message that comes from the validator</description>
	   <name>validatorMessage</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>The initial value to set when rendered for the first time.
				It contains information about an active facet</description>
	   <name>value</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Listener for value changes</description>
	   <name>valueChangeListener</name>
	   	   	   						<deferred-method>
					<method-signature>void valueChangeListener(javax.faces.event.ValueChangeEvent)</method-signature>
				</deferred-method>
				   	  </attribute>
		  	  	  
	</tag>
<tag>
	  	  <description>A horizontal bar with items on it. 
		If you want to use it as a standard top tool bar, point to each item with a ch:menu "for" attribute
		to link the appropriate drop-down menu with the item id on a tool bar.
		"toolBar" accepts any JSF components as children. They appear from left to right 
		in the definition order. The children are separated from each other basing on the value of the
		"itemSeparator" attribute. If you want to put the items along the right side for a menu bar,
		you can use the "toolBarGroup" component as a wrapper and define the "location" attribute
		there. The items inside the group can have their own separator. See the "toolBarGroup" component description for details.</description>
	  	  	  		  <name>toolBar</name>
	  	  <tag-class>org.richfaces.taglib.ToolBarTag</tag-class>
	  <body-content>JSP</body-content>
	  
	    		  <attribute>
	   <description>The attribute takes a value-binding expression for a component property of
a backing bean</description>
	   <name>binding</name>
	   	   	   					   	<deferred-value>
					<type>javax.faces.component.UIComponent</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A CSS style is to be applied to each element of tool bar content. 
    		Use this style, for example, to setup parameters of the font.</description>
	   <name>contentClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A CSS style is to be applied to each element of tool bar content.</description>
	   <name>contentStyle</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>A height of a bar in pixels. If a height is not defined,
    		a bar height depends of the "headerFontSize" skin parameter.</description>
	   <name>height</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Every component may have a unique id that is automatically created if omitted</description>
	   <name>id</name>
	   	   	   		<rtexprvalue>false</rtexprvalue>
	   		<type>java.lang.String</type>
	   	  </attribute>
		  		  <attribute>
	   <description>A separator between items on a bar. Possible values
    		are "none", "line", "square", "disc" and "grid". Default value is "none".</description>
	   <name>itemSeparator</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The clientside script method to be called when the element is clicked</description>
	   <name>onclick</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when the element is double-clicked</description>
	   <name>ondblclick</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: a script expression; a pointer button is clicked on an item</description>
	   <name>onitemclick</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: a script expression; a pointer button is double-clicked on an item</description>
	   <name>onitemdblclick</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: a script expression; a key is pressed down on an item</description>
	   <name>onitemkeydown</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: a script expression; a key is pressed and released on an item</description>
	   <name>onitemkeypress</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: a script expression; a key is released on an item</description>
	   <name>onitemkeyup</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: script expression; a pointer button is pressed down on an item</description>
	   <name>onitemmousedown</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: a script expression; a pointer is moved on an item</description>
	   <name>onitemmousemove</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: a script expression; a pointer is moved away from an item</description>
	   <name>onitemmouseout</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: a script expression; a pointer is moved onto an item</description>
	   <name>onitemmouseover</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: script expression; a pointer button is released on an item</description>
	   <name>onitemmouseup</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a key is pressed down over the element</description>
	   <name>onkeydown</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a key is pressed over the element and released</description>
	   <name>onkeypress</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a key is released</description>
	   <name>onkeyup</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a mouse button is pressed down over the element</description>
	   <name>onmousedown</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a pointer is moved within the element</description>
	   <name>onmousemove</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a pointer is moved away from the element</description>
	   <name>onmouseout</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a pointer is moved onto the element</description>
	   <name>onmouseover</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a mouse button is released</description>
	   <name>onmouseup</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "false", this component is not rendered</description>
	   <name>rendered</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A CSS class to be applied to tool bar separators.</description>
	   <name>separatorClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style(s) is/are to be applied when this component is rendered</description>
	   <name>style</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Corresponds to the HTML class attribute</description>
	   <name>styleClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A width of a bar that can be defined in pixels or as percentage. Default value is &amp;quot;100%&amp;quot;.</description>
	   <name>width</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  
	</tag>
<tag>
	  	  <description>A group of items inside a tool bar. The group item
	    is separated basing on the "itemSeparator" attribute. Location of a group
	    on a tool bar is set up with the "location" attribute.</description>
	  	  	  		  <name>toolBarGroup</name>
	  	  <tag-class>org.richfaces.taglib.ToolBarGroupTag</tag-class>
	  <body-content>JSP</body-content>
	  
	    		  <attribute>
	   <description>The attribute takes a value-binding expression for a component property of
a backing bean</description>
	   <name>binding</name>
	   	   	   					   	<deferred-value>
					<type>javax.faces.component.UIComponent</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>Every component may have a unique id that is automatically created if omitted</description>
	   <name>id</name>
	   	   	   		<rtexprvalue>false</rtexprvalue>
	   		<type>java.lang.String</type>
	   	  </attribute>
		  		  <attribute>
	   <description>A separator for the items in a group. Possible
	    	values are "none", "line", "square", "disc" and "grid" Default value is "none".</description>
	   <name>itemSeparator</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A location of a group on a tool bar. Possible values are "left" and "right". Default value is "left".</description>
	   <name>location</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: a script expression; a pointer button is clicked on an item</description>
	   <name>onitemclick</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: a script expression; a pointer button is double-clicked on an item</description>
	   <name>onitemdblclick</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: a script expression; a key is pressed down on an item</description>
	   <name>onitemkeydown</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: a script expression; a key is pressed and released on an item</description>
	   <name>onitemkeypress</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: a script expression; a key is released on an item</description>
	   <name>onitemkeyup</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: script expression; a pointer button is pressed down on an item</description>
	   <name>onitemmousedown</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: a script expression; a pointer is moved on an item</description>
	   <name>onitemmousemove</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: a script expression; a pointer is moved away from an item</description>
	   <name>onitemmouseout</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: a script expression; a pointer is moved onto an item</description>
	   <name>onitemmouseover</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: script expression; a pointer button is released on an item</description>
	   <name>onitemmouseup</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "false", this component is not rendered</description>
	   <name>rendered</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>A CSS class to be applied to tool bar group separators.</description>
	   <name>separatorClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style(s) is/are to be applied when this component is rendered</description>
	   <name>style</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Corresponds to the HTML class attribute</description>
	   <name>styleClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  	  
	</tag>
<tag>
	  	  <description>Defines tooltip for parent component.</description>
	  	  	  		  <name>toolTip</name>
	  	  <tag-class>org.richfaces.taglib.ToolTipTag</tag-class>
	  <body-content>JSP</body-content>
	  
	    		  <attribute>
	   <description>MethodBinding pointing at the application action to be invoked,
            if this UIComponent is activated by you, during the Apply
            Request Values or Invoke Application phase of the request
            processing lifecycle, depending on the value of the immediate
            property</description>
	   <name>action</name>
	   	   	   						<deferred-method>
					<method-signature>java.lang.Object action()</method-signature>
				</deferred-method>
				   	  </attribute>
		  	  		  <attribute>
	   <description>MethodBinding pointing at method accepting  an ActionEvent with return type void</description>
	   <name>actionListener</name>
	   	   	   						<deferred-method>
					<method-signature>void actionListener(javax.faces.event.ActionEvent)</method-signature>
				</deferred-method>
				   	  </attribute>
		  	  		  <attribute>
	   <description>boolean attribute which provides possibility to limit JSF tree processing(decoding, conversion/validation, value applying) to the component which sends the request only.
				Default value is "true"</description>
	   <name>ajaxSingle</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If the value of the "attached" attribute is "true", a component is attached to the parent component;
            	if "false", component does not listen to activating browser events, but could be activated externally.  Default value is "true"</description>
	   <name>attached</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The attribute takes a value-binding expression for a component property of
a backing bean</description>
	   <name>binding</name>
	   	   	   					   	<deferred-value>
					<type>javax.faces.component.UIComponent</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Defines direction of the popup list to appear. 
	    		Possible values are "top-right", "top-left", "bottom-right", "bottom-left", "auto".
	    		Default value is "bottom-right"</description>
	   <name>direction</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If false the components is rendered on the client but JavaScript for calling disabled. Default value is "false"</description>
	   <name>disabled</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>DEPRECATED. Use showEvent instead.  Default value is "mouseover"</description>
	   <name>event</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>If "true" tooltip should follow the mouse while it moves over the parent element. Default value is "false"</description>
	   <name>followMouse</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Id of the target component</description>
	   <name>for</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Delay in milliseconds before tooltip will be hidden. Default value is "0"</description>
	   <name>hideDelay</name>
	   	   	   					   	<deferred-value>
					<type>int</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Event that triggers the tooltip disappearance.
	    		Default value is "none" (so, the component does not disappears)</description>
	   <name>hideEvent</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Sets the horizontal offset between pop-up list and mouse pointer. Default value is "10"</description>
	   <name>horizontalOffset</name>
	   	   	   					   	<deferred-value>
					<type>int</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Every component may have a unique id that is automatically created if omitted</description>
	   <name>id</name>
	   	   	   		<rtexprvalue>false</rtexprvalue>
	   		<type>java.lang.String</type>
	   	  </attribute>
		  		  <attribute>
	   <description>True means, that the default ActionListener should be executed
            immediately (i.e. during Apply Request Values phase of the
            request processing lifecycle), rather than waiting until the
            Invoke Application phase</description>
	   <name>immediate</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Block/inline mode flag. Possible value are: "inline" or "block".  Default value is "inline". Tooltip will contain div/span elements respectively</description>
	   <name>layout</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Controls the way of data loading to a tooltip. May have following values: "client" (default) and "ajax"</description>
	   <name>mode</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: a script expression; a pointer button is clicked</description>
	   <name>onclick</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>JavaScript code for call after the tooltip shown</description>
	   <name>oncomplete</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: a script expression; a pointer button is double-clicked</description>
	   <name>ondblclick</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>JavaScript code for call after the tooltip hidden</description>
	   <name>onhide</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a key is pressed down over the element</description>
	   <name>onkeydown</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a key is pressed over the element and released</description>
	   <name>onkeypress</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a key is released</description>
	   <name>onkeyup</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a mouse button is pressed down over the element</description>
	   <name>onmousedown</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: a script expression; a pointer is moved within</description>
	   <name>onmousemove</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: a script expression; a pointer is moved away</description>
	   <name>onmouseout</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: a script expression; a pointer is moved onto</description>
	   <name>onmouseover</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a mouse button is released</description>
	   <name>onmouseup</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>JavaScript code for call after the tooltip called (some element overed) but before its requesting</description>
	   <name>onshow</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "false", this component is not rendered</description>
	   <name>rendered</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Delay in milliseconds before tooltip will be displayed. Default value is "0"</description>
	   <name>showDelay</name>
	   	   	   					   	<deferred-value>
					<type>int</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Event that triggers the tooltip.  Default value is "onmouseover"</description>
	   <name>showEvent</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style(s) is/are to be applied when this component is rendered</description>
	   <name>style</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Corresponds to the HTML class attribute</description>
	   <name>styleClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>The current value for this component</description>
	   <name>value</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Sets the vertical offset between pop-up list and mouse pointer. Default value is "10"</description>
	   <name>verticalOffset</name>
	   	   	   					   	<deferred-value>
					<type>int</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The same as CSS z-index for toolTip. Default value is "99"</description>
	   <name>zorder</name>
	   	   	   					   	<deferred-value>
					<type>int</type>
				</deferred-value>
				   	  </attribute>
		  	  
	</tag>
<tag>
	  	  <description>The &amp;lt;rich:tree&amp;gt;  component is designed for hierarchical data presentation and is applied for building a tree structure with a drag-and-drop capability.</description>
	  	  	  		  <name>tree</name>
	  	  <tag-class>org.richfaces.taglib.TreeTag</tag-class>
	  <body-content>JSP</body-content>
	  
	    		  <attribute>
	   <description>List of comma separated cursors that indicates when acceptable draggable over dropzone</description>
	   <name>acceptCursors</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A list of drag zones types, which elements are accepted by a drop zone</description>
	   <name>acceptedTypes</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>MethodBinding pointing at a method accepting an org.richfaces.component.UITree with return of java.lang.Boolean type.
If returned value is:
java.lang.Boolean. TRUE, a particular treeNode is expanded;
java.lang.Boolean.FALSE, a particular treeNode is collapsed;
null, a particular treeNode saves the current state</description>
	   <name>adviseNodeOpened</name>
	   	   	   						<deferred-method>
					<method-signature>java.lang.Boolean adviseNodeOpened(org.richfaces.component.UITree)</method-signature>
				</deferred-method>
				   	  </attribute>
		  		  <attribute>
	   <description>MethodBinding pointing at a method accepting an org.richfaces.component.UITree with return of java.lang.Boolean type.
If returned value is:
java.lang.Boolean. TRUE, a particular treeNode is selected;
java.lang.Boolean.FALSE, a particular treeNode is unselected;
null, a particular treeNode saves the current state</description>
	   <name>adviseNodeSelected</name>
	   	   	   						<deferred-method>
					<method-signature>java.lang.Boolean adviseNodeSelected(org.richfaces.component.UITree)</method-signature>
				</deferred-method>
				   	  </attribute>
		  		  <attribute>
	   <description>Defines which nodes keys will be added to AjaxNodeKeys automatically on the request from the children of the node. Values: "none" - nothing, "node" - only current node, "subtree" - node and all its children.</description>
	   <name>ajaxChildActivationEncodeBehavior</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>This attribute defines row keys that are updated after an AJAX request.</description>
	   <name>ajaxKeys</name>
	   	   	   					   	<deferred-value>
					<type>java.util.Set</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Keys of the nodes (without subtree) to be updated for ajax request risen by the node itself</description>
	   <name>ajaxNodeKeys</name>
	   	   	   					   	<deferred-value>
					<type>java.util.Set</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Defines which nodes keys will be added to AjaxNodeKeys automatically on selecting ajax request from the node. Values: "none" - nothing, "node" - only current node, "subtree" - node and all its children.</description>
	   <name>ajaxNodeSelectionEncodeBehavior</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>boolean attribute which provides possibility to limit JSF tree processing(decoding, conversion/validation, value applying) 
to the component which send the request only</description>
	   <name>ajaxSingle</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "true", an Ajax request to be submit when selecting node. Default value is "false".</description>
	   <name>ajaxSubmitSelection</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  	  	  		  <attribute>
	   <description>The attribute takes a value-binding expression for a component property of
a backing bean</description>
	   <name>binding</name>
	   	   	   					   	<deferred-value>
					<type>javax.faces.component.UIComponent</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "true", after process validations phase it skips updates of model beans on a force render response. It can be used for validating components input</description>
	   <name>bypassUpdates</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Listener called on expand/collapse event on the node</description>
	   <name>changeExpandListener</name>
	   	   	   						<deferred-method>
					<method-signature>void changeExpandListener(org.richfaces.event.NodeExpandedEvent)</method-signature>
				</deferred-method>
				   	  </attribute>
		  	  		  <attribute>
	   <description>It defines EL-binding  for a component state for saving or redefinition</description>
	   <name>componentState</name>
	   	   	   					   	<deferred-value>
					<type>org.ajax4jsf.model.DataComponentState</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Mapping between drop types and acceptable cursors</description>
	   <name>cursorTypeMapping</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Serialized (on default with JSON) data passed on the client by a developer on AJAX request. It's accessible via "data.foo" syntax</description>
	   <name>data</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Disables keyboard navigation. Default value is "false"</description>
	   <name>disableKeyboardNavigation</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Id of a component that is used as drag pointer during the drag operation</description>
	   <name>dragIndicator</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>MethodBinding representing an action listener method that will be notified after drag operation</description>
	   <name>dragListener</name>
	   	   	   						<deferred-method>
					<method-signature>void dragListener(org.richfaces.event.DragEvent)</method-signature>
				</deferred-method>
				   	  </attribute>
		  	  		  <attribute>
	   <description>A drag zone type that is used for zone definition, which elements can be accepted by a drop zone</description>
	   <name>dragType</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Data to be sent to the drop zone after a drop event. Default value is "getRowKey()".</description>
	   <name>dragValue</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>MethodBinding representing an action listener method that will be notified after drop operation</description>
	   <name>dropListener</name>
	   	   	   						<deferred-method>
					<method-signature>void dropListener(org.richfaces.event.DropEvent)</method-signature>
				</deferred-method>
				   	  </attribute>
		  	  		  <attribute>
	   <description>Data to be processed after a drop event. Default value is "getRowKey()".</description>
	   <name>dropValue</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Name of requests queue to avoid send next request before complete other from same event. Can be used to reduce number of requests of frequently events (key press, mouse move etc.)</description>
	   <name>eventsQueue</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  	  	  		  <attribute>
	   <description>id of element to set focus after request completed on client side</description>
	   <name>focus</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>List of comma separated cursors that indicates when you can grab and drag an object</description>
	   <name>grabCursors</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>List of comma separated cursors that indicates when you has grabbed something</description>
	   <name>grabbingCursors</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>Corresponds to the HTML class attribute. Applied to highlighted node</description>
	   <name>highlightedClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The icon for node</description>
	   <name>icon</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The icon for collapsed node</description>
	   <name>iconCollapsed</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The icon for expanded node</description>
	   <name>iconExpanded</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>An icon for component leaves</description>
	   <name>iconLeaf</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Every component may have a unique id that is automatically created if omitted</description>
	   <name>id</name>
	   	   	   		<rtexprvalue>false</rtexprvalue>
	   		<type>java.lang.String</type>
	   	  </attribute>
		  		  <attribute>
	   <description>Attribute allows to ignore an Ajax Response produced by a request if the newest 'similar' request is
in a queue already. ignoreDupResponses="true" does not cancel the request while it is processed on the server,
but just allows to avoid unnecessary updates on the client side if the response isn't actual now</description>
	   <name>ignoreDupResponses</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A flag indicating that this component value must be
				converted and validated immediately (during an
				Apply Request Values phase), rather than waiting until a
				Process Validations phase</description>
	   <name>immediate</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>If "true", then of all AJAX-rendered on the page components only those will be updated, 
		which ID's are passed to the "reRender" attribute of the describable component. 
		"false"-the default value-means that all components with ajaxRendered="true" will be updated.</description>
	   <name>limitToList</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>Node face facet name</description>
	   <name>nodeFace</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  	  		  <attribute>
	   <description>MethodBinding representing an action listener method that will be notified after selection of node.</description>
	   <name>nodeSelectListener</name>
	   	   	   						<deferred-method>
					<method-signature>void nodeSelectListener(org.richfaces.event.NodeSelectedEvent)</method-signature>
				</deferred-method>
				   	  </attribute>
		  	  		  <attribute>
	   <description>The client side script method to be called before DOM is updated</description>
	   <name>onbeforedomupdate</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The clientside script method to be called when the element is clicked</description>
	   <name>onclick</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: script expression to invoke on node collapsing</description>
	   <name>oncollapse</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called after the request is completed</description>
	   <name>oncomplete</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>JavaScript handler to be called on right click.
		   Returning false prevents default browser context menu from being displayed</description>
	   <name>oncontextmenu</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when the element is double-clicked</description>
	   <name>ondblclick</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A JavaScript event handler called after a drag operation</description>
	   <name>ondragend</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A JavaScript event handler called on enter draggable object to zone</description>
	   <name>ondragenter</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A JavaScript event handler called after a drag object leaves zone</description>
	   <name>ondragexit</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A JavaScript event handler called before drag operation</description>
	   <name>ondragstart</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>It's an event that is called when something is dropped on a drop zone</description>
	   <name>ondrop</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A JavaScript handler for event fired on a drop even the drop for a given type is not available</description>
	   <name>ondropend</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A JavaScript event handler called after a out operation</description>
	   <name>ondropout</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A JavaScript event handler called after a drop operation</description>
	   <name>ondropover</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: script expression to invoke on node expansion</description>
	   <name>onexpand</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a key is pressed down over the element</description>
	   <name>onkeydown</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a key is pressed over the element and released</description>
	   <name>onkeypress</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a key is released</description>
	   <name>onkeyup</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a mouse button is pressed down over the element</description>
	   <name>onmousedown</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a pointer is moved within the element</description>
	   <name>onmousemove</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a pointer is moved away from the element</description>
	   <name>onmouseout</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a pointer is moved onto the element</description>
	   <name>onmouseover</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a mouse button is released</description>
	   <name>onmouseup</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: script expression to invoke on node selection</description>
	   <name>onselected</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "true", data is preserved in a request. Default value is "true".</description>
	   <name>preserveDataInRequest</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Possible values are  "state", "request", "none". Default value is "request"</description>
	   <name>preserveModel</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Id['s] (in format of call  UIComponent.findComponent()) of components, processed at the phases 2-5 in case of AjaxRequest  caused by this component. Can be single id, comma-separated list of Id's, or EL Expression  with array or Collection</description>
	   <name>process</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Id['s] (in format of call  UIComponent.findComponent()) of components, rendered in case of AjaxRequest  caused by this component. Can be single id, comma-separated list of Id's, or EL Expression  with array or Collection</description>
	   <name>reRender</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>List of comma separated cursors that indicates when rejectable draggable over dropzone</description>
	   <name>rejectCursors</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "false", this component is not rendered</description>
	   <name>rendered</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Attribute defines the time (in ms.) that the request will be wait in the queue before it is ready to send.
When the delay time is over, the request will be sent to the server or removed if the newest 'similar' request is in a queue already</description>
	   <name>requestDelay</name>
	   	   	   					   	<deferred-value>
					<type>int</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Allow to select tree item using mouse right click</description>
	   <name>rightClickSelection</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  	  	  	  	  	  		  <attribute>
	   <description>Converter for a row key object</description>
	   <name>rowKeyConverter</name>
	   	   	   					   	<deferred-value>
					<type>javax.faces.convert.Converter</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The attribute provides access to a row key in a Request scope</description>
	   <name>rowKeyVar</name>
	   	   	   		<rtexprvalue>false</rtexprvalue>
	   		<type>java.lang.String</type>
	   	  </attribute>
		  	  	  		  <attribute>
	   <description>Corresponds to the HTML class attribute. Applied to selected node</description>
	   <name>selectedClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "true", connecting lines are show</description>
	   <name>showConnectingLines</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If there are any component requests with identical IDs then these requests will be grouped.</description>
	   <name>similarityGroupingId</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>ValueBinding pointing at instance of class implementing org.richfaces.component.state.TreeStateAdvisor interface.</description>
	   <name>stateAdvisor</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The attribute  provides access to a component state on the client side</description>
	   <name>stateVar</name>
	   	   	   		<rtexprvalue>false</rtexprvalue>
	   		<type>java.lang.String</type>
	   	  </attribute>
		  		  <attribute>
	   <description>ID (in format of call UIComponent.findComponent()) of Request status component</description>
	   <name>status</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style(s) is/are to be applied when this component is rendered</description>
	   <name>style</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Corresponds to the HTML class attribute</description>
	   <name>styleClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Tree Nodes switch mode: "client", "server", "ajax"</description>
	   <name>switchType</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Response waiting time on a particular request. If a response is not received during this time, the request is aborted</description>
	   <name>timeout</name>
	   	   	   					   	<deferred-value>
					<type>int</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "false" do not toggle node state on click.
				If "true", than node will be toggles on click on ether node content, 
				or node icon. 
 				Default value is "false".</description>
	   <name>toggleOnClick</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  	  	  		  <attribute>
	   <description>The attribute provides access to a TreeNode instance in a Request scope</description>
	   <name>treeNodeVar</name>
	   	   	   		<rtexprvalue>false</rtexprvalue>
	   		<type>java.lang.String</type>
	   	  </attribute>
		  		  <attribute>
	   <description>The attribute associates a type of dragable zone (dragType) with &amp;lt;rich:dndParam&amp;gt; defined for &amp;lt;rich:dropSupport&amp;gt; for passing parameter value to &amp;lt;rich:dragIndicator&amp;gt;. It uses JSON format: (drag_type: parameter_name).</description>
	   <name>typeMapping</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The current value for this component</description>
	   <name>value</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Attribute contains a name providing an access to data defined with value</description>
	   <name>var</name>
	   	   	   		<rtexprvalue>false</rtexprvalue>
	   		<type>java.lang.String</type>
	   	  </attribute>
		  	  	  
	</tag>
<tag>
	  	  <description>The &amp;lt;rich:treeNode&amp;gt; component is designed for creating sets of tree elements within a &amp;lt;rich:tree&amp;gt; component.</description>
	  	  	  		  <name>treeNode</name>
	  	  <tag-class>org.richfaces.taglib.TreeNodeTag</tag-class>
	  <body-content>JSP</body-content>
	  
	    	  		  <attribute>
	   <description>List of comma separated cursors that indicates when acceptable draggable over dropzone</description>
	   <name>acceptCursors</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A list of drag zones types, which elements are accepted by a drop zone</description>
	   <name>acceptedTypes</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>boolean attribute which provides possibility to limit JSF tree processing(decoding, conversion/validation, value applying) 
to the component which send the request only</description>
	   <name>ajaxSingle</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>An algorithm of AJAX request submission. Possible values are "inherit", "true", "false". Default value is "inherit".</description>
	   <name>ajaxSubmitSelection</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The attribute takes a value-binding expression for a component property of
a backing bean</description>
	   <name>binding</name>
	   	   	   					   	<deferred-value>
					<type>javax.faces.component.UIComponent</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "true", after process validations phase it skips updates of model beans on a force render response. It can be used for validating components input</description>
	   <name>bypassUpdates</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Listener called on expand/collapse event on the node</description>
	   <name>changeExpandListener</name>
	   	   	   						<deferred-method>
					<method-signature>void changeExpandListener(org.richfaces.event.NodeExpandedEvent)</method-signature>
				</deferred-method>
				   	  </attribute>
		  	  		  <attribute>
	   <description>Mapping between drop types and acceptable cursors</description>
	   <name>cursorTypeMapping</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Serialized (on default with JSON) data passed on the client by a developer on AJAX request. It's accessible via "data.foo" syntax</description>
	   <name>data</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Id of a component that is used as drag pointer during the drag operation</description>
	   <name>dragIndicator</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>MethodBinding representing an action listener method that will be notified after drag operation</description>
	   <name>dragListener</name>
	   	   	   						<deferred-method>
					<method-signature>void dragListener(org.richfaces.event.DragEvent)</method-signature>
				</deferred-method>
				   	  </attribute>
		  	  		  <attribute>
	   <description>A drag zone type that is used for zone definition, which elements can be accepted by a drop zone</description>
	   <name>dragType</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Data to be sent to the drop zone after a drop event. Default value is "getUITree().getDragValue()".</description>
	   <name>dragValue</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>MethodBinding representing an action listener method that will be notified after drop operation</description>
	   <name>dropListener</name>
	   	   	   						<deferred-method>
					<method-signature>void dropListener(org.richfaces.event.DropEvent)</method-signature>
				</deferred-method>
				   	  </attribute>
		  	  		  <attribute>
	   <description>Data to be processed after a drop event. Default value is "getUITree().getDropValue()".</description>
	   <name>dropValue</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Name of requests queue to avoid send next request before complete other from same event. Can be used to reduce number of requests of frequently events (key press, mouse move etc.)</description>
	   <name>eventsQueue</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>id of element to set focus after request completed on client side</description>
	   <name>focus</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>List of comma separated cursors that indicates when you can grab and drag an object</description>
	   <name>grabCursors</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>List of comma separated cursors that indicates when you has grabbed something</description>
	   <name>grabbingCursors</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Corresponds to the HTML class attribute. Applied to highlighted node</description>
	   <name>highlightedClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The icon for node</description>
	   <name>icon</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The icon for collapsed node</description>
	   <name>iconCollapsed</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>The icon for expanded node</description>
	   <name>iconExpanded</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  	  		  <attribute>
	   <description>An icon for component leaves</description>
	   <name>iconLeaf</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>Every component may have a unique id that is automatically created if omitted</description>
	   <name>id</name>
	   	   	   		<rtexprvalue>false</rtexprvalue>
	   		<type>java.lang.String</type>
	   	  </attribute>
		  		  <attribute>
	   <description>Attribute allows to ignore an Ajax Response produced by a request if the newest 'similar' request is
in a queue already. ignoreDupResponses="true" does not cancel the request while it is processed on the server,
but just allows to avoid unnecessary updates on the client side if the response isn't actual now</description>
	   <name>ignoreDupResponses</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "true", then of all AJAX-rendered on the page components only those will be updated, 
		which ID's are passed to the "reRender" attribute of the describable component. 
		"false"-the default value-means that all components with ajaxRendered="true" will be updated.</description>
	   <name>limitToList</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Name of node CSS class</description>
	   <name>nodeClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>MethodBinding representing an action listener method that will be notified after selection of node.</description>
	   <name>nodeSelectListener</name>
	   	   	   						<deferred-method>
					<method-signature>void nodeSelectListener(org.richfaces.event.NodeSelectedEvent)</method-signature>
				</deferred-method>
				   	  </attribute>
		  	  		  <attribute>
	   <description>The client side script method to be called before DOM is updated</description>
	   <name>onbeforedomupdate</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The clientside script method to be called when the element is clicked</description>
	   <name>onclick</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: script expression to invoke on node collapsing</description>
	   <name>oncollapse</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called after the request is completed</description>
	   <name>oncomplete</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>JavaScript handler to be called on right click.
		   Returning false prevents default browser context menu from being displayed</description>
	   <name>oncontextmenu</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when the element is double-clicked</description>
	   <name>ondblclick</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A JavaScript event handler called after a drag operation. Default value is "getDefaultOndragend()".</description>
	   <name>ondragend</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A JavaScript event handler called on enter draggable object to zone. Default value is "getDefaultOndragenter()".</description>
	   <name>ondragenter</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A JavaScript event handler called after a drag object leaves zone. Default value is "getDefaultOndragexit()".</description>
	   <name>ondragexit</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A JavaScript event handler called before drag object. Default value is "getDefaultOndragstart()".</description>
	   <name>ondragstart</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>It's an event that is called when something is dropped on a drop zone. Default value is "getDefaultOndrop()".</description>
	   <name>ondrop</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A JavaScript handler for event fired on a drop even the drop for a given type is not available. Default value is "getDefaultOndropend()".</description>
	   <name>ondropend</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A JavaScript event handler called after a out operation</description>
	   <name>ondropout</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A JavaScript event handler called after a drop operation</description>
	   <name>ondropover</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: script expression to invoke on node expansion</description>
	   <name>onexpand</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a key is pressed down over the element</description>
	   <name>onkeydown</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a key is pressed over the element and released</description>
	   <name>onkeypress</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a key is released</description>
	   <name>onkeyup</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a mouse button is pressed down over the element</description>
	   <name>onmousedown</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a pointer is moved within the element</description>
	   <name>onmousemove</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a pointer is moved away from the element</description>
	   <name>onmouseout</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a pointer is moved onto the element</description>
	   <name>onmouseover</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a mouse button is released</description>
	   <name>onmouseup</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: script expression to invoke on node selection</description>
	   <name>onselected</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Id['s] (in format of call  UIComponent.findComponent()) of components, processed at the phases 2-5 in case of AjaxRequest  caused by this component. Can be single id, comma-separated list of Id's, or EL Expression  with array or Collection</description>
	   <name>process</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Id['s] (in format of call  UIComponent.findComponent()) of components, 
		   	rendered in case of AjaxRequest  caused by this component. 
		   	Can be single id, comma-separated list of Id's, or EL Expression  with array or Collection. Default value is "getDefaultReRender()".</description>
	   <name>reRender</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>List of comma separated cursors that indicates when rejectable draggable over dropzone</description>
	   <name>rejectCursors</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "false", this component is not rendered</description>
	   <name>rendered</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Attribute defines the time (in ms.) that the request will be wait in the queue before it is ready to send.
When the delay time is over, the request will be sent to the server or removed if the newest 'similar' request is in a queue already</description>
	   <name>requestDelay</name>
	   	   	   					   	<deferred-value>
					<type>int</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Corresponds to the HTML class attribute. Applied to selected node</description>
	   <name>selectedClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If there are any component requests with identical IDs then these requests will be grouped.</description>
	   <name>similarityGroupingId</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>ID (in format of call UIComponent.findComponent()) of Request status component</description>
	   <name>status</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Gets timeout in ms. Default value is "getDefaultTimeout()".</description>
	   <name>timeout</name>
	   	   	   					   	<deferred-value>
					<type>int</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>A node type</description>
	   <name>type</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The attribute associates a type of dragable zone (dragType) with &amp;lt;rich:dndParam&amp;gt; defined for &amp;lt;rich:dropSupport&amp;gt; for passing parameter value to &amp;lt;rich:dragIndicator&amp;gt;. It uses JSON format: (drag_type: parameter_name).</description>
	   <name>typeMapping</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  	  
	</tag>
<tag>
	  	  <description>The &amp;lt;rich:treeNodesAdaptor&amp;gt; provides the possibility to define data models and create representations for them.</description>
	  	  	  		  <name>treeNodesAdaptor</name>
	  	  <tag-class>org.richfaces.taglib.TreeNodesAdaptorTag</tag-class>
	  <body-content>JSP</body-content>
	  
	    		  <attribute>
	   <description>The attribute takes a value-binding expression for a component property of
a backing bean</description>
	   <name>binding</name>
	   	   	   					   	<deferred-value>
					<type>javax.faces.component.UIComponent</type>
				</deferred-value>
				   	  </attribute>
		  	  	  		  <attribute>
	   <description>Every component may have a unique id that is automatically created if omitted</description>
	   <name>id</name>
	   	   	   		<rtexprvalue>false</rtexprvalue>
	   		<type>java.lang.String</type>
	   	  </attribute>
		  		  <attribute>
	   <description>This boolean expression is used to define which elements are processed. Default value is "true".</description>
	   <name>includedNode</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Defines collection to use at the other (non-top) levels of iteration</description>
	   <name>nodes</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.Object</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "false", this component is not rendered</description>
	   <name>rendered</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>A request-scope attribute via which the data object for the current collection element will be used when iterating</description>
	   <name>var</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  
	</tag>
<tag>
	  	  <description>The  &amp;lt;rich:virtualEarth&amp;gt; component presents the Microsoft Virtual Earth map in the JSF applications.</description>
	  	  	  		  <name>virtualEarth</name>
	  	  <tag-class>org.richfaces.taglib.VirtualEarthTag</tag-class>
	  <body-content>JSP</body-content>
	  
	    		  <attribute>
	   <description>The attribute takes a value-binding expression for a component property of
a backing bean</description>
	   <name>binding</name>
	   	   	   					   	<deferred-value>
					<type>javax.faces.component.UIComponent</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Initial map type. The possible values are "Normal", "Small", "Tiny". Default value is "Normal".</description>
	   <name>dashboardSize</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  		  <attribute>
	   <description>Every component may have a unique id that is automatically created if omitted</description>
	   <name>id</name>
	   	   	   		<rtexprvalue>false</rtexprvalue>
	   		<type>java.lang.String</type>
	   	  </attribute>
		  		  <attribute>
	   <description>Initial latitude coordinate in degrees, as a number between -90 and +90. Default value is "37.9721046".</description>
	   <name>lat</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Initial longitude coordinate in degrees, as a number between -180 and +180. Default value is "-122.04248428346".</description>
	   <name>lng</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Navigation control size. Possible values are  "Road", "Aerial", "Hybrid", "Birdseye". Default value is "Road"</description>
	   <name>mapStyle</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>HTML: script expression; the Virtual Earth object is initiated.</description>
	   <name>onLoadMap</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The clientside script method to be called when the element is clicked</description>
	   <name>onclick</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when the element is double-clicked</description>
	   <name>ondblclick</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a key is pressed down over the element</description>
	   <name>onkeydown</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a key is pressed over the element and released</description>
	   <name>onkeypress</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a key is released</description>
	   <name>onkeyup</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a mouse button is pressed down over the element</description>
	   <name>onmousedown</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a pointer is moved within the element</description>
	   <name>onmousemove</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a pointer is moved away from the element</description>
	   <name>onmouseout</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a pointer is moved onto the element</description>
	   <name>onmouseover</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The client side script method to be called when a mouse button is released</description>
	   <name>onmouseup</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>If "false", this component is not rendered</description>
	   <name>rendered</name>
	   	   	   					   	<deferred-value>
					<type>boolean</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>CSS style(s) is/are to be applied when this component is rendered</description>
	   <name>style</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Corresponds to the HTML class attribute</description>
	   <name>styleClass</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>The JavaScript variable that is used to access the Virtual Earth API. If you have
			 more than one Virtual Earth components on the same page, use individual
			 key for each of them. Default value name is "map".</description>
	   <name>var</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Virtual earth version, Default value is "6.1".</description>
	   <name>version</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  		  <attribute>
	   <description>Initial zoom level as a number between 1 and 18. Default value is "17".</description>
	   <name>zoom</name>
	   	   	   					   	<deferred-value>
					<type>java.lang.String</type>
				</deferred-value>
				   	  </attribute>
		  	  
	</tag>
<function>
				<name>clientId</name>
		<function-class>org.richfaces.function.RichFunction</function-class>
		<function-signature>java.lang.String clientId(java.lang.String)</function-signature>
	</function>
<function>
				<name>component</name>
		<function-class>org.richfaces.function.RichFunction</function-class>
		<function-signature>java.lang.String component(java.lang.String)</function-signature>
	</function>
<function>
				<name>element</name>
		<function-class>org.richfaces.function.RichFunction</function-class>
		<function-signature>java.lang.String element(java.lang.String)</function-signature>
	</function>
<function>
				<name>findComponent</name>
		<function-class>org.richfaces.function.RichFunction</function-class>
		<function-signature>javax.faces.component.UIComponent findComponent(java.lang.String)</function-signature>
	</function>
<function>
				<name>isUserInRole</name>
		<function-class>org.richfaces.function.RichFunction</function-class>
		<function-signature>boolean isUserInRole(java.lang.Object)</function-signature>
	</function>

</taglib>