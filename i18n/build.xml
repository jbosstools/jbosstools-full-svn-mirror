<?xml version="1.0"?>

<project name="org.jboss.tools.translations" default="debug" basedir="." xmlns:artifact="urn:maven-artifact-ant">

	<path id="jbtdir" path=".." />
	<property name="jbt.srcdir" value="${toString:jbtdir}" />

	<property file="i18n.properties" />

	<!-- Target locations: -->
	<property name="target.dir" location="target" />
	<property name="propdir" value="${target.dir}${file.separator}prop" />
	<property name="jardir" value="${target.dir}${file.separator}jars" />
	<property name="zipdir" value="${target.dir}${file.separator}zips" />

	<!-- Fetch Maven Ant Tasks jar: -->
	<!-- 2.0.9 is not yet in the jboss maven repo -->
	<property name="maven.version" value="2.0.8" />
	<property name="maven-artifact-ant.bootstrap.jar" location="${target.dir}/lib/maven-ant-tasks-${maven.version}.jar" />
	<property name="remoteRepo" value="" />

	<target name="-check-get-maven-artifact-ant">
		<available property="-get-maven-artifact-ant-done" file="${maven-artifact-ant.bootstrap.jar}" />
	</target>

	<target name="-get-maven-artifact-ant" depends="-check-get-maven-artifact-ant" unless="-get-maven-artifact-ant-done">
		<mkdir dir="${target.dir}/lib" />
		<get src="http://repository.jboss.com/maven2/org/apache/maven/maven-ant-tasks/${maven.version}/maven-ant-tasks-${maven.version}.jar" dest="${maven-artifact-ant.bootstrap.jar}" />
	</target>

	<!-- Define the Ant-Contrib and Tennera Ant Gettext tasks, using Maven 
	to resolve dependencies: -->
	<target name="initTaskDefs" depends="-get-maven-artifact-ant">
		<path id="maven-ant-tasks.classpath" path="${maven-artifact-ant.bootstrap.jar}" />
		<typedef resource="org/apache/maven/artifact/ant/antlib.xml" uri="urn:maven-artifact-ant" classpathref="maven-ant-tasks.classpath" />

		<!-- This would be used if we wanted to keep maven's repo out of ${user.home}
	    <artifact:localRepository id="local.repository" path="${basedir}/target/local-repo" layout="default"/>

    	<property name="deploy.repository.url" value="${basedir}/target/deployment-repo" />
    	<artifact:remoteRepository id="deploy.repository" url="file://localhost/${deploy.repository.url}" layout="default"/>
		-->

		<!-- Maven dependencies  -->
		<artifact:pom file="pom.xml" id="maven.project" />
		<artifact:dependencies pathId="dependency.classpath" useScope="runtime" type="jar">
			<pom refid="maven.project" />
		</artifact:dependencies>

		<!-- pick up the "for" task from ant-contrib -->
		<taskdef resource="net/sf/antcontrib/antlib.xml" classpathref="dependency.classpath" />

		<!-- ant-gettext tasks -->
		<taskdef name="prop2pot" classname="org.fedorahosted.tennera.antgettext.Prop2PotTask" classpathref="dependency.classpath" />
		<taskdef name="pot2en" classname="org.fedorahosted.tennera.antgettext.Pot2EnTask" classpathref="dependency.classpath" />
		<taskdef name="po2prop" classname="org.fedorahosted.tennera.antgettext.Po2PropTask" classpathref="dependency.classpath" />
		<taskdef name="xpath2pot" classname="org.fedorahosted.tennera.antgettext.XPath2PotTask" classpathref="dependency.classpath" />
		<typedef name="unbundlemapper" 
			classname="org.fedorahosted.tennera.antgettext.UnBundleNameMapper" 
			classpathref="dependency.classpath" /> 
	</target>


	<target name="init" depends="-checkver,initTaskDefs">
	</target>

	<target name="debug" depends="init">
		<echo message="jbt.srcdir=${jbt.srcdir}"/>
		<!-- get the source compile classpath in a printable form -->
		<pathconvert pathsep="${line.separator}|   |__ " property="echo.dependency.classpath" refid="dependency.classpath">
		</pathconvert>
		<echo message="|__ dependency.classpath path" />
		<echo message="|   |" />
		<echo message="|   |__ ${echo.dependency.classpath}" />
	</target>

	<target name="cleanpot" description="Remove all pot files">
		<delete dir="po" includes="**/*.pot" />
	</target>

	<target name="clean" description="Remove generated files">
		<!-- obsolete dirs -->
		<delete dir="target/pot" />
		<delete dir="po/en" />
		<delete dir="po/qps" />
		<delete dir="po/en_AA" />
		
		<delete dir="target/po" />
		<delete dir="${propdir}" />
		<delete dir="target/manifests" />
		<delete dir="${jardir}" />
		<delete dir="${zipdir}" />
		<delete dir="${target.dir}" includes="*.tmp" />
	</target>
		
	<target name="prop2pot" depends="init"
		description="Extract translation templates (POT) from the JBoss Tools English properties files">
		<!-- paths under jbt.srcdir look like: ${module}/plugins/${plugin}/{src,main,...} -->
		<!-- TODO properties *should* be found in exactly one place, but aren't.  
		See https://jira.jboss.org/jira/browse/JBIDE-2972 -->
		<prop2pot srcDir="${jbt.srcdir}" dstDir="po" includes="*/plugins/*/src/**/*.properties" >
			<!-- next two are Maven style, not currently used in JBT: --> 
<!-- These filesets were used in a <jar> call, not supported by <prop2pot>
			<fileset erroronmissingdir="false" dir="${plugindir}/src/main/java"/>
			<fileset erroronmissingdir="false" dir="${plugindir}/src/main/resources"/>
			 
			<fileset erroronmissingdir="false" dir="${plugindir}/src/main" excludes="java,resources"/>
			<fileset erroronmissingdir="false" dir="${plugindir}/src" excludes="main"/>
			<fileset erroronmissingdir="false" dir="${plugindir}/jbosscore"/>
			<fileset erroronmissingdir="false" dir="${plugindir}/jbossui"/>
			<fileset erroronmissingdir="false" dir="${plugindir}/resources"/>
			<fileset erroronmissingdir="false" dir="${plugindir}/template-src"/>
			//<fileset dir="${plugindir}/templates"/>  
-->
			<chainedmapper>
				<!-- rename to module~pluginID-org.jboss.ide.*~org.jboss.ide.*.pot -->
				<regexpmapper 
					handledirsep="true" 
					from="^([^/]+)/plugins/([^/]+)/[^/]+/(.*)[.]properties$$" 
					to="\1~\2-\3~\3.pot" />
				<filtermapper>
					<!-- org/jboss/ide/* -> org.jboss.ide.* -->
					<replacestring from="${file.separator}" to="."/>
					<!-- rename to module/pluginID-org.jboss.ide.*/org.jboss.ide.*.pot -->
					<replacestring from="~" to="/"/>
				</filtermapper>
			</chainedmapper>
		</prop2pot>
	</target>

	<!-- autogenerated "translations" -->
	<target name="en" depends="init" description="Generate English PO files from POT files">
		<pot2en srcDir="po" dstDir="target/po" locale="en" />
	</target>
	<target name="qps" depends="init" description="Generate Pseudo-translation PO files for qps locale from POT files">
		<pot2en srcDir="po" dstDir="target/po" locale="qps" pseudo="true" />
	</target>

	<target name="en_AA" depends="init" description="Generate Pseudo-translation PO files for en_AA locale from POT files">
		<pot2en srcDir="po" dstDir="target/po" locale="en_AA" pseudo="true" />
	</target>

	<target name="po2prop" depends="init" description="Generate Java properties files from translated PO files">
		<delete dir="${propdir}" />
		<mkdir dir="${propdir}" />
		<po2prop srcDir="po" dstDir="${propdir}" failonnull="true">
			<unbundlemapper />
		</po2prop>	
		<po2prop srcDir="target/po" dstDir="${propdir}" failonnull="true">
			<unbundlemapper />
		</po2prop>	
	</target>

	<!-- = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
          macrodef: checkprop checks that specified property has been set
         = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = -->
	<macrodef name="checkprop">
		<attribute name="name" />
		<sequential>
			<if>
				<not>
					<isset property="@{name}"/>
				</not>
				<then>
					<fail message="property '@{name}' is not set"/>
				</then>
			</if>
			<if>
				<length string="${@{name}}" length="0"/>
				<then>
					<fail message="property '@{name}' has an empty value"/>
				</then>
			</if>		
		</sequential>
	</macrodef>
	
	<!-- = = = = = = = = = = = = = = = = =
          macrodef: foreachlocale          
         = = = = = = = = = = = = = = = = = -->
    <macrodef name="foreachlocale">
      <attribute name="task" />
      <sequential>
		<!-- for each configured locale (in i18n.properties) -->
		<for param="locale" list="${locales}">
			<sequential>
		    	<antcall target="@{task}" inheritall="true">
		    	    <param name="locale" value="@{locale}"/>
		    	    <param name="localename" value="${NAME_@{locale}}"/>
		    		
		    		<!-- Having these task-specific params is ugly, but
		    		 otherwise <var>s don't get passed through: -->
		    	    <param name="plugindir" value="${plugindir}"/>
		    	    <param name="featurexml" value="${featurexml}"/>
		    	</antcall>
	    	</sequential>
		</for>
      </sequential>
    </macrodef>
	
	<!-- Processes the generated props directory, one plugin at a time, 
		 generating manifests and jars -->
	<target name="plugins" depends="init" description="Generate fragment manifests and jars for langpack plugins">
		<delete dir="${jardir}/plugins" />
		<mkdir dir="${jardir}/plugins" />
		<!-- for each plugin directory -->
		<for param="plugindir">
			<path>
				<dirset dir="${propdir}" includes="*/*" />
			</path>
			<sequential>
				<echo message="@{plugindir}" />
				<!-- TODO avoid property override if possible -->
				<!-- work out the plugin ID -->
				<var name="plugin" unset="true" />
				<propertyregex override="true" property="plugin" 
					input="@{plugindir}" 
					regexp="^${propdir}[/\\][^/\\]+[/\\]([^/\\]+).*" 
					select="\1" />
				<checkprop name="plugin"/>
				<echo level="verbose" message="@{plugindir} contains props for plugin ${plugin}"/>
				
				<!-- making sure these values are available to -plugin -->
				<checkprop name="PLUGIN_VERSION"/>
				<checkprop name="PLUGIN_VENDOR"/>
				<var name="plugindir" value="@{plugindir}" />
				<foreachlocale task="-plugin"/>
			</sequential>
		</for>
	</target>
	
	<target name="-plugin" >
		<!-- Jars up one fragment plugin.   -->
		<jar 
			destfile="${jardir}/plugins/${plugin}.nl-${locale}_${PLUGIN_VERSION}.jar" 
			filesonly="true"
			update="false" 
			whenmanifestonly="create"
			basedir="${plugindir}"
			duplicate="fail" 
			includes="**/*_${locale}.properties">
			<manifest>
				<attribute name="Manifest-Version" 
					value="1.0"/>
				<attribute name="Created-By" 
					value="JBoss Tools i18n (build.xml)"/>
				<attribute name="Bundle-Name" 
					value="${plugin} ${localename} NLS Support"/>
				<attribute name="Bundle-SymbolicName" 
					value="${plugin}.nl_${locale} ;singleton=true"/>
				<attribute name="Bundle-Version" 
					value="${PLUGIN_VERSION}"/>
				<attribute name="Bundle-Vendor" 
					value="${PLUGIN_VENDOR}"/>
				<attribute name="Fragment-Host" 
					value="${plugin}"/>
			</manifest>
		</jar>
	</target>

	<target name="features" depends="init" 
		description="Generate langpack feature manifests (one per locale) for each JBT feature, and corresponding site.xml">
		<delete dir="${propdir}/features" />
		<mkdir dir="${propdir}/features" />
		<delete dir="${jardir}/features" />
		<mkdir dir="${jardir}/features" />
		<tempfile 
			property="temp.file.sitefeatures" 
			destdir="${target.dir}" 
			prefix="site" 
			suffix=".tmp" 
			createfile="true" 
			deleteonexit="false" />
		<!-- for each feature manifest -->
		<for param="featurexml">
			<path>
				<fileset dir="${jbt.srcdir}" includes="*/features/*/feature.xml"/>
			</path>
			<sequential>
				<!-- TODO avoid property override if possible -->
				<!-- work out the feature ID -->
				<var name="feature" unset="true" />
				<propertyregex 
					override="true" 
					property="feature" 
					input="@{featurexml}" 
					regexp="^${jbt.srcdir}[/\\][^/\\]+[/\\]features[/\\]([^/\\]+)[/\\]feature.xml" 
					select="\1" />
				<checkprop name="feature"/>
				<echo level="verbose" message="Processing feature ${feature}"/>
				
				<!-- making sure this value is available to -feature -->
				<var name="featurexml" value="@{featurexml}" />
				<foreachlocale task="-feature"/>
			</sequential>
		</for>

		<foreachlocale task="-categorydef"/>
		
		<!-- Read in the list of <feature>s and <category-def>s created by 
			 the targets -categorydef and -feature -->
		<!-- TODO this is an ugly way to build XML 
			 (see also the <echo>s in above-mentioned targets)  -->
		<var name="features" unset="true" />
		<loadfile property="features"  srcFile="${temp.file.sitefeatures}"/>
		<delete file="${temp.file.sitefeatures}"/>

		<!-- And create the feature from the template, filling in the list of features -->
		<copy overwrite="true" tofile="${jardir}/site.xml" file="site-template.xml">
			<filterchain>
				<expandproperties/>
			</filterchain>
		</copy>
	</target>
	
	<!-- Create a <category-def> for ${locale} for site.xml -->
	<target name="-categorydef">
		<!-- ugly -->
		<echo append="true" file="${temp.file.sitefeatures}"
			message="&lt;category-def name=&quot;${locale}&quot; label=&quot;JBoss Tools Localization (${localename})&quot;/&gt;" />
		<!-- demunged, that looks like:
		   <category-def 
		   		name="${locale}" 
		   		label="JBoss Tools Localization (${localename})"/>
		-->
	</target>
	
	<!-- Create feature jar including manifest.  Also create a <feature> for site.xml -->
	<target name="-feature">
		<!-- create langpack feature element for site.xml -->
		<!-- ugly -->
		<echo append="true" file="${temp.file.sitefeatures}"
			message="&lt;feature url=&quot;features/${feature}.nl-${locale}_${PLUGIN_VERSION}.jar&quot; 
		      id=&quot;${feature}.nl-${locale}&quot; version=&quot;${PLUGIN_VERSION}&quot;&gt;
		      &lt;category name=&quot;${locale}&quot;/&gt;
		   &lt;/feature&gt;" />
		<!-- demunged, that looks like:
		   <feature url="features/${feature}.nl-${locale}_${PLUGIN_VERSION}.jar" 
		      id="${feature}.nl-${locale}" version="${PLUGIN_VERSION}">
		      <category name="${locale}"/>
		   </feature>
		-->
		<!-- Process feature.xml with <xslt> -->		
		<xslt 
			style="feature.xsl"
			in="${featurexml}" 
			out="${propdir}/features/${feature}.nl-${locale}_${PLUGIN_VERSION}/feature.xml" 
		>
			<param name="feature" expression="${feature}" />
			<param name="locale" expression="${locale}" />
			<param name="localename" expression="${localename}" />
			<param name="pluginversion" expression="${PLUGIN_VERSION}" />
		</xslt>

		<copy overwrite="true" 
			todir="${propdir}/features/${feature}.nl-${locale}_${PLUGIN_VERSION}">
			<fileset dir="feature-template/FEATURE.nl-LOCALE_VERSION" />
		</copy>
		<jar destfile="${jardir}/features/${feature}.nl-${locale}_${PLUGIN_VERSION}.jar" 
			basedir="${propdir}/features/${feature}.nl-${locale}_${PLUGIN_VERSION}" />
		<!-- might want to keep around for debugging: -->
		<delete dir="${propdir}/features/${feature}.nl-${locale}_${PLUGIN_VERSION}" />
	</target>
	
	<target name="p2" description="Generate metadata for Eclipse 3.4's update manager (P2)" >
		<!-- Generate P2 metadata so that update manager won't take forever.
			http://wiki.eclipse.org/Equinox_p2_Metadata_Generator
		 -->
		
		<exec executable="eclipse">
			<arg value="-application" />
			<arg value="org.eclipse.equinox.p2.metadata.generator.EclipseGenerator" />
			<arg value="-updateSite" />
			<arg value="${jardir}" />
			<arg value="-site" />
			<arg value="file://${jardir}/site.xml" />
			<arg value="-metadataRepository" />
			<arg value="file://${jardir}" />
			<arg value="-metadataRepositoryName" />
			<arg value="JBoss Tools Localization Update Site" />
			<arg value="-artifactRepository" />
			<arg value="file://${jardir}" />
			<arg value="-artifactRepositoryName" />
			<arg value="JBoss Tools Localization Artifacts" />
			<arg value="-compress" />
			<arg value="-append" />
			<arg value="-reusePack200Files" />
			<arg value="-noDefaultIUs" />
			<arg value="--launcher.suppressErrors" />
			<arg value="-nosplash" />
			<arg value="-consoleLog" />
			<arg value="-vmargs" />
			<arg value="-Xmx256m" />
		</exec>
	</target>
	
	<target name="most" depends="clean, prop2pot, en, qps, en_AA, po2prop, plugins, features" 
		description="Generates langpacks and metadata" /> 

	<target name="all" depends="clean, prop2pot, en, qps, en_AA, po2prop, plugins, features, p2" 
		description="Runs all targets in an appropriate order"/>

	
	<!-- Test for a class from Ant 1.7.1 (needed for the jar task's erroronmissingdir feature --> 
	<available property="Ant-1.7.1-or-later"
	               classname="org.apache.tools.ant.input.SecureInputHandler"/>

	<target name="-checkver" unless="Ant-1.7.1-or-later">
		<fail message="Incorrect version of ant: ${ant.version} but required: 1.7.1"/>
	</target>

</project>
