<?xml version="1.0"?>

<project name="org.jboss.tools.translations" default="debug" basedir="." xmlns:artifact="urn:maven-artifact-ant">

	<path id="jbtdir" path=".." />
	<property name="jbt.srcdir" value="${toString:jbtdir}" />

	<property file="i18n.properties" />

	<!-- Target locations: -->
	<property name="target.dir" location="target" />
	<property name="propdir" value="${target.dir}${file.separator}prop" />
	<property name="jardir" value="${target.dir}${file.separator}jars" />
	<property name="zipdir" value="${target.dir}${file.separator}zips" />

	<!-- Fetch Maven Ant Tasks jar: -->
	<!-- 2.0.9 is not yet in the jboss maven repo -->
	<property name="maven.version" value="2.0.8" />
	<property name="maven-artifact-ant.bootstrap.jar" location="${target.dir}/lib/maven-ant-tasks-${maven.version}.jar" />
	<property name="remoteRepo" value="" />

	<target name="-check-get-maven-artifact-ant">
		<available property="-get-maven-artifact-ant-done" file="${maven-artifact-ant.bootstrap.jar}" />
	</target>

	<target name="-get-maven-artifact-ant" depends="-check-get-maven-artifact-ant" unless="-get-maven-artifact-ant-done">
		<mkdir dir="${target.dir}/lib" />
		<get src="http://repository.jboss.com/maven2/org/apache/maven/maven-ant-tasks/${maven.version}/maven-ant-tasks-${maven.version}.jar" dest="${maven-artifact-ant.bootstrap.jar}" />
	</target>

	<!-- Define the Ant-Contrib and Tennera Ant Gettext tasks, using Maven 
	to resolve dependencies: -->
	<target name="initTaskDefs" depends="-get-maven-artifact-ant">
		<path id="maven-ant-tasks.classpath" path="${maven-artifact-ant.bootstrap.jar}" />
		<typedef resource="org/apache/maven/artifact/ant/antlib.xml" uri="urn:maven-artifact-ant" classpathref="maven-ant-tasks.classpath" />

		<!-- This would be used if we wanted to keep maven's repo out of ${user.home}
	    <artifact:localRepository id="local.repository" path="${basedir}/target/local-repo" layout="default"/>

    	<property name="deploy.repository.url" value="${basedir}/target/deployment-repo" />
    	<artifact:remoteRepository id="deploy.repository" url="file://localhost/${deploy.repository.url}" layout="default"/>
		-->

		<!-- Maven dependencies  -->
		<artifact:pom file="pom.xml" id="maven.project" />
		<artifact:dependencies pathId="dependency.classpath" useScope="runtime" type="jar">
			<pom refid="maven.project" />
		</artifact:dependencies>

		<!-- pick up the "for" task from ant-contrib -->
		<taskdef resource="net/sf/antcontrib/antlib.xml" classpathref="dependency.classpath" />

		<!-- xpath task -->
		<taskdef resource="net/uworks/andariel/andariel.properties" classpathref="dependency.classpath" />
		
		<taskdef name="groovy"
		         classname="org.codehaus.groovy.ant.Groovy"
		         classpathref="dependency.classpath"/>

		<!-- ant-gettext tasks -->
		<taskdef name="prop2pot" classname="org.fedorahosted.tennera.antgettext.Prop2PotTask" classpathref="dependency.classpath" />
		<taskdef name="pot2en" classname="org.fedorahosted.tennera.antgettext.Pot2EnTask" classpathref="dependency.classpath" />
		<taskdef name="po2prop" classname="org.fedorahosted.tennera.antgettext.Po2PropTask" classpathref="dependency.classpath" />
		<taskdef name="xpath2pot" classname="org.fedorahosted.tennera.antgettext.XPath2PotTask" classpathref="dependency.classpath" />
		<typedef name="unbundlemapper" 
			classname="org.fedorahosted.tennera.antgettext.UnBundleNameMapper" 
			classpathref="dependency.classpath" /> 
	</target>


	<target name="init" depends="-checkver,initTaskDefs">
	</target>

	<target name="debug" depends="init">
		<echo message="jbt.srcdir=${jbt.srcdir}"/>
		<!-- get the source compile classpath in a printable form -->
		<pathconvert pathsep="${line.separator}|   |__ " property="echo.dependency.classpath" refid="dependency.classpath">
		</pathconvert>
		<echo message="|__ dependency.classpath path" />
		<echo message="|   |" />
		<echo message="|   |__ ${echo.dependency.classpath}" />
	</target>

	<target name="clean" description="Remove generated files">
		<!-- obsolete dirs -->
		<delete dir="target/pot" />
		<delete dir="po/en" />
		<delete dir="po/qps" />
		<delete dir="po/en_AA" />
		
		<delete dir="target/po" />
		<delete dir="${propdir}" />
		<delete dir="target/manifests" />
		<delete dir="${jardir}" />
		<delete dir="${zipdir}" />
		<delete dir="${target.dir}" includes="*.tmp" />
	</target>
		
	<target name="prop2pot" depends="init"
		description="Extract translation templates (POT) from the JBoss Tools English properties files">
		<for param="moduledir" >
			<path>
				<dirset dir="${jbt.srcdir}" includes="*" excludes="i18n,.*" />
			</path>
			<sequential>
				<!-- FIXME create BundleNameMapper -->
				<propertyregex override="true" property="module" 
					input="@{moduledir}"  
					regexp="^${jbt.srcdir}${file.separator}([^/\\]+).*" 
					select="\1" />
				<checkprop propname="module"/>
				<echo message="module=${module}" />
				
				<!-- paths under jbt.srcdir look like: ${module}/plugins/${plugin}/{src,main,...} -->
				<!-- FIXME includes should be just plugins/*/src/**/*.properties.  
				See https://jira.jboss.org/jira/browse/JBIDE-2972  includes="plugins/*/*/**/*.properties" -->
				<prop2pot srcDir="@{moduledir}" dstDir="po/${module}" includes="plugins/*/src/**/*.properties" >
					<!-- next two are Maven style, not currently used in JBT: --> 
<!--
					<fileset erroronmissingdir="false" dir="${plugindir}/src/main/java"/>
					<fileset erroronmissingdir="false" dir="${plugindir}/src/main/resources"/>
					 
					<fileset erroronmissingdir="false" dir="${plugindir}/src/main" excludes="java,resources"/>
					<fileset erroronmissingdir="false" dir="${plugindir}/src" excludes="main"/>
					<fileset erroronmissingdir="false" dir="${plugindir}/jbosscore"/>
					<fileset erroronmissingdir="false" dir="${plugindir}/jbossui"/>
					<fileset erroronmissingdir="false" dir="${plugindir}/resources"/>
					<fileset erroronmissingdir="false" dir="${plugindir}/template-src"/>
					//<fileset dir="${plugindir}/templates"/>  
-->
					<!-- rename to pluginID-org.jboss.ide.*/org.jboss.ide.*.pot -->
					<chainedmapper>
						<regexpmapper handledirsep="true" from="^plugins/([^/]+)/[^/]+/(.*)[.]properties$$" to="\1-\2~\2.pot" />
						<filtermapper>
							<!-- org/jboss/ide/* -> org.jboss.ide.* -->
							<replacestring from="${file.separator}" to="."/>
							<replacestring from="~" to="/"/>
						</filtermapper>
					</chainedmapper>
				</prop2pot>
			</sequential>
		</for>
	</target>

	<!-- autogenerated "translations" -->
	<target name="en" depends="init" description="Generate English PO files from POT files">
		<pot2en srcDir="po" dstDir="target/po" locale="en" />
	</target>
	<target name="qps" depends="init" description="Generate Pseudo-translation PO files for qps locale from POT files">
		<pot2en srcDir="po" dstDir="target/po" locale="qps" pseudo="true" />
	</target>

	<target name="en_AA" depends="init" description="Generate Pseudo-translation PO files for en_AA locale from POT files">
		<pot2en srcDir="po" dstDir="target/po" locale="en_AA" pseudo="true" />
	</target>

	<target name="po2prop" depends="init" description="Generate Java properties files from translated PO files">
		<delete dir="${propdir}" />
		<mkdir dir="${propdir}" />
		<po2prop srcDir="po" dstDir="${propdir}" failonnull="true">
			<unbundlemapper />
		</po2prop>	
		<po2prop srcDir="target/po" dstDir="${propdir}" failonnull="true">
			<unbundlemapper />
		</po2prop>	
	</target>

	<!-- = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
          macrodef: checkprop checks that specified property has been set
         = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = -->
	<macrodef name="checkprop">
		<attribute name="propname" />
		<sequential>
			<if>
				<!-- FIXME fail on empty value -->
				<not>
					<isset property="@{propname}"/>
				</not>
				<then>
					<fail message="property '@{propname}' is not set"/>
				</then>
			</if>
		</sequential>
	</macrodef>

	<!-- = = = = = = = = = = = = = = = = =
          macrodef: processlocaleplugins        
         = = = = = = = = = = = = = = = = = -->
	<macrodef name="processlocaleplugins">
		<attribute name="rootdir" />
		<attribute name="task" />
		<sequential>
			<for param="plugindir">
				<path>
					<dirset dir="@{rootdir}" includes="*/*" />
				</path>
				<sequential>
					<!-- FIXME -->
					<propertyregex override="true" property="plugin" 
    					input="@{plugindir}" 
    					regexp="^@{rootdir}[/\\][^/\\]+[/\\]([^/\\]+).*" 
    					select="\1" />
					<checkprop propname="plugin"/>
    				<echo level="verbose" message="@{plugindir} contains props for plugin ${plugin}"/>
					<antcall target="@{task}">
						<param name="plugin" value="${plugin}"/>
						<param name="plugindir" value="@{plugindir}"/>
					</antcall>
				</sequential>
			</for>
		</sequential>
	</macrodef>

	<!-- Processes the generated props directory, one plugin at a time, 
		 generating manifests -->
	<target name="manifests" depends="init" description="Generate fragment plugin manifests for langpack plugins">
		<delete dir="target/manifests" />
		<processlocaleplugins rootdir="${propdir}" task="-manifest" />
	</target>

	
	<!-- Generates the manifests (one per locale) for one plugin.  Called by processlocaleplugins. -->
	<target name="-manifest">
		<!-- NB don't depend on initTaskDefs here, or ant loads the 
		classes over and over until it exhausts memory -->
		<checkprop propname="plugindir"/>
		<checkprop propname="plugin"/>
		<checkprop propname="PLUGIN_VERSION"/>
		<checkprop propname="PLUGIN_VENDOR"/>
		<for param="locale" list="${locales}">
			<sequential>
				<!-- FIXME -->
				<var name="locale" value="@{locale}" />
				<propertycopy override="true" property="localename" from="NAME_${locale}"/>
				<checkprop propname="localename"/>
				<copy overwrite="true" file="plugin-template.mf" tofile="target/manifests/${plugin}/${locale}">
					<filterchain>
						<expandproperties/>
					</filterchain>
				</copy>
<!-- for debug output:
				<concat><filelist files="target/manifests/${plugin}/${locale}"></filelist></concat>
-->
			</sequential>
		</for>
	</target>

	<!-- Processes the generated props directory, one plugin at a time, 
		 generating plugin jars from the props and manifest -->
	<target name="fragments" depends="init" description="Generate fragment plugin jars to contain translations" >
		<delete dir="${jardir}" />
		<mkdir dir="${jardir}/plugins" />
		<processlocaleplugins rootdir="${propdir}" task="-fragment" />
	</target>

	<!-- Jars up one fragment plugin.  Called by processlocaleplugins. -->
	<target name="-fragment">
		<!-- NB don't depend on initTaskDefs here, or ant loads the 
		classes over and over until it exhausts memory -->
		<checkprop propname="plugindir"/>
		<checkprop propname="plugin"/>
		<checkprop propname="PLUGIN_VERSION"/>
		<checkprop propname="PLUGIN_VENDOR"/>
		
		<for param="locale" list="${locales}">
			<sequential>
				<!-- FIXME -->
				<var name="__locale" value="@{locale}" />
				<propertycopy override="true" property="localename" from="NAME_@{locale}"/>
				<checkprop propname="localename"/>

				<!-- FIXME -->
				<var name="jar" value="${jardir}/plugins/${plugin}.nl-@{locale}_${PLUGIN_VERSION}.jar" />
				<echo level="verbose" message="Jarring up ${jar} from directory ${plugindir}"/>
				<jar 
					destfile="${jar}" 
					update="no" 
					basedir="${plugindir}"
					duplicate="fail" 
					includes="**/*_@{locale}.properties"
					manifest="target/manifests/${plugin}/@{locale}">
				</jar>
			</sequential>
		</for>
		
	</target>

	<target name="features" depends="init" 
		description="Generate langpack feature manifests (one per locale) for each JBT feature, and corresponding site.xml">
		<delete dir="${propdir}/features" />
		<mkdir dir="${propdir}/features" />
		<delete dir="${jardir}/features" />
		<mkdir dir="${jardir}/features" />
		<!-- FIXME -->
		<var name="temp.file.sitefeatures" unset="true" />
		<tempfile property="temp.file.sitefeatures" destdir="${target.dir}" prefix="site" suffix=".tmp" createfile="true" deleteonexit="false" />
		<sequential>
			<for param="featurexml">
				<path>
					<fileset dir="${jbt.srcdir}" includes="*/features/*/feature.xml"/>
				</path>
				<sequential>
					<!-- FIXME -->
					<propertyregex override="true" property="module" 
    					input="@{featurexml}" 
    					regexp="^${jbt.srcdir}${file.separator}([^/\\]+).*" 
    					select="\1" />
					<checkprop propname="module"/>
					<propertyregex override="true" property="feature" 
    					input="@{featurexml}" 
    					regexp="^${jbt.srcdir}${file.separator}[^/\\]+${file.separator}features${file.separator}([^/\\]+)${file.separator}feature.xml" 
    					select="\1" />
					<checkprop propname="feature"/>
					<!-- FIXME -->
					<var name="featurename" value="${feature}" />
					<var name="jarsize" value="0" />
					<echo level="verbose" message="Processing feature ${feature} in module ${module}"/>
						<for param="locale" list="${locales}">
							<sequential>
								<!-- FIXME -->
								<var name="locale" value="@{locale}" />
								<propertycopy override="true" property="localename" from="NAME_@{locale}"/>
								
								<xpath 
									file="@{featurexml}" 
									expression="/feature/plugin/@id" 
									delimiter=" "
									outputproperty="feature.${feature}.plugins"/>
								<propertycopy override="true" property="plugins" from="feature.${feature}.plugins"/>
								
								
								<!-- FIXME -->
								<var name="temp.file.featureplugins" unset="true" />
								<tempfile property="temp.file.featureplugins" destdir="${target.dir}" prefix="plugins" suffix=".tmp" createfile="true" deleteonexit="true" />
								<for param="plugin" list="${plugins}" delimiter=" ">
									<sequential>
										<if>
											<available file="${jardir}/plugins/@{plugin}.nl-${locale}_${PLUGIN_VERSION}.jar" />
											<then>
												<echo append="true" file="${temp.file.featureplugins}"
													message="&lt;plugin 
													id=&quot;@{plugin}.nl-${locale}&quot; 
													fragment=&quot;true&quot; unpack=&quot;false&quot; 
													version=&quot;${PLUGIN_VERSION}&quot; /&gt;" />
											</then>
										</if>
									</sequential>
								</for>
								<!-- FIXME -->
								<var name="plugins" unset="true" />
								<loadfile property="plugins"  srcFile="${temp.file.featureplugins}"/>
								<delete file="${temp.file.featureplugins}"/>

								
								<echo append="true" file="${temp.file.sitefeatures}"
									message="&lt;feature url=&quot;features/${feature}.nl-@{locale}_${PLUGIN_VERSION}.jar&quot; 
								      id=&quot;${feature}.nl-@{locale}&quot; version=&quot;${PLUGIN_VERSION}&quot;&gt;
								      &lt;category name=&quot;JBoss Tools Localization (${localename})&quot;/&gt;
								   &lt;/feature&gt;" />
								<!-- demunged, that looks like:
								   <feature url="features/${feature}.nl-@{locale}_${PLUGIN_VERSION}.jar" 
								      id="${feature}.nl-@{locale}" version="${PLUGIN_VERSION}">
								      <category name="JBoss Tools Localization"/>
								   </feature>
								-->
								
								<!-- FIXME download-size="${jarsize}" install-size="${jarsize}" -->
								<copy overwrite="true" 
									todir="${propdir}/features/${feature}.nl-@{locale}_${PLUGIN_VERSION}">
									<fileset dir="feature-template/FEATURE.nl-LOCALE_VERSION" />
									<filterchain>
										<expandproperties/>
									</filterchain>
								</copy>
								<jar destfile="${jardir}/features/${feature}.nl-@{locale}_${PLUGIN_VERSION}.jar" 
									basedir="${propdir}/features/${feature}.nl-@{locale}_${PLUGIN_VERSION}" />
								<!-- might want to keep around for debugging: -->
								<delete dir="${propdir}/features/${feature}.nl-@{locale}_${PLUGIN_VERSION}" />
							</sequential>
						</for>
				</sequential>
			</for>
		</sequential>
		<!--
		Generate a list of features for each locale, so that the update 
		site can have a category for each locale:
		-->
		<for param="locale" list="${locales}">
			<sequential>
				<propertycopy override="true" property="localename" from="NAME_@{locale}"/>
				<echo append="true" file="${temp.file.sitefeatures}"
					message="&lt;category-def name=&quot;JBoss Tools Localization (${localename})&quot; label=&quot;JBoss Tools Localization (${localename})&quot;/&gt;" />
				<!-- demunged, that looks like:
				   <category-def 
				   		name="JBoss Tools Localization (${localename})" 
				   		label="JBoss Tools Localization (${localename})"/>
				-->
			</sequential>
		</for>
		
		
		<!-- Read in the above list of features -->
		<!-- FIXME -->
		<var name="features" unset="true" />
		<loadfile property="features"  srcFile="${temp.file.sitefeatures}"/>
		<delete file="${temp.file.sitefeatures}"/>

		<!-- And create the feature from the template, filling in the list of features -->
		<copy overwrite="true" tofile="${jardir}/site.xml" file="site-template.xml">
			<filterchain>
				<expandproperties/>
			</filterchain>
		</copy>
	</target>
	
	<target name="p2" description="Generate metadata for Eclipse 3.4's update manager (P2)" >
		<!-- Generate P2 metadata so that update manager won't take forever.
			http://wiki.eclipse.org/Equinox_p2_Metadata_Generator
		 -->
		
		<exec executable="eclipse">
			<arg value="-application" />
			<arg value="org.eclipse.equinox.p2.metadata.generator.EclipseGenerator" />
			<arg value="-updateSite" />
			<arg value="${jardir}" />
			<arg value="-site" />
			<arg value="file://${jardir}/site.xml" />
			<arg value="-metadataRepository" />
			<arg value="file://${jardir}" />
			<arg value="-metadataRepositoryName" />
			<arg value="JBoss Tools Localization Update Site" />
			<arg value="-artifactRepository" />
			<arg value="file://${jardir}" />
			<arg value="-artifactRepositoryName" />
			<arg value="JBoss Tools Localization Artifacts" />
			<arg value="-compress" />
			<arg value="-append" />
			<arg value="-reusePack200Files" />
			<arg value="-noDefaultIUs" />
			<arg value="--launcher.suppressErrors" />
			<arg value="-nosplash" />
			<arg value="-consoleLog" />
			<arg value="-vmargs" />
			<arg value="-Xmx256m" />
		</exec>
	</target>
	
	<target name="zips" depends="init" description="Generate zip files containing langpacks, one zip per locale">
		<delete dir="${zipdir}" />
		<mkdir dir="${zipdir}" />
		<for param="locale" list="${locales}">
			<sequential>
				<zip
					destfile="${zipdir}/jbosstools-nls-@{locale}_${LANGPACK_VERSION}.zip"
					compress="false" 
					whenempty="fail"
					basedir="${jardir}" >
					<include name="plugins/*.nl-@{locale}_${PLUGIN_VERSION}.jar" />
					<include name="features/*.nl-@{locale}_${PLUGIN_VERSION}.jar/" />
				</zip>
			</sequential>
		</for>
	</target>

	<target name="most" depends="clean, prop2pot, en, qps, en_AA, po2prop, manifests, fragments, features" 
		description="Generates langpacks and metadata" /> 

	<target name="all" depends="clean, prop2pot, en, qps, en_AA, po2prop, manifests, fragments, features, p2, zips" 
		description="Runs all targets in an appropriate order"/>

	
	<!-- Test for a class from Ant 1.7.1 (needed for the jar task's erroronmissingdir feature --> 
	<available property="Ant-1.7.1-or-later"
	               classname="org.apache.tools.ant.input.SecureInputHandler"/>

	<target name="-checkver" unless="Ant-1.7.1-or-later">
		<fail message="Incorrect version of ant: ${ant.version} but required: 1.7.1"/>
	</target>

</project>
