<chapter id="concepts">
	<title>Key JBossIDE releng concepts</title>
	
	<section>
		<title>Builders</title>
		<para>
			A builder is responsible for building all features and plugins that belong to a specific JBossIDE component.
			For example, the <literal>aop</literal> builder builds the following:
		</para>
			
		<programlisting>
org.jboss.ide.eclipse.jdt.aop.feature
org.jboss.ide.eclipse.jdt.aop.core
org.jboss.ide.eclipse.jdt.aop.ui</programlisting>
		
		<para>
			All builders live under the "builders" directory at the top of the releng root. The "product" builder is a special builder that runs all other builders, collects the results,
			runs unit tests, and publishes html result pages. The "common" directory is a directory full of ant targets that are re-usable by all builders.
		</para>
		
		<para>A builder's name is the name of the directory under the "builders" folder. It's basic file hierarchy looks something like:</para>
		
		<programlisting>
builders/
	${builder-name}/
		build.properties.template
		build.requires
		customTargets.xml
		${builder-name}.map</programlisting>
		
		<itemizedlist>
			<listitem>
				<literal>build.properties.template</literal>: This should first be copied from one of the other builders, then edited as needed to include the properties that your customTargets.xml needs
				It is a ".template" because there are certain property values that are taken from the build customization script. If you need to make a change to this file, you will need
				to re-run the customization script.</listitem>
			<listitem>
				<literal>build.requires</literal>: A simple property file that declares the requirements of your builder. The syntax is simply:
				<programlisting>
builder.requires=requirement1,requirement2</programlisting>
			</listitem>
			<listitem>
				<literal>customTargets.xml</literal>: The customTargets.xml ant script (see the Eclipse documentation).
			</listitem>
			<listitem>
				<literal>${builder-name}.map</literal>: The map file for all of your features and plugins (see the above Eclipse documentation). 
			</listitem>
		</itemizedlist>
	</section>

	<section>
		<title>Requirements</title>
		<para>
			A requirement can be "required" by a builder before it is built. Builders are allowed to depend on as many requirements as they need. 
			Common requirements include eclipse, webtools, gef, and more. A requirements file hierarchy looks something like:
		</para>
			 		
		<programlisting>
requirements/
	${requirement-name}/
		build.properties
		buildRequirement.xml</programlisting>

		<para>A requirement is expected to have an ant script named "buildRequirement.xml" that has at least a single target called "build.requirement". This is the target
		that will be called by the build system when this requirement needs to be built. A requirement will be built once, and only once, per top-level build.</para>
		
		<para>It is possible for a requirement to pass back property values into the build system (for use later in i.e. a customTargets.xml script) by writing them to a file
		inside the requirement's directory called "return.properties". For example, at the end of your build.requirement target:</para>

		<programlisting>
&lt;echo file="return.properties"&gt;
	property1=value
	property2=value
&lt;/echo&gt;</programlisting>
	</section>
</chapter>