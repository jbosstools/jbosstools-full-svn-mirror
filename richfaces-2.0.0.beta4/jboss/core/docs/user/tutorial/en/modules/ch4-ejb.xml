<chapter id="the.ejb">
	<title>The EJB</title>
	
	<para>The next step is to create an EJB. For simplicity, it will be a stateless session bean, but others types are also easy to write.</para>
	
	<informaltable frame="none">
	<tgroup cols="2" align="left" colsep="1" rowsep="1">
		<tbody>
			<row>
				<entry valign="top"><para>
					Create a new Session EJB. Select <literal>File</literal> &gt; <literal>New</literal> &gt; <literal>Other...</literal>
					and choose <literal>JBoss-IDE</literal> &gt; <literal>EJB Components</literal> &gt; <literal>Session Bean</literal>.</para>
				</entry>
				<entry>
		            <mediaobject>
		                <imageobject>
		                    <imagedata align="center" fileref="images/new-session-bean-wizard.jpg"/>
		                </imageobject>
		            </mediaobject>
				</entry>
			</row>
			<row>
				<entry valign="top"><para>
					The package will be <literal>tutorial.ejb</literal> and the class name “FiboBean”.</para>
					<para>Leave the default options selected and be sure that <literal>ejbCreate() method</literal> is checked.</para>
				</entry>
				<entry>
		            <mediaobject>
		                <imageobject>
		                    <imagedata align="center" fileref="images/new-session-bean.jpg"/>
		                </imageobject>
		            </mediaobject>
				</entry>
			</row>
			<row>
				<entry valign="top"><para>
					Click on “Finish”. The class is then created and you should have a project like this. Note that all the method stubs are created with the default ejbCreate method.
				</para></entry>
				<entry align="left">
		            <mediaobject>
		                <imageobject>
		                    <imagedata align="center" fileref="images/created-fibo-bean.jpg"/>
		                </imageobject>
		            </mediaobject>
				</entry>
			</row>
		</tbody>
	</tgroup>
	</informaltable>
	
	<para>To make this interesting, we will create a business method for our EJB that computes a Fibonacci suite.</para>
	
	<informaltable frame="none">
	<tgroup cols="2" align="left" colsep="1" rowsep="1">
		<tbody>
			<row>
				<entry valign="top"><para>
					Right-click the FiboBean class, under the FiboBean Java file. You should see a <literal>J2EE</literal> menu. Select <literal>J2EE</literal> &gt; <literal>Add Business Method</literal>.
				</para></entry>
				<entry>
		            <mediaobject>
		                <imageobject>
		                    <imagedata align="center" fileref="images/add-business-method-menu.jpg"/>
		                </imageobject>
		            </mediaobject>
				</entry>
			</row>
			<row>
				<entry valign="top"><para>
					In the method wizard, enter <literal>compute</literal> as the method name, <literal>double[]</literal>
					for the return type and add a parameter called <literal>number</literal> of type <literal>int</literal>.
					Click on Finish.
				</para></entry>
				<entry>
		            <mediaobject>
		                <imageobject>
		                    <imagedata align="center" fileref="images/business-method-wizard.jpg"/>
		                </imageobject>
		            </mediaobject>
				</entry>
			</row>
			<row>
				<entry valign="top"><para>
					A new method has been added to the FiboBean class.
				</para></entry>
				<entry align="left">
		            <mediaobject>
		                <imageobject>
		                    <imagedata align="center" fileref="images/package-explorer-new-business-method.jpg"/>
		                </imageobject>
		            </mediaobject>
				</entry>
			</row>
		</tbody>
	</tgroup>
	</informaltable>
	
	<para>
		In the text editor, complete the body of the compute method as below :
		<programlisting>
public double[] compute(int number) {
    if (number &lt; 0) {
        throw new EJBException("Argument should be positive");
    }

    double[] suite = new double[number + 1];
    suite[0] = 0;

    if (number == 0) {
        return suite;
    }

    suite[1] = 1;

    for (int i = 2; i &lt;= number; i++) {
        suite[i] = suite[i - 1] + suite[i - 2];
    }

    return suite;
}
			</programlisting>
	</para>
	<para>
		As you may have noticied, each wizard adds all of the required XDoclet tags.
		Go to the top of the class and complete the attributes of the tag with the following values (by pressing  CTRL+Space for each attribute, you will get an auto-compled list) :
		<programlisting>
/**
 * @ejb.bean  name="Fibo"
 *            display-name="Name for Fibo"
 *            description="Description for Fibo"
 *            jndi-name="ejb/Fibo"
 *            type="Stateless"
 *            view-type="remote"
 */
public class FiboBean implements SessionBean {
			</programlisting>
	</para>
	<para>
		After that, the file should look like this. Now, we are ready to run XDoclet on the file to generate the EJB interfaces.
		<programlisting>
package tutorial.ejb;

import java.rmi.RemoteException;

import javax.ejb.EJBException;
import javax.ejb.SessionBean;
import javax.ejb.SessionContext;

import javax.ejb.CreateException;

/**
 * @ejb.bean  name="Fibo"
 *            display-name="Name for Fibo"
 *            description="Description for Fibo"
 *            jndi-name="ejb/Fibo"
 *            type="Stateless"
 *            view-type="remote"
 */
public class FiboBean implements SessionBean {

    /**
     *  
     */
    public FiboBean() {
        super();
        // TODO Auto-generated constructor stub
    }

    /*
     * (non-Javadoc)
     * 
     * @see javax.ejb.SessionBean#ejbActivate()
     */
    public void ejbActivate() throws EJBException, RemoteException {
        // TODO Auto-generated method stub
    }

    /*
     * (non-Javadoc)
     * 
     * @see javax.ejb.SessionBean#ejbPassivate()
     */
    public void ejbPassivate() throws EJBException, RemoteException {
        // TODO Auto-generated method stub
    }

    /*
     * (non-Javadoc)
     * 
     * @see javax.ejb.SessionBean#ejbRemove()
     */
    public void ejbRemove() throws EJBException, RemoteException {
        // TODO Auto-generated method stub
    }

    /*
     * (non-Javadoc)
     * 
     * @see javax.ejb.SessionBean#setSessionContext(javax.ejb.SessionContext)
     */
    public void setSessionContext(SessionContext ctx) throws EJBException,
            RemoteException {
        // TODO Auto-generated method stub
    }

    /**
     * Default create method
     * 
     * @throws CreateException
     * @ejb.create-method
     */
    public void ejbCreate() throws CreateException {
        // TODO Auto-generated method stub
    }

    /**
     * Business method
     * 
     * @ejb.interface-method view-type = "remote"
     */
    public double[] compute(int number) {
        if (number &lt; 0) {
            throw new EJBException("Argument should be positive");
        }

        double[] suite = new double[number + 1];
        suite[0] = 0;

        if (number == 0) {
            return suite;
        }

        suite[1] = 1;

        for (int i = 2; i &lt;= number; i++) {
            suite[i] = suite[i - 1] + suite[i - 2];
        }

        return suite;
    }
}
		</programlisting>
	</para>
</chapter>