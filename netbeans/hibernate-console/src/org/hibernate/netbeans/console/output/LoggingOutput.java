package org.hibernate.netbeans.console.output;

import java.awt.Color;
import java.awt.EventQueue;
import java.awt.Toolkit;
import java.awt.datatransfer.StringSelection;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Handler;
import java.util.logging.Level;
import java.util.logging.LogRecord;
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.TransferHandler;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import org.hibernate.netbeans.console.Icons;
import org.hibernate.netbeans.console.util.UIUtilities;
import org.openide.ErrorManager;
import org.openide.util.NbBundle;
import org.openide.util.Utilities;
import org.openide.windows.Mode;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;

/**
 * Top component which displays something.
 */
public final class LoggingOutput extends TopComponent {
    
    private static LoggingOutput instance;

    private static final String PREFERRED_ID = "LoggingOutput";
    
    private transient Handler logHandler;

    private transient final static DateFormat DATE_FORMAT = new SimpleDateFormat("HH:mm:ss:SSS");

    private int statementCount = 0;

    private JLabel countLabel;

    private LoggingOutput() {
        initComponents();
        postInit();
    }

    private void postInit() {
        setName(NbBundle.getMessage(LoggingOutput.class, "CTL_LoggingOutput"));
        setToolTipText(NbBundle.getMessage(LoggingOutput.class, "HINT_LoggingOutput"));
        setIcon(Utilities.loadImage(Icons.HIBERNATE_SMALL));
        Logger logger = Logger.getLogger("org.hibernate.SQL");
        logger.setLevel(Level.FINEST);
        Handler[] hs = logger.getHandlers();
        boolean handlerFound = false;
        for (Handler h : hs) {
            if (h == logHandler) {
                handlerFound = true;
                break;
            }
        }
        if (!handlerFound) {
            logHandler = new TextAreaHandler();
            logger.addHandler(logHandler);
        }
        toolBar.add(UIUtilities.createToolBarSpacer());
        toolBar.add(new JLabel("Statement count: "));
        countLabel = new JLabel("0");
        toolBar.add(countLabel);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        loggingOutputScrollPane = new javax.swing.JScrollPane();
        loggingTextPane = new javax.swing.JTextPane();
        toolBar = new javax.swing.JToolBar();
        clearLoggingButton = new javax.swing.JButton();
        pauseButton = new javax.swing.JToggleButton();
        copyButton = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());

        loggingOutputScrollPane.setBorder(null);
        loggingTextPane.setEditable(false);
        loggingTextPane.setFont(new java.awt.Font("Monospaced", 0, 12));
        loggingOutputScrollPane.setViewportView(loggingTextPane);

        add(loggingOutputScrollPane, java.awt.BorderLayout.CENTER);

        toolBar.setFloatable(false);
        clearLoggingButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/hibernate/netbeans/console/resources/clear-logging.png")));
        clearLoggingButton.setToolTipText("Clear");
        clearLoggingButton.setIconTextGap(0);
        clearLoggingButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        clearLoggingButton.setPreferredSize(new java.awt.Dimension(25, 25));
        clearLoggingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearLoggingButtonActionPerformed(evt);
            }
        });

        toolBar.add(clearLoggingButton);

        pauseButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/hibernate/netbeans/console/resources/Pause.gif")));
        pauseButton.setToolTipText("Pause");
        pauseButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        pauseButton.setPreferredSize(new java.awt.Dimension(25, 25));
        toolBar.add(pauseButton);

        copyButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/hibernate/netbeans/console/resources/copy.gif")));
        copyButton.setToolTipText("Copy");
        copyButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        copyButton.setPreferredSize(new java.awt.Dimension(25, 25));
        copyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyButtonActionPerformed(evt);
            }
        });

        toolBar.add(copyButton);

        add(toolBar, java.awt.BorderLayout.NORTH);

    }// </editor-fold>//GEN-END:initComponents

    private void copyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyButtonActionPerformed
        StringSelection ss = new StringSelection(loggingTextPane.getText());
        Toolkit.getDefaultToolkit().getSystemClipboard().setContents(ss, null);
        Toolkit.getDefaultToolkit().getSystemSelection().setContents(ss, null);
    }//GEN-LAST:event_copyButtonActionPerformed

    private void clearLoggingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearLoggingButtonActionPerformed
        loggingTextPane.setText("");
        statementCount = 0;
        countLabel.setText("0");
    }//GEN-LAST:event_clearLoggingButtonActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton clearLoggingButton;
    private javax.swing.JButton copyButton;
    private javax.swing.JScrollPane loggingOutputScrollPane;
    private javax.swing.JTextPane loggingTextPane;
    private javax.swing.JToggleButton pauseButton;
    private javax.swing.JToolBar toolBar;
    // End of variables declaration//GEN-END:variables
    
    /**
     * Gets default instance. Do not use directly: reserved for *.settings files only,
     * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
     * To obtain the singleton instance, use {@link findInstance}.
     */
    public static synchronized LoggingOutput getDefault() {
        if (instance == null) {
            instance = new LoggingOutput();
        }
        return instance;
    }
    
    /**
     * Obtain the LoggingOutput instance. Never call {@link #getDefault} directly!
     */
    public static synchronized LoggingOutput findInstance() {
        TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
        if (win == null) {
            ErrorManager.getDefault().log(ErrorManager.WARNING, "Cannot find Logging component. It will not be located properly in the window system.");
            return getDefault();
        }
        if (win instanceof LoggingOutput) {
            return (LoggingOutput)win;
        }
        ErrorManager.getDefault().log(ErrorManager.WARNING, "There seem to be multiple components with the '" + PREFERRED_ID + "' ID. That is a potential source of errors and unexpected behavior.");
        return getDefault();
    }
    
    public int getPersistenceType() {
        return TopComponent.PERSISTENCE_NEVER;
    }
    
    public void componentOpened() {
    }
    
    public void componentClosed() {
    }
    
    protected String preferredID() {
        return PREFERRED_ID;
    }
    
    private class TextAreaHandler extends Handler {

        private SimpleAttributeSet timeAttributeSet = new SimpleAttributeSet();

        public TextAreaHandler() {
            StyleConstants.setForeground(timeAttributeSet, Color.BLUE);
        }

        public void publish(final LogRecord record) {
            EventQueue.invokeLater(new Runnable() {
                public void run() {
                    if (pauseButton.isSelected() || !isOpened()) {
                        return;
                    }
                    Document doc = loggingTextPane.getDocument();
                    String str = record.getMessage();
                    String date = DATE_FORMAT.format(new Date(record.getMillis()));
                    try {
                        doc.insertString(doc.getLength(), date, timeAttributeSet);
                        doc.insertString(doc.getLength(), " ", null);
                        doc.insertString(doc.getLength(), str + "\n", null);
                        countLabel.setText(String.valueOf(++statementCount));
                    } catch (BadLocationException ex) {
                        // Ignore it, should not happen
                        ex.printStackTrace();
                    }
                }
            });
        }

        public void flush() {
        }

        public void close() throws SecurityException {
        }

    }

    public static void showLoggingWindow(boolean requestActive) {
        LoggingOutput win = LoggingOutput.findInstance();
        Mode m = WindowManager.getDefault().findMode("loggingOutput");
        if (m != null) {
            m.dockInto(win);
        }
        win.open();
        if (requestActive) {
            win.requestActive();
        }
    }

    public static void closeLoggingWindow() {
        LoggingOutput win = LoggingOutput.findInstance();
        if (win.isOpened()) {
            win.close();
        }
    }
    
}
